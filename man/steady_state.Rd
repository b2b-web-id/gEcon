\name{steady_state}
\alias{steady_state}
\title{
Compute the steady state (equilibrium) of a dynamic (static) model
}
\description{
The \code{steady_state} function solves for the steady state (equilibrium) of a dynamic (static) model
and calibrates chosen parameters using solvers from the \code{nleqslv} package.
}
\usage{
steady_state(model, solver = "nleqslv", use_jac = TRUE,
             calibration = TRUE, last_solver_iter = FALSE, options_list = NULL,
             solver_status = FALSE)
}
\arguments{
  \item{model}{
an object of gecon_model class.
}
  \item{solver}{
the name of non-linear equations solver. Current \code{gEcon} version provides only an interface to the \code{nleqslv} function.
}
  \item{use_jac}{
logical. If TRUE, the Jacobian matrix generated by the symbolic library is used, else numerical derivatives are computed.
}
  \item{calibration}{
logical. If FALSE, calibrating equations will not be taken into account in the computation
of the steady state (equilibrium) of a dynamic (static) model. Calibrated parameters' values will be fixed then at their initial levels.
}
  \item{last_solver_iter}{
logical. if TRUE, solver searches for a solution starting from the values of last saved iteration of the former search process instead 
of initial values specified by the user. FALSE by default.
}
  \item{options_list}{
a list of chosen nleqslv solver specific settings; the following options are available:
\itemize{
    \item \code{method}{ a character string with the name of the method to be used for solving non-linear system of equations.
                        Available methods are: "Newton" and "Broyden", the default option is "Newton".
    }
    \item \code{global}{ a character string with the name of global search strategy to be applied.
                        Strategies provided are: "dbldog", "pwldog", "qline", "gline", "none", the default option is "qline".
    }
    \item \code{xscalm}{ a character string with the name of the method for scaling initial values. It can be set to "fixed" or "auto".
                        The default option is "fixed".
    }
    \item \code{max_iter}{ a numeric value, the maximal number of iterations. The default value is 150.}
    \item \code{tol}{ a numeric value setting a numeric tolerance for a solution (function value tolerance).
                     The default value is 1e-6.
    }
    \item \code{xtol}{ a numeric value setting a numeric tolerance for a solution (iteration relative step length tolerance).
                      The default value is 1e-6.
    }
}
}
  \item{solver_status}{
logical. Should the solver exit code be returned?
}
}
\details{
Cf. gEcon users' guide, chapter `Deterministic steady state & calibration'.
}
\value{
An object of \code{gecon_model} class representing the model. Generic functions such as \code{print} and \code{summary} allow to show the model's components.
The \code{\link{get_ss_values}} and \code{\link{get_par_values}} functions return steady state (equilibrium) and parameters' values, respectively.
}
\seealso{
\code{\link{nleqslv}} for the detailed description of the \code{nleqslv} solver capabilities.
If the steady state has not been found, the \code{\link{get_residuals}} function can be used to check initial and final equations' residuals.
}
\examples{
# copy the example to the current working directory
file.copy(from = file.path(system.file("examples", package = "gEcon"),
          "rbc.gcn"), to = getwd())

# make and load the model
rbc <- make_model("rbc.gcn")

# find the steady state and calibrate alpha
rbc <- initval_calibr_par(rbc, list(alpha = 0.33))
rbc <- steady_state(rbc, use_jac=TRUE,
                    options_list=list(method = "Broyden", global = "gline",
                                      max_iter = 300, tol = 1e-7))
get_ss_values(rbc)

# find the steady state without calibrating alpha
rbc <- initval_calibr_par(rbc, list(alpha = 0.4))
rbc <- steady_state(rbc, calibration = FALSE, use_jac = FALSE,
                    options_list = list(method = "Newton", global = "gline",
                                        max_iter = 100, tol = 1e-5))
get_ss_values(rbc)
}
