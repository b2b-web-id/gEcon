\name{steady_state}
\alias{steady_state}
\title{
Compute the steady state (equilibrium) of the dynamic (static) model
}
\description{
The \code{steady_state} function solves for the steady state of a dynamic model (equilibrium for static model) and calibrates the chosen parameters using a set of solvers from the \code{nleqslv} package.
}
\usage{
steady_state(model, solver = "slv1_nleqslv", use_jac = TRUE,
             calibration = TRUE, options_list = NULL, solver_status = FALSE)
}
\arguments{
  \item{model}{
an object of the gecon_model class.
}
  \item{solver}{
the name of nonlinear equations solver. In the current version only an interface to \code{slv1_nleqslv} function has been implemented.
}
  \item{use_jac}{
the option to use the Jacobian generated by the symbolic library. If FALSE, numerical derivatives are computed.
}
  \item{calibration}{
if FALSE, calibrating equations will not be taken into account in the computation
of the steady state (equilibrium in case of static model). The initial values of calibrated parameters will be then treated as their values.
}
  \item{options_list}{
a list containing one or more of the following fields:
\itemize{
\item \code{method} a character, can be set to "Newton" or "Broyden", the default option is "Newton".
\item \code{global} a character, search strategy can be set to "dbldog", "pwldog", "qline", "gline", "none". The default option is "qline".
\item \code{xscalm} a character, a method of scaling x. It can be set to "fixed", "auto". The default option is "fixed".
\item \code{max_iter} a numeric value denoting max. number of iterations. The default value is 150.
\item \code{tol} a numeric value setting the numeric tolerance for a solution (function value tolerance). The default value is 1e-6.
\item \code{xtol} a numeric value setting the numeric tolerance for a solution (iteration relative step length tolerance). The default value is 1e-6.
}
}
  \item{solver_status}{
the information about the solver exit code.
}
}
\details{
Cf. gEcon Manual, chapter "Deterministic steady state & calibration".
}
\value{
An object of the \code{gecon_model} class representing the model. Generic functions such as \code{print} and \code{summary} allow to show model elements. The \code{\link{get_ss_values}} and \code{\link{get_par_values}} functions return the steady state (equilibrium) and parameter values respectively.
}
\author{
Karol Podemski \email{karol.podemski@gmail.com}, \cr
Kaja Retkiewicz-Wijtiwiak \email{kaja.retkiewicz@gmail.com}
}
\seealso{
\code{\link{nleqslv}} for the detailed description of the \code{nleqslv} solver capabilities.
If the steady state has not been found, the \code{\link{get_residuals}} function can be used to check initial and final residuals.
}
\examples{
# copy the example to the current working directory
file.copy(from = file.path(system.file("examples", package = 'gEcon'),
          'rbc.gcn'), to = getwd())

# make and load the model
rbc <- make_model('rbc.gcn')

# find the steady state and calibrate alpha
rbc <- initval_calibr_par(rbc, list(alpha = 0.33))
rbc <- steady_state(rbc, use_jac=TRUE,
                        options_list=list(method='Broyden', global='gline',
                                         max_iter = 300, tol = 1e-7))
get_ss_values(rbc)

# find the steady state without calibrating alpha
rbc <- initval_calibr_par(rbc, list(alpha = 0.4))
rbc <- steady_state(rbc, calibration = FALSE, use_jac = FALSE,
                    options_list = list(method = 'Newton', global = 'gline',
                                        max_iter = 100, tol = 1e-5))
get_ss_values(rbc)
}
