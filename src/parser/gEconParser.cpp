/** \file
 *  This C++ source file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : ../gEcon_CURRENT/src//parser/gEcon.g
 *     -                            On : 2015-01-18 17:38:18
 *     -                for the parser : gEconParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C++ language generator and runtime by Gokulakannan Somasundaram ( heavy lifting from C Run-time by Jim Idle )
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Gokulakannan Somasundaram, ElectronDB
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "gEconParser.hpp"
/* ----------------------------------------- */


/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */

	namespace  parser  {

using namespace antlr3;
/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
ANTLR_UINT8*   gEconParserTokenNames[89+4]
     = {
        (ANTLR_UINT8*) "<invalid>",       /* String to print to indicate an invalid token */
        (ANTLR_UINT8*) "<EOR>",
        (ANTLR_UINT8*) "<DOWN>",
        (ANTLR_UINT8*) "<UP>",
        (ANTLR_UINT8*) "ACOS",
        (ANTLR_UINT8*) "AND",
        (ANTLR_UINT8*) "ASIN",
        (ANTLR_UINT8*) "AT",
        (ANTLR_UINT8*) "ATAN",
        (ANTLR_UINT8*) "BACKSLASH",
        (ANTLR_UINT8*) "BACKWARDCOMP",
        (ANTLR_UINT8*) "BFALSE",
        (ANTLR_UINT8*) "BLOCK",
        (ANTLR_UINT8*) "BTRUE",
        (ANTLR_UINT8*) "CALIBR",
        (ANTLR_UINT8*) "CLETTER",
        (ANTLR_UINT8*) "COLON",
        (ANTLR_UINT8*) "COMMA",
        (ANTLR_UINT8*) "COMMENT",
        (ANTLR_UINT8*) "CONSTRAINTS",
        (ANTLR_UINT8*) "CONTROLS",
        (ANTLR_UINT8*) "COS",
        (ANTLR_UINT8*) "COSH",
        (ANTLR_UINT8*) "DBLCOLON",
        (ANTLR_UINT8*) "DDOT",
        (ANTLR_UINT8*) "DEFS",
        (ANTLR_UINT8*) "DELTA",
        (ANTLR_UINT8*) "DEQ",
        (ANTLR_UINT8*) "DID",
        (ANTLR_UINT8*) "DIDU",
        (ANTLR_UINT8*) "DIV",
        (ANTLR_UINT8*) "DOLLAR",
        (ANTLR_UINT8*) "DOR",
        (ANTLR_UINT8*) "DOUBLE",
        (ANTLR_UINT8*) "DQUOTE",
        (ANTLR_UINT8*) "E",
        (ANTLR_UINT8*) "EQ",
        (ANTLR_UINT8*) "ERF",
        (ANTLR_UINT8*) "EXCLAM",
        (ANTLR_UINT8*) "EXP",
        (ANTLR_UINT8*) "FOCS",
        (ANTLR_UINT8*) "ID",
        (ANTLR_UINT8*) "IDS",
        (ANTLR_UINT8*) "IDU",
        (ANTLR_UINT8*) "INF",
        (ANTLR_UINT8*) "INT",
        (ANTLR_UINT8*) "LANDSCAPE",
        (ANTLR_UINT8*) "LANGBR",
        (ANTLR_UINT8*) "LATEX",
        (ANTLR_UINT8*) "LBRACE",
        (ANTLR_UINT8*) "LBRACK",
        (ANTLR_UINT8*) "LEQ",
        (ANTLR_UINT8*) "LOG",
        (ANTLR_UINT8*) "LOGF",
        (ANTLR_UINT8*) "LONG",
        (ANTLR_UINT8*) "LPAREN",
        (ANTLR_UINT8*) "MINUS",
        (ANTLR_UINT8*) "MUL",
        (ANTLR_UINT8*) "NEQ",
        (ANTLR_UINT8*) "OBJ",
        (ANTLR_UINT8*) "OPTS",
        (ANTLR_UINT8*) "OR",
        (ANTLR_UINT8*) "OUTPUT",
        (ANTLR_UINT8*) "PLUS",
        (ANTLR_UINT8*) "POW",
        (ANTLR_UINT8*) "PROD",
        (ANTLR_UINT8*) "QUESTION",
        (ANTLR_UINT8*) "QUOTE",
        (ANTLR_UINT8*) "R",
        (ANTLR_UINT8*) "RANGBR",
        (ANTLR_UINT8*) "RARROW",
        (ANTLR_UINT8*) "RBRACE",
        (ANTLR_UINT8*) "RBRACK",
        (ANTLR_UINT8*) "RPAREN",
        (ANTLR_UINT8*) "SEMI",
        (ANTLR_UINT8*) "SETS",
        (ANTLR_UINT8*) "SHOCKS",
        (ANTLR_UINT8*) "SHORT",
        (ANTLR_UINT8*) "SIN",
        (ANTLR_UINT8*) "SINH",
        (ANTLR_UINT8*) "SLETTER",
        (ANTLR_UINT8*) "SQRT",
        (ANTLR_UINT8*) "SS",
        (ANTLR_UINT8*) "SUM",
        (ANTLR_UINT8*) "TAN",
        (ANTLR_UINT8*) "TANH",
        (ANTLR_UINT8*) "TILDE",
        (ANTLR_UINT8*) "TRYREDUCE",
        (ANTLR_UINT8*) "UDID",
        (ANTLR_UINT8*) "UID",
        (ANTLR_UINT8*) "VERBOSE",
        (ANTLR_UINT8*) "WS",
        (ANTLR_UINT8*) "ZERO"
       };


/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "../gEcon_CURRENT/src//parser/gEcon.g";

/** \brief Return the name of the grammar file that generated this code.
 */
const char* gEconParser::getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new gEconParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
gEconParser::gEconParser( StreamType* instream)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, NULL)

{
	// See if we can create a new parser with the standard constructor
	//
	this->init(instream);
}

/** \brief Create a new gEconParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
gEconParser::gEconParser( StreamType* instream, RecognizerSharedStateType* state)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, state)

{
	this->init(instream );
}

void gEconParser::init(StreamType* instream)
{
	/* Install the token table
	*/
	this->get_psrstate()->set_tokenNames( gEconParserTokenNames );


}

void
gEconParser::reset()
{
    this->get_rec()->reset();
}

/** Free the parser resources
 */
gEconParser::~gEconParser()
 {
}

/** Return token names used by this 
parser

 *
 * The returned pointer is used as an index into the token names table (using the token
 * number as the index).
 *
 * \return Pointer to first char * in the table.
 */
static ANTLR_UINT8**	getTokenNames()
{
        return gEconParserTokenNames;
}


/* Declare the bitsets
 */
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_opts_in_model83_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000), ANTLR_UINT64_LIT(0x0000000000800800) };
static  gEconParserImplTraits::BitsetListType FOLLOW_opts_in_model83( FOLLOW_opts_in_model83_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_sets_in_model86_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000), ANTLR_UINT64_LIT(0x0000000000800000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_sets_in_model86( FOLLOW_sets_in_model86_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_tryreduce_in_model89_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_tryreduce_in_model89( FOLLOW_tryreduce_in_model89_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_block_in_model93_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_block_in_model93( FOLLOW_block_in_model93_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_EOF_in_model97_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_EOF_in_model97( FOLLOW_EOF_in_model97_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_OPTS_in_opts115_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_OPTS_in_opts115( FOLLOW_OPTS_in_opts115_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LBRACE_in_opts117_bits[]	= { ANTLR_UINT64_LIT(0x4000000000000400), ANTLR_UINT64_LIT(0x0000000004000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LBRACE_in_opts117( FOLLOW_LBRACE_in_opts117_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_opt_in_opts120_bits[]	= { ANTLR_UINT64_LIT(0x4000000000000400), ANTLR_UINT64_LIT(0x0000000004000080) };
static  gEconParserImplTraits::BitsetListType FOLLOW_opt_in_opts120( FOLLOW_opt_in_opts120_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RBRACE_in_opts124_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000400) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RBRACE_in_opts124( FOLLOW_RBRACE_in_opts124_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_opts126_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_opts126( FOLLOW_SEMI_in_opts126_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_OUTPUT_in_opt144_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_OUTPUT_in_opt144( FOLLOW_OUTPUT_in_opt144_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LATEX_in_opt146_bits[]	= { ANTLR_UINT64_LIT(0x0000001000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LATEX_in_opt146( FOLLOW_LATEX_in_opt146_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_EQ_in_opt148_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002800) };
static  gEconParserImplTraits::BitsetListType FOLLOW_EQ_in_opt148( FOLLOW_EQ_in_opt148_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_atom_bool_in_opt154_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000400) };
static  gEconParserImplTraits::BitsetListType FOLLOW_atom_bool_in_opt154( FOLLOW_atom_bool_in_opt154_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_opt158_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_opt158( FOLLOW_SEMI_in_opt158_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_OUTPUT_in_opt166_bits[]	= { ANTLR_UINT64_LIT(0x0020000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_OUTPUT_in_opt166( FOLLOW_OUTPUT_in_opt166_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LOGF_in_opt168_bits[]	= { ANTLR_UINT64_LIT(0x0000001000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LOGF_in_opt168( FOLLOW_LOGF_in_opt168_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_EQ_in_opt170_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002800) };
static  gEconParserImplTraits::BitsetListType FOLLOW_EQ_in_opt170( FOLLOW_EQ_in_opt170_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_atom_bool_in_opt176_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000400) };
static  gEconParserImplTraits::BitsetListType FOLLOW_atom_bool_in_opt176( FOLLOW_atom_bool_in_opt176_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_opt180_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_opt180( FOLLOW_SEMI_in_opt180_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_OUTPUT_in_opt188_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_OUTPUT_in_opt188( FOLLOW_OUTPUT_in_opt188_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_R_in_opt190_bits[]	= { ANTLR_UINT64_LIT(0x0000001000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_R_in_opt190( FOLLOW_R_in_opt190_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_EQ_in_opt192_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002800) };
static  gEconParserImplTraits::BitsetListType FOLLOW_EQ_in_opt192( FOLLOW_EQ_in_opt192_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_atom_bool_in_opt198_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000400) };
static  gEconParserImplTraits::BitsetListType FOLLOW_atom_bool_in_opt198( FOLLOW_atom_bool_in_opt198_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_opt202_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_opt202( FOLLOW_SEMI_in_opt202_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_OUTPUT_in_opt210_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_OUTPUT_in_opt210( FOLLOW_OUTPUT_in_opt210_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_R_in_opt212_bits[]	= { ANTLR_UINT64_LIT(0x0040000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_R_in_opt212( FOLLOW_R_in_opt212_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LONG_in_opt214_bits[]	= { ANTLR_UINT64_LIT(0x0000001000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LONG_in_opt214( FOLLOW_LONG_in_opt214_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_EQ_in_opt216_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002800) };
static  gEconParserImplTraits::BitsetListType FOLLOW_EQ_in_opt216( FOLLOW_EQ_in_opt216_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_atom_bool_in_opt222_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000400) };
static  gEconParserImplTraits::BitsetListType FOLLOW_atom_bool_in_opt222( FOLLOW_atom_bool_in_opt222_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_opt226_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_opt226( FOLLOW_SEMI_in_opt226_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_OUTPUT_in_opt234_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_OUTPUT_in_opt234( FOLLOW_OUTPUT_in_opt234_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LATEX_in_opt236_bits[]	= { ANTLR_UINT64_LIT(0x0040000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LATEX_in_opt236( FOLLOW_LATEX_in_opt236_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LONG_in_opt238_bits[]	= { ANTLR_UINT64_LIT(0x0000001000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LONG_in_opt238( FOLLOW_LONG_in_opt238_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_EQ_in_opt240_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002800) };
static  gEconParserImplTraits::BitsetListType FOLLOW_EQ_in_opt240( FOLLOW_EQ_in_opt240_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_atom_bool_in_opt246_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000400) };
static  gEconParserImplTraits::BitsetListType FOLLOW_atom_bool_in_opt246( FOLLOW_atom_bool_in_opt246_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_opt250_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_opt250( FOLLOW_SEMI_in_opt250_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_OUTPUT_in_opt258_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_OUTPUT_in_opt258( FOLLOW_OUTPUT_in_opt258_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LATEX_in_opt260_bits[]	= { ANTLR_UINT64_LIT(0x0000400000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LATEX_in_opt260( FOLLOW_LATEX_in_opt260_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LANDSCAPE_in_opt262_bits[]	= { ANTLR_UINT64_LIT(0x0000001000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LANDSCAPE_in_opt262( FOLLOW_LANDSCAPE_in_opt262_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_EQ_in_opt264_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002800) };
static  gEconParserImplTraits::BitsetListType FOLLOW_EQ_in_opt264( FOLLOW_EQ_in_opt264_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_atom_bool_in_opt270_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000400) };
static  gEconParserImplTraits::BitsetListType FOLLOW_atom_bool_in_opt270( FOLLOW_atom_bool_in_opt270_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_opt274_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_opt274( FOLLOW_SEMI_in_opt274_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_VERBOSE_in_opt282_bits[]	= { ANTLR_UINT64_LIT(0x0000001000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_VERBOSE_in_opt282( FOLLOW_VERBOSE_in_opt282_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_EQ_in_opt284_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002800) };
static  gEconParserImplTraits::BitsetListType FOLLOW_EQ_in_opt284( FOLLOW_EQ_in_opt284_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_atom_bool_in_opt290_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000400) };
static  gEconParserImplTraits::BitsetListType FOLLOW_atom_bool_in_opt290( FOLLOW_atom_bool_in_opt290_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_opt294_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_opt294( FOLLOW_SEMI_in_opt294_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_BACKWARDCOMP_in_opt302_bits[]	= { ANTLR_UINT64_LIT(0x0000001000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_BACKWARDCOMP_in_opt302( FOLLOW_BACKWARDCOMP_in_opt302_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_EQ_in_opt304_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002800) };
static  gEconParserImplTraits::BitsetListType FOLLOW_EQ_in_opt304( FOLLOW_EQ_in_opt304_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_atom_bool_in_opt310_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000400) };
static  gEconParserImplTraits::BitsetListType FOLLOW_atom_bool_in_opt310( FOLLOW_atom_bool_in_opt310_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_opt314_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_opt314( FOLLOW_SEMI_in_opt314_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SETS_in_sets331_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SETS_in_sets331( FOLLOW_SETS_in_sets331_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LBRACE_in_sets333_bits[]	= { ANTLR_UINT64_LIT(0x40E342000000AC00), ANTLR_UINT64_LIT(0x0000000014052018) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LBRACE_in_sets333( FOLLOW_LBRACE_in_sets333_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_seteq_in_sets336_bits[]	= { ANTLR_UINT64_LIT(0x40E342000000AC00), ANTLR_UINT64_LIT(0x0000000014052098) };
static  gEconParserImplTraits::BitsetListType FOLLOW_seteq_in_sets336( FOLLOW_seteq_in_sets336_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_setvalid_in_sets340_bits[]	= { ANTLR_UINT64_LIT(0x40E342000000AC00), ANTLR_UINT64_LIT(0x0000000014052098) };
static  gEconParserImplTraits::BitsetListType FOLLOW_setvalid_in_sets340( FOLLOW_setvalid_in_sets340_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RBRACE_in_sets344_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000400) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RBRACE_in_sets344( FOLLOW_RBRACE_in_sets344_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_sets346_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_sets346( FOLLOW_SEMI_in_sets346_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_id_str_in_seteq368_bits[]	= { ANTLR_UINT64_LIT(0x0000001000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_id_str_in_seteq368( FOLLOW_id_str_in_seteq368_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_EQ_in_seteq370_bits[]	= { ANTLR_UINT64_LIT(0x40E342000000AC00), ANTLR_UINT64_LIT(0x0000000014052018) };
static  gEconParserImplTraits::BitsetListType FOLLOW_EQ_in_seteq370( FOLLOW_EQ_in_seteq370_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_setex_in_seteq376_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000400) };
static  gEconParserImplTraits::BitsetListType FOLLOW_setex_in_seteq376( FOLLOW_setex_in_seteq376_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_seteq378_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_seteq378( FOLLOW_SEMI_in_seteq378_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_setex_in_setvalid406_bits[]	= { ANTLR_UINT64_LIT(0x0408000008000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_setex_in_setvalid406( FOLLOW_setex_in_setvalid406_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LEQ_in_setvalid409_bits[]	= { ANTLR_UINT64_LIT(0x40E342000000AC00), ANTLR_UINT64_LIT(0x0000000014052018) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LEQ_in_setvalid409( FOLLOW_LEQ_in_setvalid409_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_DEQ_in_setvalid415_bits[]	= { ANTLR_UINT64_LIT(0x40E342000000AC00), ANTLR_UINT64_LIT(0x0000000014052018) };
static  gEconParserImplTraits::BitsetListType FOLLOW_DEQ_in_setvalid415( FOLLOW_DEQ_in_setvalid415_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_NEQ_in_setvalid421_bits[]	= { ANTLR_UINT64_LIT(0x40E342000000AC00), ANTLR_UINT64_LIT(0x0000000014052018) };
static  gEconParserImplTraits::BitsetListType FOLLOW_NEQ_in_setvalid421( FOLLOW_NEQ_in_setvalid421_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_setex_in_setvalid430_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  gEconParserImplTraits::BitsetListType FOLLOW_setex_in_setvalid430( FOLLOW_setex_in_setvalid430_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUESTION_in_setvalid432_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUESTION_in_setvalid432( FOLLOW_QUESTION_in_setvalid432_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_setex_add_in_setex459_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_setex_add_in_setex459( FOLLOW_setex_add_in_setex459_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_setex_intersect_in_setex_add486_bits[]	= { ANTLR_UINT64_LIT(0x2000000000000202) };
static  gEconParserImplTraits::BitsetListType FOLLOW_setex_intersect_in_setex_add486( FOLLOW_setex_intersect_in_setex_add486_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_OR_in_setex_add500_bits[]	= { ANTLR_UINT64_LIT(0x40E342000000AC00), ANTLR_UINT64_LIT(0x0000000014052018) };
static  gEconParserImplTraits::BitsetListType FOLLOW_OR_in_setex_add500( FOLLOW_OR_in_setex_add500_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_setex_intersect_in_setex_add506_bits[]	= { ANTLR_UINT64_LIT(0x2000000000000202) };
static  gEconParserImplTraits::BitsetListType FOLLOW_setex_intersect_in_setex_add506( FOLLOW_setex_intersect_in_setex_add506_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_BACKSLASH_in_setex_add522_bits[]	= { ANTLR_UINT64_LIT(0x40E342000000AC00), ANTLR_UINT64_LIT(0x0000000014052018) };
static  gEconParserImplTraits::BitsetListType FOLLOW_BACKSLASH_in_setex_add522( FOLLOW_BACKSLASH_in_setex_add522_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_setex_intersect_in_setex_add528_bits[]	= { ANTLR_UINT64_LIT(0x2000000000000202) };
static  gEconParserImplTraits::BitsetListType FOLLOW_setex_intersect_in_setex_add528( FOLLOW_setex_intersect_in_setex_add528_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_setex_cat_in_setex_intersect563_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000022) };
static  gEconParserImplTraits::BitsetListType FOLLOW_setex_cat_in_setex_intersect563( FOLLOW_setex_cat_in_setex_intersect563_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_AND_in_setex_intersect568_bits[]	= { ANTLR_UINT64_LIT(0x40E342000000AC00), ANTLR_UINT64_LIT(0x0000000014052018) };
static  gEconParserImplTraits::BitsetListType FOLLOW_AND_in_setex_intersect568( FOLLOW_AND_in_setex_intersect568_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_setex_cat_in_setex_intersect574_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000022) };
static  gEconParserImplTraits::BitsetListType FOLLOW_setex_cat_in_setex_intersect574( FOLLOW_setex_cat_in_setex_intersect574_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_setex_cat605_bits[]	= { ANTLR_UINT64_LIT(0x40617A083000AC00), ANTLR_UINT64_LIT(0x0000000014052010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_setex_cat605( FOLLOW_QUOTE_in_setex_cat605_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_IDU_in_setex_cat608_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000008) };
static  gEconParserImplTraits::BitsetListType FOLLOW_IDU_in_setex_cat608( FOLLOW_IDU_in_setex_cat608_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_DIDU_in_setex_cat615_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000008) };
static  gEconParserImplTraits::BitsetListType FOLLOW_DIDU_in_setex_cat615( FOLLOW_DIDU_in_setex_cat615_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_idx_str_in_setex_cat626_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000008) };
static  gEconParserImplTraits::BitsetListType FOLLOW_idx_str_in_setex_cat626( FOLLOW_idx_str_in_setex_cat626_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_setex_cat631_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000400000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_setex_cat631( FOLLOW_QUOTE_in_setex_cat631_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_TILDE_in_setex_cat633_bits[]	= { ANTLR_UINT64_LIT(0x40E342000000AC00), ANTLR_UINT64_LIT(0x0000000014052010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_TILDE_in_setex_cat633( FOLLOW_TILDE_in_setex_cat633_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_setex_atom_in_setex_cat641_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000400000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_setex_atom_in_setex_cat641( FOLLOW_setex_atom_in_setex_cat641_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_TILDE_in_setex_cat650_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000008) };
static  gEconParserImplTraits::BitsetListType FOLLOW_TILDE_in_setex_cat650( FOLLOW_TILDE_in_setex_cat650_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_setex_cat652_bits[]	= { ANTLR_UINT64_LIT(0x406172081000AC00), ANTLR_UINT64_LIT(0x0000000017052010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_setex_cat652( FOLLOW_QUOTE_in_setex_cat652_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_UID_in_setex_cat655_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000008) };
static  gEconParserImplTraits::BitsetListType FOLLOW_UID_in_setex_cat655( FOLLOW_UID_in_setex_cat655_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_UDID_in_setex_cat661_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000008) };
static  gEconParserImplTraits::BitsetListType FOLLOW_UDID_in_setex_cat661( FOLLOW_UDID_in_setex_cat661_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_idx_str_in_setex_cat671_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000008) };
static  gEconParserImplTraits::BitsetListType FOLLOW_idx_str_in_setex_cat671( FOLLOW_idx_str_in_setex_cat671_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_setex_cat676_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_setex_cat676( FOLLOW_QUOTE_in_setex_cat676_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_set_in_setex_atom705_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_set_in_setex_atom705( FOLLOW_set_in_setex_atom705_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LPAREN_in_setex_atom715_bits[]	= { ANTLR_UINT64_LIT(0x40E342000000AC00), ANTLR_UINT64_LIT(0x0000000014052018) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LPAREN_in_setex_atom715( FOLLOW_LPAREN_in_setex_atom715_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_setex_in_setex_atom721_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000200) };
static  gEconParserImplTraits::BitsetListType FOLLOW_setex_in_setex_atom721( FOLLOW_setex_in_setex_atom721_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_setex_atom723_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RPAREN_in_setex_atom723( FOLLOW_RPAREN_in_setex_atom723_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_ZERO_in_set751_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_ZERO_in_set751( FOLLOW_ZERO_in_set751_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_list_set_in_set763_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_list_set_in_set763( FOLLOW_list_set_in_set763_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_seq_set_in_set777_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_seq_set_in_set777( FOLLOW_seq_set_in_set777_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_id_str_in_set791_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_id_str_in_set791( FOLLOW_id_str_in_set791_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LBRACE_in_list_set814_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000008) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LBRACE_in_list_set814( FOLLOW_LBRACE_in_list_set814_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_list_set816_bits[]	= { ANTLR_UINT64_LIT(0x406172081000AC00), ANTLR_UINT64_LIT(0x0000000014052010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_list_set816( FOLLOW_QUOTE_in_list_set816_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_idx_str_in_list_set822_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000008) };
static  gEconParserImplTraits::BitsetListType FOLLOW_idx_str_in_list_set822( FOLLOW_idx_str_in_list_set822_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_list_set824_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_list_set824( FOLLOW_QUOTE_in_list_set824_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_list_set835_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000008) };
static  gEconParserImplTraits::BitsetListType FOLLOW_COMMA_in_list_set835( FOLLOW_COMMA_in_list_set835_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_list_set837_bits[]	= { ANTLR_UINT64_LIT(0x406172081000AC00), ANTLR_UINT64_LIT(0x0000000014052010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_list_set837( FOLLOW_QUOTE_in_list_set837_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_idx_str_in_list_set843_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000008) };
static  gEconParserImplTraits::BitsetListType FOLLOW_idx_str_in_list_set843( FOLLOW_idx_str_in_list_set843_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_list_set845_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_list_set845( FOLLOW_QUOTE_in_list_set845_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RBRACE_in_list_set851_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RBRACE_in_list_set851( FOLLOW_RBRACE_in_list_set851_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LBRACE_in_seq_set872_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000008) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LBRACE_in_seq_set872( FOLLOW_LBRACE_in_seq_set872_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_seq_set874_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000010000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_seq_set874( FOLLOW_QUOTE_in_seq_set874_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SLETTER_in_seq_set880_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000008) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SLETTER_in_seq_set880( FOLLOW_SLETTER_in_seq_set880_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_seq_set882_bits[]	= { ANTLR_UINT64_LIT(0x0000000001000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_seq_set882( FOLLOW_QUOTE_in_seq_set882_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_DDOT_in_seq_set884_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000008) };
static  gEconParserImplTraits::BitsetListType FOLLOW_DDOT_in_seq_set884( FOLLOW_DDOT_in_seq_set884_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_seq_set886_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000010000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_seq_set886( FOLLOW_QUOTE_in_seq_set886_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SLETTER_in_seq_set892_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000008) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SLETTER_in_seq_set892( FOLLOW_SLETTER_in_seq_set892_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_seq_set894_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_seq_set894( FOLLOW_QUOTE_in_seq_set894_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RBRACE_in_seq_set896_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RBRACE_in_seq_set896( FOLLOW_RBRACE_in_seq_set896_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LBRACE_in_seq_set906_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000008) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LBRACE_in_seq_set906( FOLLOW_LBRACE_in_seq_set906_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_seq_set908_bits[]	= { ANTLR_UINT64_LIT(0x0000000800008000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_seq_set908( FOLLOW_QUOTE_in_seq_set908_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_capletter_in_seq_set914_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000008) };
static  gEconParserImplTraits::BitsetListType FOLLOW_capletter_in_seq_set914( FOLLOW_capletter_in_seq_set914_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_seq_set916_bits[]	= { ANTLR_UINT64_LIT(0x0000000001000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_seq_set916( FOLLOW_QUOTE_in_seq_set916_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_DDOT_in_seq_set918_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000008) };
static  gEconParserImplTraits::BitsetListType FOLLOW_DDOT_in_seq_set918( FOLLOW_DDOT_in_seq_set918_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_seq_set920_bits[]	= { ANTLR_UINT64_LIT(0x0000000800008000), ANTLR_UINT64_LIT(0x0000000000000010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_seq_set920( FOLLOW_QUOTE_in_seq_set920_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_capletter_in_seq_set926_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000008) };
static  gEconParserImplTraits::BitsetListType FOLLOW_capletter_in_seq_set926( FOLLOW_capletter_in_seq_set926_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_seq_set928_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_seq_set928( FOLLOW_QUOTE_in_seq_set928_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RBRACE_in_seq_set930_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RBRACE_in_seq_set930( FOLLOW_RBRACE_in_seq_set930_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LBRACE_in_seq_set940_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000008) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LBRACE_in_seq_set940( FOLLOW_LBRACE_in_seq_set940_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_seq_set942_bits[]	= { ANTLR_UINT64_LIT(0x0000200000000000), ANTLR_UINT64_LIT(0x0000000010000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_seq_set942( FOLLOW_QUOTE_in_seq_set942_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_atom_int_in_seq_set948_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000008) };
static  gEconParserImplTraits::BitsetListType FOLLOW_atom_int_in_seq_set948( FOLLOW_atom_int_in_seq_set948_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_seq_set950_bits[]	= { ANTLR_UINT64_LIT(0x0000000001000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_seq_set950( FOLLOW_QUOTE_in_seq_set950_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_DDOT_in_seq_set952_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000008) };
static  gEconParserImplTraits::BitsetListType FOLLOW_DDOT_in_seq_set952( FOLLOW_DDOT_in_seq_set952_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_seq_set954_bits[]	= { ANTLR_UINT64_LIT(0x0000200000000000), ANTLR_UINT64_LIT(0x0000000010000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_seq_set954( FOLLOW_QUOTE_in_seq_set954_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_atom_int_in_seq_set960_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000008) };
static  gEconParserImplTraits::BitsetListType FOLLOW_atom_int_in_seq_set960( FOLLOW_atom_int_in_seq_set960_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_seq_set962_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_seq_set962( FOLLOW_QUOTE_in_seq_set962_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RBRACE_in_seq_set964_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RBRACE_in_seq_set964( FOLLOW_RBRACE_in_seq_set964_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_CLETTER_in_capletter992_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_CLETTER_in_capletter992( FOLLOW_CLETTER_in_capletter992_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_E_in_capletter1002_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_E_in_capletter1002( FOLLOW_E_in_capletter1002_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_R_in_capletter1012_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_R_in_capletter1012( FOLLOW_R_in_capletter1012_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_TRYREDUCE_in_tryreduce1032_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_TRYREDUCE_in_tryreduce1032( FOLLOW_TRYREDUCE_in_tryreduce1032_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LBRACE_in_tryreduce1034_bits[]	= { ANTLR_UINT64_LIT(0x4061C2000000AC00), ANTLR_UINT64_LIT(0x0000000004052010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LBRACE_in_tryreduce1034( FOLLOW_LBRACE_in_tryreduce1034_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_list_var_in_tryreduce1040_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  gEconParserImplTraits::BitsetListType FOLLOW_list_var_in_tryreduce1040( FOLLOW_list_var_in_tryreduce1040_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RBRACE_in_tryreduce1044_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000400) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RBRACE_in_tryreduce1044( FOLLOW_RBRACE_in_tryreduce1044_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_tryreduce1046_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_tryreduce1046( FOLLOW_SEMI_in_tryreduce1046_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_BLOCK_in_block1065_bits[]	= { ANTLR_UINT64_LIT(0x4061C2000000AC00), ANTLR_UINT64_LIT(0x0000000004052010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_BLOCK_in_block1065( FOLLOW_BLOCK_in_block1065_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_list_indexing_ex_in_block1071_bits[]	= { ANTLR_UINT64_LIT(0x406142000000AC00), ANTLR_UINT64_LIT(0x0000000004052010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_list_indexing_ex_in_block1071( FOLLOW_list_indexing_ex_in_block1071_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_id_str_in_block1083_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_id_str_in_block1083( FOLLOW_id_str_in_block1083_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LBRACE_in_block1093_bits[]	= { ANTLR_UINT64_LIT(0x0000040002100000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LBRACE_in_block1093( FOLLOW_LBRACE_in_block1093_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_block_definitions_in_block1103_bits[]	= { ANTLR_UINT64_LIT(0x0000040000100000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_block_definitions_in_block1103( FOLLOW_block_definitions_in_block1103_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_block_controls_in_block1115_bits[]	= { ANTLR_UINT64_LIT(0x0800000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_block_controls_in_block1115( FOLLOW_block_controls_in_block1115_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_block_objective_in_block1117_bits[]	= { ANTLR_UINT64_LIT(0x0000040000084000), ANTLR_UINT64_LIT(0x0000000000001080) };
static  gEconParserImplTraits::BitsetListType FOLLOW_block_objective_in_block1117( FOLLOW_block_objective_in_block1117_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_block_constraints_in_block1120_bits[]	= { ANTLR_UINT64_LIT(0x0000040000004000), ANTLR_UINT64_LIT(0x0000000000001080) };
static  gEconParserImplTraits::BitsetListType FOLLOW_block_constraints_in_block1120( FOLLOW_block_constraints_in_block1120_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_block_identities_in_block1125_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004000), ANTLR_UINT64_LIT(0x0000000000001080) };
static  gEconParserImplTraits::BitsetListType FOLLOW_block_identities_in_block1125( FOLLOW_block_identities_in_block1125_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_block_identities_in_block1139_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004000), ANTLR_UINT64_LIT(0x0000000000001080) };
static  gEconParserImplTraits::BitsetListType FOLLOW_block_identities_in_block1139( FOLLOW_block_identities_in_block1139_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_block_shocks_in_block1150_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  gEconParserImplTraits::BitsetListType FOLLOW_block_shocks_in_block1150( FOLLOW_block_shocks_in_block1150_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_block_calibr_in_block1161_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  gEconParserImplTraits::BitsetListType FOLLOW_block_calibr_in_block1161( FOLLOW_block_calibr_in_block1161_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RBRACE_in_block1170_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000400) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RBRACE_in_block1170( FOLLOW_RBRACE_in_block1170_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_block1172_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_block1172( FOLLOW_SEMI_in_block1172_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_DEFS_in_block_definitions1190_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_DEFS_in_block_definitions1190( FOLLOW_DEFS_in_block_definitions1190_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LBRACE_in_block_definitions1192_bits[]	= { ANTLR_UINT64_LIT(0x406142000000AC00), ANTLR_UINT64_LIT(0x0000000004052010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LBRACE_in_block_definitions1192( FOLLOW_LBRACE_in_block_definitions1192_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_definition_in_block_definitions1194_bits[]	= { ANTLR_UINT64_LIT(0x406142000000AC00), ANTLR_UINT64_LIT(0x0000000004052090) };
static  gEconParserImplTraits::BitsetListType FOLLOW_definition_in_block_definitions1194( FOLLOW_definition_in_block_definitions1194_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RBRACE_in_block_definitions1197_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000400) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RBRACE_in_block_definitions1197( FOLLOW_RBRACE_in_block_definitions1197_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_block_definitions1199_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_block_definitions1199( FOLLOW_SEMI_in_block_definitions1199_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_atom_id_t_in_definition1221_bits[]	= { ANTLR_UINT64_LIT(0x0000001000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_atom_id_t_in_definition1221( FOLLOW_atom_id_t_in_definition1221_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_EQ_in_definition1223_bits[]	= { ANTLR_UINT64_LIT(0x41F1628A0460AD50), ANTLR_UINT64_LIT(0x00000000143FE012) };
static  gEconParserImplTraits::BitsetListType FOLLOW_EQ_in_definition1223( FOLLOW_EQ_in_definition1223_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_definition1229_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000400) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_in_definition1229( FOLLOW_expr_in_definition1229_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_definition1231_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_definition1231( FOLLOW_SEMI_in_definition1231_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_atom_id_nt_in_definition1253_bits[]	= { ANTLR_UINT64_LIT(0x0000001000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_atom_id_nt_in_definition1253( FOLLOW_atom_id_nt_in_definition1253_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_EQ_in_definition1255_bits[]	= { ANTLR_UINT64_LIT(0x41F1628A0460AD50), ANTLR_UINT64_LIT(0x00000000143FE012) };
static  gEconParserImplTraits::BitsetListType FOLLOW_EQ_in_definition1255( FOLLOW_EQ_in_definition1255_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_definition1261_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000400) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_in_definition1261( FOLLOW_expr_in_definition1261_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_definition1263_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_definition1263( FOLLOW_SEMI_in_definition1263_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_CONTROLS_in_block_controls1290_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_CONTROLS_in_block_controls1290( FOLLOW_CONTROLS_in_block_controls1290_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LBRACE_in_block_controls1292_bits[]	= { ANTLR_UINT64_LIT(0x4061C2000000AC00), ANTLR_UINT64_LIT(0x0000000004052010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LBRACE_in_block_controls1292( FOLLOW_LBRACE_in_block_controls1292_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_list_ctr_var_in_block_controls1298_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  gEconParserImplTraits::BitsetListType FOLLOW_list_ctr_var_in_block_controls1298( FOLLOW_list_ctr_var_in_block_controls1298_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RBRACE_in_block_controls1302_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000400) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RBRACE_in_block_controls1302( FOLLOW_RBRACE_in_block_controls1302_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_block_controls1304_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_block_controls1304( FOLLOW_SEMI_in_block_controls1304_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_list_ctr_var_elem_in_list_ctr_var1336_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000), ANTLR_UINT64_LIT(0x0000000000000400) };
static  gEconParserImplTraits::BitsetListType FOLLOW_list_ctr_var_elem_in_list_ctr_var1336( FOLLOW_list_ctr_var_elem_in_list_ctr_var1336_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_list_ctr_var1349_bits[]	= { ANTLR_UINT64_LIT(0x4061C2000000AC00), ANTLR_UINT64_LIT(0x0000000004052010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_COMMA_in_list_ctr_var1349( FOLLOW_COMMA_in_list_ctr_var1349_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_list_ctr_var_elem_in_list_ctr_var1369_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000), ANTLR_UINT64_LIT(0x0000000000000400) };
static  gEconParserImplTraits::BitsetListType FOLLOW_list_ctr_var_elem_in_list_ctr_var1369( FOLLOW_list_ctr_var_elem_in_list_ctr_var1369_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_list_ctr_var1383_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_list_ctr_var1383( FOLLOW_SEMI_in_list_ctr_var1383_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_list_indexing_ex_in_list_ctr_var_elem1415_bits[]	= { ANTLR_UINT64_LIT(0x406142000000AC00), ANTLR_UINT64_LIT(0x0000000004052010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_list_indexing_ex_in_list_ctr_var_elem1415( FOLLOW_list_indexing_ex_in_list_ctr_var_elem1415_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_atom_id_t_in_list_ctr_var_elem1427_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000082) };
static  gEconParserImplTraits::BitsetListType FOLLOW_atom_id_t_in_list_ctr_var_elem1427( FOLLOW_atom_id_t_in_list_ctr_var_elem1427_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_AT_in_list_ctr_var_elem1430_bits[]	= { ANTLR_UINT64_LIT(0x406142000000AC00), ANTLR_UINT64_LIT(0x0000000004052010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_AT_in_list_ctr_var_elem1430( FOLLOW_AT_in_list_ctr_var_elem1430_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_id_str_in_list_ctr_var_elem1436_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_id_str_in_list_ctr_var_elem1436( FOLLOW_id_str_in_list_ctr_var_elem1436_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_OBJ_in_block_objective1458_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_OBJ_in_block_objective1458( FOLLOW_OBJ_in_block_objective1458_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LBRACE_in_block_objective1460_bits[]	= { ANTLR_UINT64_LIT(0x406142000000AC00), ANTLR_UINT64_LIT(0x0000000004052010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LBRACE_in_block_objective1460( FOLLOW_LBRACE_in_block_objective1460_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_objective_in_block_objective1462_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  gEconParserImplTraits::BitsetListType FOLLOW_objective_in_block_objective1462( FOLLOW_objective_in_block_objective1462_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RBRACE_in_block_objective1464_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000400) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RBRACE_in_block_objective1464( FOLLOW_RBRACE_in_block_objective1464_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_block_objective1466_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_block_objective1466( FOLLOW_SEMI_in_block_objective1466_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_atom_id_t_in_objective1488_bits[]	= { ANTLR_UINT64_LIT(0x0000001000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_atom_id_t_in_objective1488( FOLLOW_atom_id_t_in_objective1488_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_EQ_in_objective1490_bits[]	= { ANTLR_UINT64_LIT(0x41F1628A0460AD50), ANTLR_UINT64_LIT(0x00000000143FE012) };
static  gEconParserImplTraits::BitsetListType FOLLOW_EQ_in_objective1490( FOLLOW_EQ_in_objective1490_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_objective1496_bits[]	= { ANTLR_UINT64_LIT(0x0000000000010000), ANTLR_UINT64_LIT(0x0000000000000400) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_in_objective1496( FOLLOW_expr_in_objective1496_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_COLON_in_objective1499_bits[]	= { ANTLR_UINT64_LIT(0x406142000000AC00), ANTLR_UINT64_LIT(0x0000000004052010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_COLON_in_objective1499( FOLLOW_COLON_in_objective1499_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_atom_id_t_in_objective1505_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000400) };
static  gEconParserImplTraits::BitsetListType FOLLOW_atom_id_t_in_objective1505( FOLLOW_atom_id_t_in_objective1505_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_objective1509_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_objective1509( FOLLOW_SEMI_in_objective1509_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_CONSTRAINTS_in_block_constraints1537_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_CONSTRAINTS_in_block_constraints1537( FOLLOW_CONSTRAINTS_in_block_constraints1537_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LBRACE_in_block_constraints1539_bits[]	= { ANTLR_UINT64_LIT(0x49F1E78A0468AD50), ANTLR_UINT64_LIT(0x00000000143FE012) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LBRACE_in_block_constraints1539( FOLLOW_LBRACE_in_block_constraints1539_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_constraint_in_block_constraints1541_bits[]	= { ANTLR_UINT64_LIT(0x49F1E78A0468AD50), ANTLR_UINT64_LIT(0x00000000143FE092) };
static  gEconParserImplTraits::BitsetListType FOLLOW_constraint_in_block_constraints1541( FOLLOW_constraint_in_block_constraints1541_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RBRACE_in_block_constraints1544_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000400) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RBRACE_in_block_constraints1544( FOLLOW_RBRACE_in_block_constraints1544_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_block_constraints1546_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_block_constraints1546( FOLLOW_SEMI_in_block_constraints1546_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_list_indexing_ex_in_constraint1568_bits[]	= { ANTLR_UINT64_LIT(0x41F1628A0460AD50), ANTLR_UINT64_LIT(0x00000000143FE012) };
static  gEconParserImplTraits::BitsetListType FOLLOW_list_indexing_ex_in_constraint1568( FOLLOW_list_indexing_ex_in_constraint1568_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_constraint1580_bits[]	= { ANTLR_UINT64_LIT(0x0000001000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_in_constraint1580( FOLLOW_expr_in_constraint1580_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_EQ_in_constraint1582_bits[]	= { ANTLR_UINT64_LIT(0x41F1628A0460AD50), ANTLR_UINT64_LIT(0x00000000143FE012) };
static  gEconParserImplTraits::BitsetListType FOLLOW_EQ_in_constraint1582( FOLLOW_EQ_in_constraint1582_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_constraint1588_bits[]	= { ANTLR_UINT64_LIT(0x0000000000010000), ANTLR_UINT64_LIT(0x0000000000000400) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_in_constraint1588( FOLLOW_expr_in_constraint1588_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_COLON_in_constraint1591_bits[]	= { ANTLR_UINT64_LIT(0x406142000000AC00), ANTLR_UINT64_LIT(0x0000000004052010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_COLON_in_constraint1591( FOLLOW_COLON_in_constraint1591_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_atom_id_t_in_constraint1597_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000400) };
static  gEconParserImplTraits::BitsetListType FOLLOW_atom_id_t_in_constraint1597( FOLLOW_atom_id_t_in_constraint1597_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_constraint1601_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_constraint1601( FOLLOW_SEMI_in_constraint1601_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_list_ref_in_constraint1623_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000080) };
static  gEconParserImplTraits::BitsetListType FOLLOW_list_ref_in_constraint1623( FOLLOW_list_ref_in_constraint1623_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_AT_in_constraint1625_bits[]	= { ANTLR_UINT64_LIT(0x406142000000AC00), ANTLR_UINT64_LIT(0x0000000004052010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_AT_in_constraint1625( FOLLOW_AT_in_constraint1625_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_id_str_in_constraint1631_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000400) };
static  gEconParserImplTraits::BitsetListType FOLLOW_id_str_in_constraint1631( FOLLOW_id_str_in_constraint1631_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_constraint1633_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_constraint1633( FOLLOW_SEMI_in_constraint1633_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_ref_sec_in_list_ref1660_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_ref_sec_in_list_ref1660( FOLLOW_ref_sec_in_list_ref1660_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_list_ref1665_bits[]	= { ANTLR_UINT64_LIT(0x0800050000080000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_COMMA_in_list_ref1665( FOLLOW_COMMA_in_list_ref1665_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_ref_sec_in_list_ref1671_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_ref_sec_in_list_ref1671( FOLLOW_ref_sec_in_list_ref1671_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_OBJ_in_ref_sec1696_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_OBJ_in_ref_sec1696( FOLLOW_OBJ_in_ref_sec1696_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_CONSTRAINTS_in_ref_sec1706_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_CONSTRAINTS_in_ref_sec1706( FOLLOW_CONSTRAINTS_in_ref_sec1706_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_FOCS_in_ref_sec1716_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_FOCS_in_ref_sec1716( FOLLOW_FOCS_in_ref_sec1716_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_IDS_in_ref_sec1726_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_IDS_in_ref_sec1726( FOLLOW_IDS_in_ref_sec1726_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_IDS_in_block_identities1745_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_IDS_in_block_identities1745( FOLLOW_IDS_in_block_identities1745_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LBRACE_in_block_identities1747_bits[]	= { ANTLR_UINT64_LIT(0x41F1E28A0460AD50), ANTLR_UINT64_LIT(0x00000000143FE012) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LBRACE_in_block_identities1747( FOLLOW_LBRACE_in_block_identities1747_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_identity_in_block_identities1749_bits[]	= { ANTLR_UINT64_LIT(0x41F1E28A0460AD50), ANTLR_UINT64_LIT(0x00000000143FE092) };
static  gEconParserImplTraits::BitsetListType FOLLOW_identity_in_block_identities1749( FOLLOW_identity_in_block_identities1749_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RBRACE_in_block_identities1752_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000400) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RBRACE_in_block_identities1752( FOLLOW_RBRACE_in_block_identities1752_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_block_identities1754_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_block_identities1754( FOLLOW_SEMI_in_block_identities1754_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_list_indexing_ex_in_identity1776_bits[]	= { ANTLR_UINT64_LIT(0x41F1628A0460AD50), ANTLR_UINT64_LIT(0x00000000143FE012) };
static  gEconParserImplTraits::BitsetListType FOLLOW_list_indexing_ex_in_identity1776( FOLLOW_list_indexing_ex_in_identity1776_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_identity1788_bits[]	= { ANTLR_UINT64_LIT(0x0000001000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_in_identity1788( FOLLOW_expr_in_identity1788_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_EQ_in_identity1790_bits[]	= { ANTLR_UINT64_LIT(0x41F1628A0460AD50), ANTLR_UINT64_LIT(0x00000000143FE012) };
static  gEconParserImplTraits::BitsetListType FOLLOW_EQ_in_identity1790( FOLLOW_EQ_in_identity1790_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_identity1796_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000400) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_in_identity1796( FOLLOW_expr_in_identity1796_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_identity1798_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_identity1798( FOLLOW_SEMI_in_identity1798_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SHOCKS_in_block_shocks1823_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SHOCKS_in_block_shocks1823( FOLLOW_SHOCKS_in_block_shocks1823_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LBRACE_in_block_shocks1825_bits[]	= { ANTLR_UINT64_LIT(0x4061C2000000AC00), ANTLR_UINT64_LIT(0x0000000004052010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LBRACE_in_block_shocks1825( FOLLOW_LBRACE_in_block_shocks1825_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_shock_in_block_shocks1827_bits[]	= { ANTLR_UINT64_LIT(0x4061C2000000AC00), ANTLR_UINT64_LIT(0x0000000004052010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_shock_in_block_shocks1827( FOLLOW_shock_in_block_shocks1827_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_shock_in_block_shocks1829_bits[]	= { ANTLR_UINT64_LIT(0x4061C2000000AC00), ANTLR_UINT64_LIT(0x0000000004052090) };
static  gEconParserImplTraits::BitsetListType FOLLOW_shock_in_block_shocks1829( FOLLOW_shock_in_block_shocks1829_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RBRACE_in_block_shocks1834_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000400) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RBRACE_in_block_shocks1834( FOLLOW_RBRACE_in_block_shocks1834_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_block_shocks1836_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_block_shocks1836( FOLLOW_SEMI_in_block_shocks1836_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SHOCKS_in_block_shocks1845_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SHOCKS_in_block_shocks1845( FOLLOW_SHOCKS_in_block_shocks1845_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LBRACE_in_block_shocks1847_bits[]	= { ANTLR_UINT64_LIT(0x4061C2000000AC00), ANTLR_UINT64_LIT(0x0000000004052010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LBRACE_in_block_shocks1847( FOLLOW_LBRACE_in_block_shocks1847_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_list_var_in_block_shocks1853_bits[]	= { ANTLR_UINT64_LIT(0x4061C2000000AC00), ANTLR_UINT64_LIT(0x0000000004052090) };
static  gEconParserImplTraits::BitsetListType FOLLOW_list_var_in_block_shocks1853( FOLLOW_list_var_in_block_shocks1853_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_shock_in_block_shocks1856_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000080) };
static  gEconParserImplTraits::BitsetListType FOLLOW_shock_in_block_shocks1856( FOLLOW_shock_in_block_shocks1856_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RBRACE_in_block_shocks1863_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000400) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RBRACE_in_block_shocks1863( FOLLOW_RBRACE_in_block_shocks1863_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_block_shocks1865_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_block_shocks1865( FOLLOW_SEMI_in_block_shocks1865_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_list_indexing_ex_in_shock1889_bits[]	= { ANTLR_UINT64_LIT(0x406142000000AC00), ANTLR_UINT64_LIT(0x0000000004052010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_list_indexing_ex_in_shock1889( FOLLOW_list_indexing_ex_in_shock1889_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_atom_id_t_in_shock1901_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000400) };
static  gEconParserImplTraits::BitsetListType FOLLOW_atom_id_t_in_shock1901( FOLLOW_atom_id_t_in_shock1901_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_shock1903_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_shock1903( FOLLOW_SEMI_in_shock1903_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_CALIBR_in_block_calibr1922_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_CALIBR_in_block_calibr1922( FOLLOW_CALIBR_in_block_calibr1922_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LBRACE_in_block_calibr1924_bits[]	= { ANTLR_UINT64_LIT(0x41F1E28A0460AD50), ANTLR_UINT64_LIT(0x00000000143FE012) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LBRACE_in_block_calibr1924( FOLLOW_LBRACE_in_block_calibr1924_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_calibr_eq_in_block_calibr1926_bits[]	= { ANTLR_UINT64_LIT(0x41F1E28A0460AD50), ANTLR_UINT64_LIT(0x00000000143FE092) };
static  gEconParserImplTraits::BitsetListType FOLLOW_calibr_eq_in_block_calibr1926( FOLLOW_calibr_eq_in_block_calibr1926_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RBRACE_in_block_calibr1929_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000400) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RBRACE_in_block_calibr1929( FOLLOW_RBRACE_in_block_calibr1929_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_block_calibr1931_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_block_calibr1931( FOLLOW_SEMI_in_block_calibr1931_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_list_indexing_ex_in_calibr_eq1953_bits[]	= { ANTLR_UINT64_LIT(0x41F1628A0460AD50), ANTLR_UINT64_LIT(0x00000000143FE012) };
static  gEconParserImplTraits::BitsetListType FOLLOW_list_indexing_ex_in_calibr_eq1953( FOLLOW_list_indexing_ex_in_calibr_eq1953_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_calibr_eq1965_bits[]	= { ANTLR_UINT64_LIT(0x0000001000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_in_calibr_eq1965( FOLLOW_expr_in_calibr_eq1965_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_EQ_in_calibr_eq1967_bits[]	= { ANTLR_UINT64_LIT(0x41F1628A0460AD50), ANTLR_UINT64_LIT(0x00000000143FE012) };
static  gEconParserImplTraits::BitsetListType FOLLOW_EQ_in_calibr_eq1967( FOLLOW_EQ_in_calibr_eq1967_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_calibr_eq1973_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000440) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_in_calibr_eq1973( FOLLOW_expr_in_calibr_eq1973_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RARROW_in_calibr_eq1977_bits[]	= { ANTLR_UINT64_LIT(0x4061C2000000AC00), ANTLR_UINT64_LIT(0x0000000004052010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RARROW_in_calibr_eq1977( FOLLOW_RARROW_in_calibr_eq1977_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_list_par_in_calibr_eq1983_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_list_par_in_calibr_eq1983( FOLLOW_list_par_in_calibr_eq1983_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_calibr_eq1988_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_calibr_eq1988( FOLLOW_SEMI_in_calibr_eq1988_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_list_var_elem_in_list_var2025_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000), ANTLR_UINT64_LIT(0x0000000000000400) };
static  gEconParserImplTraits::BitsetListType FOLLOW_list_var_elem_in_list_var2025( FOLLOW_list_var_elem_in_list_var2025_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_list_var2038_bits[]	= { ANTLR_UINT64_LIT(0x4061C2000000AC00), ANTLR_UINT64_LIT(0x0000000004052010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_COMMA_in_list_var2038( FOLLOW_COMMA_in_list_var2038_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_list_var_elem_in_list_var2058_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000), ANTLR_UINT64_LIT(0x0000000000000400) };
static  gEconParserImplTraits::BitsetListType FOLLOW_list_var_elem_in_list_var2058( FOLLOW_list_var_elem_in_list_var2058_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_list_var2072_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_list_var2072( FOLLOW_SEMI_in_list_var2072_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_list_indexing_ex_in_list_var_elem2099_bits[]	= { ANTLR_UINT64_LIT(0x406142000000AC00), ANTLR_UINT64_LIT(0x0000000004052010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_list_indexing_ex_in_list_var_elem2099( FOLLOW_list_indexing_ex_in_list_var_elem2099_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_atom_id_t_in_list_var_elem2113_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_atom_id_t_in_list_var_elem2113( FOLLOW_atom_id_t_in_list_var_elem2113_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_list_par_elem_in_list_par2146_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000), ANTLR_UINT64_LIT(0x0000000000000400) };
static  gEconParserImplTraits::BitsetListType FOLLOW_list_par_elem_in_list_par2146( FOLLOW_list_par_elem_in_list_par2146_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_list_par2159_bits[]	= { ANTLR_UINT64_LIT(0x4061C2000000AC00), ANTLR_UINT64_LIT(0x0000000004052010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_COMMA_in_list_par2159( FOLLOW_COMMA_in_list_par2159_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_list_par_elem_in_list_par2179_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000), ANTLR_UINT64_LIT(0x0000000000000400) };
static  gEconParserImplTraits::BitsetListType FOLLOW_list_par_elem_in_list_par2179( FOLLOW_list_par_elem_in_list_par2179_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SEMI_in_list_par2193_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SEMI_in_list_par2193( FOLLOW_SEMI_in_list_par2193_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_list_indexing_ex_in_list_par_elem2220_bits[]	= { ANTLR_UINT64_LIT(0x406142000000AC00), ANTLR_UINT64_LIT(0x0000000004052010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_list_indexing_ex_in_list_par_elem2220( FOLLOW_list_indexing_ex_in_list_par_elem2220_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_atom_id_nt_in_list_par_elem2234_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_atom_id_nt_in_list_par_elem2234( FOLLOW_atom_id_nt_in_list_par_elem2234_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_add_in_expr2261_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_add_in_expr2261( FOLLOW_expr_add_in_expr2261_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_sum_in_expr_add2288_bits[]	= { ANTLR_UINT64_LIT(0x8100000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_sum_in_expr_add2288( FOLLOW_expr_sum_in_expr_add2288_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_PLUS_in_expr_add2310_bits[]	= { ANTLR_UINT64_LIT(0x41F1628A0460AD50), ANTLR_UINT64_LIT(0x00000000143FE012) };
static  gEconParserImplTraits::BitsetListType FOLLOW_PLUS_in_expr_add2310( FOLLOW_PLUS_in_expr_add2310_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_sum_in_expr_add2316_bits[]	= { ANTLR_UINT64_LIT(0x8100000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_sum_in_expr_add2316( FOLLOW_expr_sum_in_expr_add2316_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_MINUS_in_expr_add2339_bits[]	= { ANTLR_UINT64_LIT(0x41F1628A0460AD50), ANTLR_UINT64_LIT(0x00000000143FE012) };
static  gEconParserImplTraits::BitsetListType FOLLOW_MINUS_in_expr_add2339( FOLLOW_MINUS_in_expr_add2339_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_sum_in_expr_add2345_bits[]	= { ANTLR_UINT64_LIT(0x8100000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_sum_in_expr_add2345( FOLLOW_expr_sum_in_expr_add2345_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_mul_in_expr_sum2380_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_mul_in_expr_sum2380( FOLLOW_expr_mul_in_expr_sum2380_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_MINUS_in_expr_sum2391_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000080000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_MINUS_in_expr_sum2391( FOLLOW_MINUS_in_expr_sum2391_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SUM_in_expr_sum2398_bits[]	= { ANTLR_UINT64_LIT(0x0000800000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SUM_in_expr_sum2398( FOLLOW_SUM_in_expr_sum2398_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_indexing_ex_in_expr_sum2404_bits[]	= { ANTLR_UINT64_LIT(0x41F1628A0460AD50), ANTLR_UINT64_LIT(0x00000000143FE012) };
static  gEconParserImplTraits::BitsetListType FOLLOW_indexing_ex_in_expr_sum2404( FOLLOW_indexing_ex_in_expr_sum2404_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_sum_in_expr_sum2410_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_sum_in_expr_sum2410( FOLLOW_expr_sum_in_expr_sum2410_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_prod_in_expr_mul2437_bits[]	= { ANTLR_UINT64_LIT(0x0200000040000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_prod_in_expr_mul2437( FOLLOW_expr_prod_in_expr_mul2437_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_MUL_in_expr_mul2459_bits[]	= { ANTLR_UINT64_LIT(0x41F1628A0460AD50), ANTLR_UINT64_LIT(0x000000001437E012) };
static  gEconParserImplTraits::BitsetListType FOLLOW_MUL_in_expr_mul2459( FOLLOW_MUL_in_expr_mul2459_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_prod_in_expr_mul2465_bits[]	= { ANTLR_UINT64_LIT(0x0200000040000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_prod_in_expr_mul2465( FOLLOW_expr_prod_in_expr_mul2465_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_DIV_in_expr_mul2488_bits[]	= { ANTLR_UINT64_LIT(0x41F1628A0460AD50), ANTLR_UINT64_LIT(0x000000001437E012) };
static  gEconParserImplTraits::BitsetListType FOLLOW_DIV_in_expr_mul2488( FOLLOW_DIV_in_expr_mul2488_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_prod_in_expr_mul2494_bits[]	= { ANTLR_UINT64_LIT(0x0200000040000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_prod_in_expr_mul2494( FOLLOW_expr_prod_in_expr_mul2494_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_pow_in_expr_prod2529_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_pow_in_expr_prod2529( FOLLOW_expr_pow_in_expr_prod2529_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_MINUS_in_expr_prod2540_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_MINUS_in_expr_prod2540( FOLLOW_MINUS_in_expr_prod2540_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_PROD_in_expr_prod2547_bits[]	= { ANTLR_UINT64_LIT(0x0000800000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_PROD_in_expr_prod2547( FOLLOW_PROD_in_expr_prod2547_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_indexing_ex_in_expr_prod2553_bits[]	= { ANTLR_UINT64_LIT(0x41F1628A0460AD50), ANTLR_UINT64_LIT(0x000000001437E012) };
static  gEconParserImplTraits::BitsetListType FOLLOW_indexing_ex_in_expr_prod2553( FOLLOW_indexing_ex_in_expr_prod2553_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_prod_in_expr_prod2559_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_prod_in_expr_prod2559( FOLLOW_expr_prod_in_expr_prod2559_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_indexing_ex_in_list_indexing_ex2593_bits[]	= { ANTLR_UINT64_LIT(0x0000800000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_indexing_ex_in_list_indexing_ex2593( FOLLOW_indexing_ex_in_list_indexing_ex2593_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LANGBR_in_indexing_ex2632_bits[]	= { ANTLR_UINT64_LIT(0x406142000000AC00), ANTLR_UINT64_LIT(0x0000000004052010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LANGBR_in_indexing_ex2632( FOLLOW_LANGBR_in_indexing_ex2632_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_id_str_in_indexing_ex2638_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_id_str_in_indexing_ex2638( FOLLOW_id_str_in_indexing_ex2638_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_DBLCOLON_in_indexing_ex2640_bits[]	= { ANTLR_UINT64_LIT(0x406142000000AC00), ANTLR_UINT64_LIT(0x0000000004052010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_DBLCOLON_in_indexing_ex2640( FOLLOW_DBLCOLON_in_indexing_ex2640_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_id_str_in_indexing_ex2646_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000020) };
static  gEconParserImplTraits::BitsetListType FOLLOW_id_str_in_indexing_ex2646( FOLLOW_id_str_in_indexing_ex2646_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RANGBR_in_indexing_ex2648_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RANGBR_in_indexing_ex2648( FOLLOW_RANGBR_in_indexing_ex2648_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LANGBR_in_indexing_ex2658_bits[]	= { ANTLR_UINT64_LIT(0x406142000000AC00), ANTLR_UINT64_LIT(0x0000000004052010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LANGBR_in_indexing_ex2658( FOLLOW_LANGBR_in_indexing_ex2658_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_id_str_in_indexing_ex2664_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_id_str_in_indexing_ex2664( FOLLOW_id_str_in_indexing_ex2664_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_DBLCOLON_in_indexing_ex2666_bits[]	= { ANTLR_UINT64_LIT(0x406142000000AC00), ANTLR_UINT64_LIT(0x0000000004052010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_DBLCOLON_in_indexing_ex2666( FOLLOW_DBLCOLON_in_indexing_ex2666_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_id_str_in_indexing_ex2672_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000200) };
static  gEconParserImplTraits::BitsetListType FOLLOW_id_str_in_indexing_ex2672( FOLLOW_id_str_in_indexing_ex2672_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_BACKSLASH_in_indexing_ex2674_bits[]	= { ANTLR_UINT64_LIT(0x406142000000AC00), ANTLR_UINT64_LIT(0x0000000004052010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_BACKSLASH_in_indexing_ex2674( FOLLOW_BACKSLASH_in_indexing_ex2674_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_id_str_in_indexing_ex2680_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000020) };
static  gEconParserImplTraits::BitsetListType FOLLOW_id_str_in_indexing_ex2680( FOLLOW_id_str_in_indexing_ex2680_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RANGBR_in_indexing_ex2682_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RANGBR_in_indexing_ex2682( FOLLOW_RANGBR_in_indexing_ex2682_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LANGBR_in_indexing_ex2692_bits[]	= { ANTLR_UINT64_LIT(0x406142000000AC00), ANTLR_UINT64_LIT(0x0000000004052010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LANGBR_in_indexing_ex2692( FOLLOW_LANGBR_in_indexing_ex2692_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_id_str_in_indexing_ex2698_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_id_str_in_indexing_ex2698( FOLLOW_id_str_in_indexing_ex2698_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_DBLCOLON_in_indexing_ex2700_bits[]	= { ANTLR_UINT64_LIT(0x406142000000AC00), ANTLR_UINT64_LIT(0x0000000004052010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_DBLCOLON_in_indexing_ex2700( FOLLOW_DBLCOLON_in_indexing_ex2700_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_id_str_in_indexing_ex2706_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000200) };
static  gEconParserImplTraits::BitsetListType FOLLOW_id_str_in_indexing_ex2706( FOLLOW_id_str_in_indexing_ex2706_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_BACKSLASH_in_indexing_ex2708_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000008) };
static  gEconParserImplTraits::BitsetListType FOLLOW_BACKSLASH_in_indexing_ex2708( FOLLOW_BACKSLASH_in_indexing_ex2708_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_indexing_ex2710_bits[]	= { ANTLR_UINT64_LIT(0x406172081000AC00), ANTLR_UINT64_LIT(0x0000000014052010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_indexing_ex2710( FOLLOW_QUOTE_in_indexing_ex2710_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_idx_str_in_indexing_ex2716_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000008) };
static  gEconParserImplTraits::BitsetListType FOLLOW_idx_str_in_indexing_ex2716( FOLLOW_idx_str_in_indexing_ex2716_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_indexing_ex2718_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000020) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_indexing_ex2718( FOLLOW_QUOTE_in_indexing_ex2718_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RANGBR_in_indexing_ex2720_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RANGBR_in_indexing_ex2720( FOLLOW_RANGBR_in_indexing_ex2720_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_MINUS_in_expr_pow2749_bits[]	= { ANTLR_UINT64_LIT(0x40F1628A0460AD50), ANTLR_UINT64_LIT(0x000000001437E010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_MINUS_in_expr_pow2749( FOLLOW_MINUS_in_expr_pow2749_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_atom_in_expr_pow2767_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000001) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_atom_in_expr_pow2767( FOLLOW_expr_atom_in_expr_pow2767_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_POW_in_expr_pow2780_bits[]	= { ANTLR_UINT64_LIT(0x41F1628A0460AD50), ANTLR_UINT64_LIT(0x000000001437E010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_POW_in_expr_pow2780( FOLLOW_POW_in_expr_pow2780_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_MINUS_in_expr_pow2785_bits[]	= { ANTLR_UINT64_LIT(0x40F1628A0460AD50), ANTLR_UINT64_LIT(0x000000001437E010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_MINUS_in_expr_pow2785( FOLLOW_MINUS_in_expr_pow2785_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_atom_in_expr_pow2795_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000001) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_atom_in_expr_pow2795( FOLLOW_expr_atom_in_expr_pow2795_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_atom_num_in_expr_atom2843_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_atom_num_in_expr_atom2843( FOLLOW_atom_num_in_expr_atom2843_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_atom_id_in_expr_atom2857_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_atom_id_in_expr_atom2857( FOLLOW_atom_id_in_expr_atom2857_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_atom_delta_in_expr_atom2871_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_atom_delta_in_expr_atom2871( FOLLOW_atom_delta_in_expr_atom2871_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_func_in_expr_atom2885_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_func_in_expr_atom2885( FOLLOW_expr_func_in_expr_atom2885_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_e_in_expr_atom2899_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_e_in_expr_atom2899( FOLLOW_expr_e_in_expr_atom2899_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LPAREN_in_expr_atom2909_bits[]	= { ANTLR_UINT64_LIT(0x41F1628A0460AD50), ANTLR_UINT64_LIT(0x00000000143FE012) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LPAREN_in_expr_atom2909( FOLLOW_LPAREN_in_expr_atom2909_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_expr_atom2916_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000200) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_in_expr_atom2916( FOLLOW_expr_in_expr_atom2916_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_expr_atom2921_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RPAREN_in_expr_atom2921( FOLLOW_RPAREN_in_expr_atom2921_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SQRT_in_expr_func2942_bits[]	= { ANTLR_UINT64_LIT(0x0080000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SQRT_in_expr_func2942( FOLLOW_SQRT_in_expr_func2942_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LPAREN_in_expr_func2944_bits[]	= { ANTLR_UINT64_LIT(0x41F1628A0460AD50), ANTLR_UINT64_LIT(0x00000000143FE012) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LPAREN_in_expr_func2944( FOLLOW_LPAREN_in_expr_func2944_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_expr_func2950_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000200) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_in_expr_func2950( FOLLOW_expr_in_expr_func2950_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_expr_func2952_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RPAREN_in_expr_func2952( FOLLOW_RPAREN_in_expr_func2952_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_EXP_in_expr_func2962_bits[]	= { ANTLR_UINT64_LIT(0x0080000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_EXP_in_expr_func2962( FOLLOW_EXP_in_expr_func2962_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LPAREN_in_expr_func2964_bits[]	= { ANTLR_UINT64_LIT(0x41F1628A0460AD50), ANTLR_UINT64_LIT(0x00000000143FE012) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LPAREN_in_expr_func2964( FOLLOW_LPAREN_in_expr_func2964_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_expr_func2970_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000200) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_in_expr_func2970( FOLLOW_expr_in_expr_func2970_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_expr_func2972_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RPAREN_in_expr_func2972( FOLLOW_RPAREN_in_expr_func2972_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LOG_in_expr_func2982_bits[]	= { ANTLR_UINT64_LIT(0x0080000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LOG_in_expr_func2982( FOLLOW_LOG_in_expr_func2982_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LPAREN_in_expr_func2984_bits[]	= { ANTLR_UINT64_LIT(0x41F1628A0460AD50), ANTLR_UINT64_LIT(0x00000000143FE012) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LPAREN_in_expr_func2984( FOLLOW_LPAREN_in_expr_func2984_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_expr_func2990_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000200) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_in_expr_func2990( FOLLOW_expr_in_expr_func2990_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_expr_func2992_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RPAREN_in_expr_func2992( FOLLOW_RPAREN_in_expr_func2992_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SIN_in_expr_func3002_bits[]	= { ANTLR_UINT64_LIT(0x0080000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SIN_in_expr_func3002( FOLLOW_SIN_in_expr_func3002_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LPAREN_in_expr_func3004_bits[]	= { ANTLR_UINT64_LIT(0x41F1628A0460AD50), ANTLR_UINT64_LIT(0x00000000143FE012) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LPAREN_in_expr_func3004( FOLLOW_LPAREN_in_expr_func3004_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_expr_func3010_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000200) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_in_expr_func3010( FOLLOW_expr_in_expr_func3010_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_expr_func3012_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RPAREN_in_expr_func3012( FOLLOW_RPAREN_in_expr_func3012_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_COS_in_expr_func3022_bits[]	= { ANTLR_UINT64_LIT(0x0080000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_COS_in_expr_func3022( FOLLOW_COS_in_expr_func3022_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LPAREN_in_expr_func3024_bits[]	= { ANTLR_UINT64_LIT(0x41F1628A0460AD50), ANTLR_UINT64_LIT(0x00000000143FE012) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LPAREN_in_expr_func3024( FOLLOW_LPAREN_in_expr_func3024_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_expr_func3030_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000200) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_in_expr_func3030( FOLLOW_expr_in_expr_func3030_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_expr_func3032_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RPAREN_in_expr_func3032( FOLLOW_RPAREN_in_expr_func3032_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_TAN_in_expr_func3042_bits[]	= { ANTLR_UINT64_LIT(0x0080000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_TAN_in_expr_func3042( FOLLOW_TAN_in_expr_func3042_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LPAREN_in_expr_func3044_bits[]	= { ANTLR_UINT64_LIT(0x41F1628A0460AD50), ANTLR_UINT64_LIT(0x00000000143FE012) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LPAREN_in_expr_func3044( FOLLOW_LPAREN_in_expr_func3044_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_expr_func3050_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000200) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_in_expr_func3050( FOLLOW_expr_in_expr_func3050_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_expr_func3052_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RPAREN_in_expr_func3052( FOLLOW_RPAREN_in_expr_func3052_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_ASIN_in_expr_func3062_bits[]	= { ANTLR_UINT64_LIT(0x0080000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_ASIN_in_expr_func3062( FOLLOW_ASIN_in_expr_func3062_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LPAREN_in_expr_func3064_bits[]	= { ANTLR_UINT64_LIT(0x41F1628A0460AD50), ANTLR_UINT64_LIT(0x00000000143FE012) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LPAREN_in_expr_func3064( FOLLOW_LPAREN_in_expr_func3064_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_expr_func3070_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000200) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_in_expr_func3070( FOLLOW_expr_in_expr_func3070_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_expr_func3072_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RPAREN_in_expr_func3072( FOLLOW_RPAREN_in_expr_func3072_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_ACOS_in_expr_func3082_bits[]	= { ANTLR_UINT64_LIT(0x0080000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_ACOS_in_expr_func3082( FOLLOW_ACOS_in_expr_func3082_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LPAREN_in_expr_func3084_bits[]	= { ANTLR_UINT64_LIT(0x41F1628A0460AD50), ANTLR_UINT64_LIT(0x00000000143FE012) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LPAREN_in_expr_func3084( FOLLOW_LPAREN_in_expr_func3084_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_expr_func3090_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000200) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_in_expr_func3090( FOLLOW_expr_in_expr_func3090_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_expr_func3092_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RPAREN_in_expr_func3092( FOLLOW_RPAREN_in_expr_func3092_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_ATAN_in_expr_func3102_bits[]	= { ANTLR_UINT64_LIT(0x0080000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_ATAN_in_expr_func3102( FOLLOW_ATAN_in_expr_func3102_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LPAREN_in_expr_func3104_bits[]	= { ANTLR_UINT64_LIT(0x41F1628A0460AD50), ANTLR_UINT64_LIT(0x00000000143FE012) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LPAREN_in_expr_func3104( FOLLOW_LPAREN_in_expr_func3104_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_expr_func3110_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000200) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_in_expr_func3110( FOLLOW_expr_in_expr_func3110_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_expr_func3112_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RPAREN_in_expr_func3112( FOLLOW_RPAREN_in_expr_func3112_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SINH_in_expr_func3122_bits[]	= { ANTLR_UINT64_LIT(0x0080000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SINH_in_expr_func3122( FOLLOW_SINH_in_expr_func3122_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LPAREN_in_expr_func3124_bits[]	= { ANTLR_UINT64_LIT(0x41F1628A0460AD50), ANTLR_UINT64_LIT(0x00000000143FE012) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LPAREN_in_expr_func3124( FOLLOW_LPAREN_in_expr_func3124_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_expr_func3130_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000200) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_in_expr_func3130( FOLLOW_expr_in_expr_func3130_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_expr_func3132_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RPAREN_in_expr_func3132( FOLLOW_RPAREN_in_expr_func3132_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_COSH_in_expr_func3142_bits[]	= { ANTLR_UINT64_LIT(0x0080000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_COSH_in_expr_func3142( FOLLOW_COSH_in_expr_func3142_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LPAREN_in_expr_func3144_bits[]	= { ANTLR_UINT64_LIT(0x41F1628A0460AD50), ANTLR_UINT64_LIT(0x00000000143FE012) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LPAREN_in_expr_func3144( FOLLOW_LPAREN_in_expr_func3144_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_expr_func3150_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000200) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_in_expr_func3150( FOLLOW_expr_in_expr_func3150_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_expr_func3152_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RPAREN_in_expr_func3152( FOLLOW_RPAREN_in_expr_func3152_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_TANH_in_expr_func3162_bits[]	= { ANTLR_UINT64_LIT(0x0080000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_TANH_in_expr_func3162( FOLLOW_TANH_in_expr_func3162_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LPAREN_in_expr_func3164_bits[]	= { ANTLR_UINT64_LIT(0x41F1628A0460AD50), ANTLR_UINT64_LIT(0x00000000143FE012) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LPAREN_in_expr_func3164( FOLLOW_LPAREN_in_expr_func3164_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_expr_func3170_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000200) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_in_expr_func3170( FOLLOW_expr_in_expr_func3170_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RPAREN_in_expr_func3172_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RPAREN_in_expr_func3172( FOLLOW_RPAREN_in_expr_func3172_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_E_in_expr_e3196_bits[]	= { ANTLR_UINT64_LIT(0x0004000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_E_in_expr_e3196( FOLLOW_E_in_expr_e3196_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LBRACK_in_expr_e3198_bits[]	= { ANTLR_UINT64_LIT(0x8100200000000000), ANTLR_UINT64_LIT(0x0000000010040100) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LBRACK_in_expr_e3198( FOLLOW_LBRACK_in_expr_e3198_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_time_idx_in_expr_e3204_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000100) };
static  gEconParserImplTraits::BitsetListType FOLLOW_time_idx_in_expr_e3204( FOLLOW_time_idx_in_expr_e3204_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RBRACK_in_expr_e3206_bits[]	= { ANTLR_UINT64_LIT(0x0004000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RBRACK_in_expr_e3206( FOLLOW_RBRACK_in_expr_e3206_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LBRACK_in_expr_e3208_bits[]	= { ANTLR_UINT64_LIT(0x41F1628A0460AD50), ANTLR_UINT64_LIT(0x00000000143FE012) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LBRACK_in_expr_e3208( FOLLOW_LBRACK_in_expr_e3208_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_expr_e3214_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000100) };
static  gEconParserImplTraits::BitsetListType FOLLOW_expr_in_expr_e3214( FOLLOW_expr_in_expr_e3214_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RBRACK_in_expr_e3216_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RBRACK_in_expr_e3216( FOLLOW_RBRACK_in_expr_e3216_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_DELTA_in_atom_delta3239_bits[]	= { ANTLR_UINT64_LIT(0x0000800000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_DELTA_in_atom_delta3239( FOLLOW_DELTA_in_atom_delta3239_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LANGBR_in_atom_delta3241_bits[]	= { ANTLR_UINT64_LIT(0x406142000000AC00), ANTLR_UINT64_LIT(0x0000000004052010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LANGBR_in_atom_delta3241( FOLLOW_LANGBR_in_atom_delta3241_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_id_str_in_atom_delta3247_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_id_str_in_atom_delta3247( FOLLOW_id_str_in_atom_delta3247_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_atom_delta3249_bits[]	= { ANTLR_UINT64_LIT(0x406142000000AC00), ANTLR_UINT64_LIT(0x0000000004052010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_COMMA_in_atom_delta3249( FOLLOW_COMMA_in_atom_delta3249_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_id_str_in_atom_delta3255_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000020) };
static  gEconParserImplTraits::BitsetListType FOLLOW_id_str_in_atom_delta3255( FOLLOW_id_str_in_atom_delta3255_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RANGBR_in_atom_delta3257_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RANGBR_in_atom_delta3257( FOLLOW_RANGBR_in_atom_delta3257_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_DELTA_in_atom_delta3267_bits[]	= { ANTLR_UINT64_LIT(0x0000800000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_DELTA_in_atom_delta3267( FOLLOW_DELTA_in_atom_delta3267_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LANGBR_in_atom_delta3269_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000008) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LANGBR_in_atom_delta3269( FOLLOW_LANGBR_in_atom_delta3269_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_atom_delta3271_bits[]	= { ANTLR_UINT64_LIT(0x406172081000AC00), ANTLR_UINT64_LIT(0x0000000014052010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_atom_delta3271( FOLLOW_QUOTE_in_atom_delta3271_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_idx_str_in_atom_delta3277_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000008) };
static  gEconParserImplTraits::BitsetListType FOLLOW_idx_str_in_atom_delta3277( FOLLOW_idx_str_in_atom_delta3277_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_atom_delta3279_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_atom_delta3279( FOLLOW_QUOTE_in_atom_delta3279_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_atom_delta3281_bits[]	= { ANTLR_UINT64_LIT(0x406172081000AC00), ANTLR_UINT64_LIT(0x0000000014052010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_COMMA_in_atom_delta3281( FOLLOW_COMMA_in_atom_delta3281_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_idx_str_in_atom_delta3287_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000020) };
static  gEconParserImplTraits::BitsetListType FOLLOW_idx_str_in_atom_delta3287( FOLLOW_idx_str_in_atom_delta3287_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RANGBR_in_atom_delta3289_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RANGBR_in_atom_delta3289( FOLLOW_RANGBR_in_atom_delta3289_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_DELTA_in_atom_delta3299_bits[]	= { ANTLR_UINT64_LIT(0x0000800000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_DELTA_in_atom_delta3299( FOLLOW_DELTA_in_atom_delta3299_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LANGBR_in_atom_delta3301_bits[]	= { ANTLR_UINT64_LIT(0x406142000000AC00), ANTLR_UINT64_LIT(0x0000000004052010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LANGBR_in_atom_delta3301( FOLLOW_LANGBR_in_atom_delta3301_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_id_str_in_atom_delta3307_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_id_str_in_atom_delta3307( FOLLOW_id_str_in_atom_delta3307_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_atom_delta3309_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000008) };
static  gEconParserImplTraits::BitsetListType FOLLOW_COMMA_in_atom_delta3309( FOLLOW_COMMA_in_atom_delta3309_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_atom_delta3311_bits[]	= { ANTLR_UINT64_LIT(0x406172081000AC00), ANTLR_UINT64_LIT(0x0000000014052010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_atom_delta3311( FOLLOW_QUOTE_in_atom_delta3311_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_idx_str_in_atom_delta3317_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000008) };
static  gEconParserImplTraits::BitsetListType FOLLOW_idx_str_in_atom_delta3317( FOLLOW_idx_str_in_atom_delta3317_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_atom_delta3319_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000020) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_atom_delta3319( FOLLOW_QUOTE_in_atom_delta3319_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RANGBR_in_atom_delta3321_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RANGBR_in_atom_delta3321( FOLLOW_RANGBR_in_atom_delta3321_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_DELTA_in_atom_delta3331_bits[]	= { ANTLR_UINT64_LIT(0x0000800000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_DELTA_in_atom_delta3331( FOLLOW_DELTA_in_atom_delta3331_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LANGBR_in_atom_delta3333_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000008) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LANGBR_in_atom_delta3333( FOLLOW_LANGBR_in_atom_delta3333_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_atom_delta3335_bits[]	= { ANTLR_UINT64_LIT(0x406172081000AC00), ANTLR_UINT64_LIT(0x0000000014052010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_atom_delta3335( FOLLOW_QUOTE_in_atom_delta3335_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_idx_str_in_atom_delta3341_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000008) };
static  gEconParserImplTraits::BitsetListType FOLLOW_idx_str_in_atom_delta3341( FOLLOW_idx_str_in_atom_delta3341_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_atom_delta3343_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_atom_delta3343( FOLLOW_QUOTE_in_atom_delta3343_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_atom_delta3345_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000008) };
static  gEconParserImplTraits::BitsetListType FOLLOW_COMMA_in_atom_delta3345( FOLLOW_COMMA_in_atom_delta3345_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_atom_delta3347_bits[]	= { ANTLR_UINT64_LIT(0x406172081000AC00), ANTLR_UINT64_LIT(0x0000000014052010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_atom_delta3347( FOLLOW_QUOTE_in_atom_delta3347_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_idx_str_in_atom_delta3353_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000008) };
static  gEconParserImplTraits::BitsetListType FOLLOW_idx_str_in_atom_delta3353( FOLLOW_idx_str_in_atom_delta3353_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_atom_delta3355_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000020) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_atom_delta3355( FOLLOW_QUOTE_in_atom_delta3355_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RANGBR_in_atom_delta3357_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RANGBR_in_atom_delta3357( FOLLOW_RANGBR_in_atom_delta3357_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_atom_id_nt_in_atom_id3384_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_atom_id_nt_in_atom_id3384( FOLLOW_atom_id_nt_in_atom_id3384_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_atom_id_t_in_atom_id3398_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_atom_id_t_in_atom_id3398( FOLLOW_atom_id_t_in_atom_id3398_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_id_str_in_atom_id_t3425_bits[]	= { ANTLR_UINT64_LIT(0x0004000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_id_str_in_atom_id_t3425( FOLLOW_id_str_in_atom_id_t3425_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LBRACK_in_atom_id_t3427_bits[]	= { ANTLR_UINT64_LIT(0x8100200000000000), ANTLR_UINT64_LIT(0x0000000010040100) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LBRACK_in_atom_id_t3427( FOLLOW_LBRACK_in_atom_id_t3427_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_time_idx_in_atom_id_t3433_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000100) };
static  gEconParserImplTraits::BitsetListType FOLLOW_time_idx_in_atom_id_t3433( FOLLOW_time_idx_in_atom_id_t3433_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RBRACK_in_atom_id_t3435_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RBRACK_in_atom_id_t3435( FOLLOW_RBRACK_in_atom_id_t3435_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_id_str_in_atom_id_t3449_bits[]	= { ANTLR_UINT64_LIT(0x0000800000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_id_str_in_atom_id_t3449( FOLLOW_id_str_in_atom_id_t3449_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_list_idx_in_atom_id_t3455_bits[]	= { ANTLR_UINT64_LIT(0x0004000000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_list_idx_in_atom_id_t3455( FOLLOW_list_idx_in_atom_id_t3455_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LBRACK_in_atom_id_t3457_bits[]	= { ANTLR_UINT64_LIT(0x8100200000000000), ANTLR_UINT64_LIT(0x0000000010040100) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LBRACK_in_atom_id_t3457( FOLLOW_LBRACK_in_atom_id_t3457_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_time_idx_in_atom_id_t3463_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000100) };
static  gEconParserImplTraits::BitsetListType FOLLOW_time_idx_in_atom_id_t3463( FOLLOW_time_idx_in_atom_id_t3463_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RBRACK_in_atom_id_t3465_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RBRACK_in_atom_id_t3465( FOLLOW_RBRACK_in_atom_id_t3465_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_atom_int_in_time_idx3503_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_atom_int_in_time_idx3503( FOLLOW_atom_int_in_time_idx3503_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_PLUS_in_time_idx3513_bits[]	= { ANTLR_UINT64_LIT(0x0000200000000000), ANTLR_UINT64_LIT(0x0000000010000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_PLUS_in_time_idx3513( FOLLOW_PLUS_in_time_idx3513_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_atom_int_in_time_idx3519_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_atom_int_in_time_idx3519( FOLLOW_atom_int_in_time_idx3519_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_MINUS_in_time_idx3529_bits[]	= { ANTLR_UINT64_LIT(0x0000200000000000), ANTLR_UINT64_LIT(0x0000000010000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_MINUS_in_time_idx3529( FOLLOW_MINUS_in_time_idx3529_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_atom_int_in_time_idx3535_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_atom_int_in_time_idx3535( FOLLOW_atom_int_in_time_idx3535_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SS_in_time_idx3545_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SS_in_time_idx3545( FOLLOW_SS_in_time_idx3545_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_MINUS_in_time_idx3555_bits[]	= { ANTLR_UINT64_LIT(0x0000100000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_MINUS_in_time_idx3555( FOLLOW_MINUS_in_time_idx3555_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_INF_in_time_idx3557_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_INF_in_time_idx3557( FOLLOW_INF_in_time_idx3557_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_id_str_in_atom_id_nt3584_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_id_str_in_atom_id_nt3584( FOLLOW_id_str_in_atom_id_nt3584_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_id_str_in_atom_id_nt3598_bits[]	= { ANTLR_UINT64_LIT(0x0000800000000000) };
static  gEconParserImplTraits::BitsetListType FOLLOW_id_str_in_atom_id_nt3598( FOLLOW_id_str_in_atom_id_nt3598_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_list_idx_in_atom_id_nt3604_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_list_idx_in_atom_id_nt3604( FOLLOW_list_idx_in_atom_id_nt3604_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LANGBR_in_list_idx3632_bits[]	= { ANTLR_UINT64_LIT(0x406172081000AC00), ANTLR_UINT64_LIT(0x0000000014052018) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LANGBR_in_list_idx3632( FOLLOW_LANGBR_in_list_idx3632_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_idx_str_in_list_idx3648_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000), ANTLR_UINT64_LIT(0x0000000000000020) };
static  gEconParserImplTraits::BitsetListType FOLLOW_idx_str_in_list_idx3648( FOLLOW_idx_str_in_list_idx3648_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_list_idx3656_bits[]	= { ANTLR_UINT64_LIT(0x406172081000AC00), ANTLR_UINT64_LIT(0x0000000014052010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_list_idx3656( FOLLOW_QUOTE_in_list_idx3656_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_idx_str_in_list_idx3662_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000008) };
static  gEconParserImplTraits::BitsetListType FOLLOW_idx_str_in_list_idx3662( FOLLOW_idx_str_in_list_idx3662_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_list_idx3664_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000), ANTLR_UINT64_LIT(0x0000000000000020) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_list_idx3664( FOLLOW_QUOTE_in_list_idx3664_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_list_idx3679_bits[]	= { ANTLR_UINT64_LIT(0x406172081000AC00), ANTLR_UINT64_LIT(0x0000000014052018) };
static  gEconParserImplTraits::BitsetListType FOLLOW_COMMA_in_list_idx3679( FOLLOW_COMMA_in_list_idx3679_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_idx_str_in_list_idx3687_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000), ANTLR_UINT64_LIT(0x0000000000000020) };
static  gEconParserImplTraits::BitsetListType FOLLOW_idx_str_in_list_idx3687( FOLLOW_idx_str_in_list_idx3687_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_list_idx3695_bits[]	= { ANTLR_UINT64_LIT(0x406172081000AC00), ANTLR_UINT64_LIT(0x0000000014052010) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_list_idx3695( FOLLOW_QUOTE_in_list_idx3695_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_idx_str_in_list_idx3701_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000008) };
static  gEconParserImplTraits::BitsetListType FOLLOW_idx_str_in_list_idx3701( FOLLOW_idx_str_in_list_idx3701_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_QUOTE_in_list_idx3703_bits[]	= { ANTLR_UINT64_LIT(0x0000000000020000), ANTLR_UINT64_LIT(0x0000000000000020) };
static  gEconParserImplTraits::BitsetListType FOLLOW_QUOTE_in_list_idx3703( FOLLOW_QUOTE_in_list_idx3703_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_RANGBR_in_list_idx3714_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_RANGBR_in_list_idx3714( FOLLOW_RANGBR_in_list_idx3714_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_id_str_in_idx_str3739_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_id_str_in_idx_str3739( FOLLOW_id_str_in_idx_str3739_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_E_in_idx_str3749_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_E_in_idx_str3749( FOLLOW_E_in_idx_str3749_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_INF_in_idx_str3759_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_INF_in_idx_str3759( FOLLOW_INF_in_idx_str3759_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_ZERO_in_idx_str3769_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_ZERO_in_idx_str3769( FOLLOW_ZERO_in_idx_str3769_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_INT_in_idx_str3779_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_INT_in_idx_str3779( FOLLOW_INT_in_idx_str3779_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_DID_in_idx_str3789_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_DID_in_idx_str3789( FOLLOW_DID_in_idx_str3789_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_id_str3812_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_ID_in_id_str3812( FOLLOW_ID_in_id_str3812_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SLETTER_in_id_str3822_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SLETTER_in_id_str3822( FOLLOW_SLETTER_in_id_str3822_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_CLETTER_in_id_str3832_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_CLETTER_in_id_str3832( FOLLOW_CLETTER_in_id_str3832_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_OUTPUT_in_id_str3842_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_OUTPUT_in_id_str3842( FOLLOW_OUTPUT_in_id_str3842_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_R_in_id_str3852_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_R_in_id_str3852( FOLLOW_R_in_id_str3852_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LATEX_in_id_str3862_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LATEX_in_id_str3862( FOLLOW_LATEX_in_id_str3862_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LANDSCAPE_in_id_str3872_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LANDSCAPE_in_id_str3872( FOLLOW_LANDSCAPE_in_id_str3872_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LOGF_in_id_str3882_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LOGF_in_id_str3882( FOLLOW_LOGF_in_id_str3882_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_LONG_in_id_str3892_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_LONG_in_id_str3892( FOLLOW_LONG_in_id_str3892_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SHORT_in_id_str3902_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SHORT_in_id_str3902( FOLLOW_SHORT_in_id_str3902_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_BTRUE_in_id_str3912_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_BTRUE_in_id_str3912( FOLLOW_BTRUE_in_id_str3912_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_BFALSE_in_id_str3922_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_BFALSE_in_id_str3922( FOLLOW_BFALSE_in_id_str3922_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_SS_in_id_str3932_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_SS_in_id_str3932( FOLLOW_SS_in_id_str3932_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_VERBOSE_in_id_str3942_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_VERBOSE_in_id_str3942( FOLLOW_VERBOSE_in_id_str3942_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_BACKWARDCOMP_in_id_str3952_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_BACKWARDCOMP_in_id_str3952( FOLLOW_BACKWARDCOMP_in_id_str3952_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_atom_int_in_atom_num3980_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_atom_int_in_atom_num3980( FOLLOW_atom_int_in_atom_num3980_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_atom_double_in_atom_num3994_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_atom_double_in_atom_num3994( FOLLOW_atom_double_in_atom_num3994_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_ZERO_in_atom_int4023_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_ZERO_in_atom_int4023( FOLLOW_ZERO_in_atom_int4023_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_INT_in_atom_int4032_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_INT_in_atom_int4032( FOLLOW_INT_in_atom_int4032_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_DOUBLE_in_atom_double4062_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_DOUBLE_in_atom_double4062( FOLLOW_DOUBLE_in_atom_double4062_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_BTRUE_in_atom_bool4091_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_BTRUE_in_atom_bool4091( FOLLOW_BTRUE_in_atom_bool4091_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: gEconParser  */
static	ANTLR_BITWORD FOLLOW_BFALSE_in_atom_bool4101_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  gEconParserImplTraits::BitsetListType FOLLOW_BFALSE_in_atom_bool4101( FOLLOW_BFALSE_in_atom_bool4101_bits, 1 );



/* =========================================================================
 * DFA tables for the parser
 */
/** Static dfa state tables for Cyclic dfa:
 *    252:1: definition : (lhs= atom_id_t EQ rhs= expr SEMI |lhs= atom_id_nt EQ rhs= expr SEMI );
 */
static const ANTLR_INT32 dfa32_eot[105] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa32_eof[105] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa32_min[105] =
    {
	10, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, -1, 10, 
	-1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 10, 10, 36, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 10, 17, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 17
    };
static const ANTLR_INT32 dfa32_max[105] =
    {
	90, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, -1, 92, 
	-1, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 92, 92, 50, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 92, 69, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 69
    };
static const ANTLR_INT32 dfa32_accept[105] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa32_special[105] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
static const ANTLR_INT32* dfa32_T_empty	 =   NULL;

static const ANTLR_INT32 dfa32_T0[] =
    {
	104
    };

static const ANTLR_INT32 dfa32_T1[] =
    {
	40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41
    };

static const ANTLR_INT32 dfa32_T2[] =
    {
	18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, 16
    };

static const ANTLR_INT32 dfa32_T3[] =
    {
	83
    };

static const ANTLR_INT32 dfa32_T4[] =
    {
	76, 73, -1, 72, -1, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	81, -1, -1, -1, -1, -1, -1, 77, -1, -1, -1, -1, -1, 62, -1, -1, 78, 80, 
	68, -1, 67, -1, -1, -1, -1, 69, 70, -1, -1, -1, -1, -1, -1, -1, 65, -1, 
	-1, -1, -1, 82, 66, -1, -1, -1, -1, -1, -1, -1, -1, 71, -1, -1, 63, -1, 
	74, -1, -1, -1, -1, -1, -1, -1, 75, -1, 79
    };

static const ANTLR_INT32 dfa32_T5[] =
    {
	15, 12, -1, 11, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 
	7, -1, 6, -1, -1, -1, -1, 8, 9, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, 
	-1, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 2, -1, 13, -1, 
	-1, -1, -1, -1, -1, -1, 14
    };

static const ANTLR_INT32 dfa32_T6[] =
    {
	56, 53, -1, 52, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	61, -1, -1, -1, -1, -1, -1, 57, -1, -1, -1, -1, -1, 42, -1, -1, 58, 60, 
	48, -1, 47, -1, -1, -1, -1, 49, 50, -1, -1, -1, -1, -1, -1, -1, 45, -1, 
	-1, -1, -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, 51, -1, -1, 43, -1, 
	54, -1, -1, -1, -1, -1, -1, -1, 55, -1, 59
    };

static const ANTLR_INT32 dfa32_T7[] =
    {
	98, 95, -1, 94, -1, 86, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	103, -1, -1, -1, -1, -1, -1, 99, -1, -1, -1, -1, -1, 84, -1, -1, 100, 102, 
	90, -1, 89, -1, -1, -1, -1, 91, 92, -1, -1, -1, -1, -1, -1, -1, 87, -1, 
	-1, -1, -1, -1, 88, -1, -1, -1, -1, -1, -1, -1, -1, 93, -1, -1, 85, -1, 
	96, -1, -1, -1, -1, -1, -1, -1, 97, -1, 101
    };

static const ANTLR_INT32 dfa32_T8[] =
    {
	18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16
    };

static const ANTLR_INT32 dfa32_T9[] =
    {
	33, 30, -1, 29, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	38, -1, -1, -1, -1, -1, -1, 34, -1, -1, -1, -1, -1, 19, -1, -1, 35, 37, 
	25, -1, 24, -1, -1, -1, -1, 26, 27, -1, -1, -1, -1, -1, -1, -1, 22, -1, 
	-1, -1, -1, 39, 23, -1, -1, -1, -1, -1, -1, -1, -1, 28, -1, -1, 20, -1, 
	31, -1, -1, -1, -1, -1, -1, -1, 32, -1, 36
    };


/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR_INT32 * const dfa32_transitions[] =
{
    dfa32_T5, dfa32_T2, dfa32_T2, dfa32_T2, dfa32_T2, dfa32_T2, dfa32_T2, 
    dfa32_T2, dfa32_T2, dfa32_T2, dfa32_T2, dfa32_T2, dfa32_T2, dfa32_T2, 
    dfa32_T2, dfa32_T2, NULL, dfa32_T9, NULL, dfa32_T1, dfa32_T1, dfa32_T1, 
    dfa32_T1, dfa32_T1, dfa32_T1, dfa32_T1, dfa32_T1, dfa32_T1, dfa32_T1, 
    dfa32_T1, dfa32_T1, dfa32_T1, dfa32_T1, dfa32_T1, dfa32_T1, dfa32_T1, 
    dfa32_T1, dfa32_T1, dfa32_T1, dfa32_T6, dfa32_T4, dfa32_T8, dfa32_T3, 
    dfa32_T3, dfa32_T3, dfa32_T3, dfa32_T3, dfa32_T3, dfa32_T3, dfa32_T3, 
    dfa32_T3, dfa32_T3, dfa32_T3, dfa32_T3, dfa32_T3, dfa32_T3, dfa32_T3, 
    dfa32_T3, dfa32_T3, dfa32_T3, dfa32_T3, dfa32_T3, dfa32_T1, dfa32_T1, 
    dfa32_T1, dfa32_T1, dfa32_T1, dfa32_T1, dfa32_T1, dfa32_T1, dfa32_T1, 
    dfa32_T1, dfa32_T1, dfa32_T1, dfa32_T1, dfa32_T1, dfa32_T1, dfa32_T1, 
    dfa32_T1, dfa32_T1, dfa32_T1, dfa32_T1, dfa32_T7, dfa32_T1, dfa32_T0, 
    dfa32_T0, dfa32_T0, dfa32_T0, dfa32_T0, dfa32_T0, dfa32_T0, dfa32_T0, 
    dfa32_T0, dfa32_T0, dfa32_T0, dfa32_T0, dfa32_T0, dfa32_T0, dfa32_T0, 
    dfa32_T0, dfa32_T0, dfa32_T0, dfa32_T0, dfa32_T0, dfa32_T1
};


/* Declare tracking structure for Cyclic DFA 32
 */
class gEconParserCyclicDFA32 : public CyclicDFA< gEconParserImplTraits, gEconParser >, public gEconParserTokens
{
public:
	typedef CyclicDFA< gEconParserImplTraits, gEconParser >  BaseType;
	typedef BaseType::ContextType CtxType;

private:
	

public:
	gEconParserCyclicDFA32( ANTLR_INT32	decisionNumber
					, const ANTLR_UCHAR*	description
					, const ANTLR_INT32* const	eot
					, const ANTLR_INT32* const	eof
					, const ANTLR_INT32* const	min
					, const ANTLR_INT32* const	max
					, const ANTLR_INT32* const	accept
					, const ANTLR_INT32* const	special
					, const ANTLR_INT32* const *const	transition)
					:BaseType( decisionNumber, description, eot, eof, min, max, accept,
								special, transition )
	{
		
	}

};

static gEconParserCyclicDFA32  cdfa32(
	    32,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const ANTLR_UCHAR*)"252:1: definition : (lhs= atom_id_t EQ rhs= expr SEMI |lhs= atom_id_nt EQ rhs= expr SEMI );",
	    dfa32_eot,	    /* EOT table			    */
	    dfa32_eof,	    /* EOF table			    */
	    dfa32_min,	    /* Minimum tokens for each state    */
	    dfa32_max,	    /* Maximum tokens for each state    */
	    dfa32_accept,	/* Accept table			    */
	    dfa32_special,	/* Special transition states	    */
	    dfa32_transitions	/* Table of transition tables	    */

	);


/* End of Cyclic DFA 32
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    357:1: block_shocks : ( ({...}?)=> SHOCKS LBRACE shock ( shock )+ RBRACE ( SEMI )? | SHOCKS LBRACE ls= list_var ( shock )? RBRACE ( SEMI )? );
 */
static const ANTLR_INT32 dfa50_eot[421] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa50_eof[421] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa50_min[421] =
    {
	76, 49, 10, 10, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 
	47, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 45, 10, 
	10, 17, 72, 72, 45, 44, 72, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 17, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 10, -1, 72, 72, 72, 72, 72, 10, 50, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 10, 10, 10, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 10, 45, 
	17, 10, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 45, 10, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 
	17, 72, 72, 45, 44, 72, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 10, 10, 74, 72, 72, 45, 44, 72, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
	10, 17, 72, 72, 72, 72, 72, 69, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 10, 72, 72, 72, 72, 72, 10, 50, 67, 67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 10, 10, 10, 0, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 10, 45, 17, 
	10, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 
	74, 72, 72, 45, 44, 72, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 10, 17, 72, 72, 72, 72, 72, 69, 10
    };
static const ANTLR_INT32 dfa50_max[421] =
    {
	76, 49, 90, 90, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
	50, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 92, 92, 
	90, 74, 72, 72, 92, 92, 72, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 69, 92, 69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 90, -1, 72, 72, 72, 72, 72, 92, 50, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 
	90, 90, 90, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 92, 92, 69, 92, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 
	92, 92, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 74, 72, 72, 92, 92, 72, 67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 90, 90, 74, 72, 72, 92, 
	92, 72, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 92, 69, 72, 72, 72, 72, 72, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 69, 90, 72, 72, 72, 72, 72, 92, 50, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 
	67, 90, 90, 90, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 92, 92, 69, 92, 69, 69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 74, 72, 72, 92, 92, 72, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 90, 69, 
	72, 72, 72, 72, 72, 69, 90
    };
static const ANTLR_INT32 dfa50_accept[421] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1
    };
static const ANTLR_INT32 dfa50_special[421] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
static const ANTLR_INT32* dfa50_T_empty	 =   NULL;

static const ANTLR_INT32 dfa50_T0[] =
    {
	413
    };

static const ANTLR_INT32 dfa50_T1[] =
    {
	257
    };

static const ANTLR_INT32 dfa50_T2[] =
    {
	86, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 87
    };

static const ANTLR_INT32 dfa50_T3[] =
    {
	285, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 286
    };

static const ANTLR_INT32 dfa50_T4[] =
    {
	419
    };

static const ANTLR_INT32 dfa50_T5[] =
    {
	263
    };

static const ANTLR_INT32 dfa50_T6[] =
    {
	229
    };

static const ANTLR_INT32 dfa50_T7[] =
    {
	36
    };

static const ANTLR_INT32 dfa50_T8[] =
    {
	386
    };

static const ANTLR_INT32 dfa50_T9[] =
    {
	202
    };

static const ANTLR_INT32 dfa50_T10[] =
    {
	181, -1, -1, 180
    };

static const ANTLR_INT32 dfa50_T11[] =
    {
	35, -1, -1, 34
    };

static const ANTLR_INT32 dfa50_T12[] =
    {
	109, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 108
    };

static const ANTLR_INT32 dfa50_T13[] =
    {
	309, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 308
    };

static const ANTLR_INT32 dfa50_T14[] =
    {
	148
    };

static const ANTLR_INT32 dfa50_T15[] =
    {
	349
    };

static const ANTLR_INT32 dfa50_T16[] =
    {
	37
    };

static const ANTLR_INT32 dfa50_T17[] =
    {
	230
    };

static const ANTLR_INT32 dfa50_T18[] =
    {
	222, 219, -1, 218, -1, 210, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 227, -1, -1, -1, -1, -1, -1, 223, -1, -1, -1, -1, -1, 208, -1, -1, 
	224, 226, 214, -1, 213, -1, -1, -1, -1, 215, 216, -1, -1, -1, -1, -1, -1, 
	-1, 211, -1, -1, -1, -1, -1, 212, -1, -1, -1, -1, -1, -1, -1, -1, 217, 
	-1, -1, 209, -1, 220, -1, -1, -1, -1, -1, -1, -1, 221, -1, 225
    };

static const ANTLR_INT32 dfa50_T19[] =
    {
	406, 403, -1, 402, -1, 394, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 411, -1, -1, -1, -1, -1, -1, 407, -1, -1, -1, -1, -1, 392, -1, -1, 
	408, 410, 398, -1, 397, -1, -1, -1, -1, 399, 400, -1, -1, -1, -1, -1, -1, 
	-1, 395, -1, -1, -1, -1, -1, 396, -1, -1, -1, -1, -1, -1, -1, -1, 401, 
	-1, -1, 393, -1, 404, -1, -1, -1, -1, -1, -1, -1, 405, -1, 409
    };

static const ANTLR_INT32 dfa50_T20[] =
    {
	125, 122, -1, 121, -1, 113, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 111, -1, -1, -1, 
	-1, 117, 110, 116, -1, -1, -1, -1, 118, 119, -1, -1, -1, -1, -1, -1, -1, 
	114, -1, -1, -1, -1, -1, 115, -1, -1, 80, -1, -1, -1, -1, -1, 120, -1, 
	-1, 112, -1, 123, -1, -1, -1, -1, -1, -1, -1, 124
    };

static const ANTLR_INT32 dfa50_T21[] =
    {
	102, 99, -1, 98, -1, 90, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	107, -1, -1, -1, -1, -1, -1, 103, -1, -1, -1, -1, -1, 88, -1, -1, 104, 
	106, 94, -1, 93, -1, -1, -1, -1, 95, 96, -1, -1, -1, -1, -1, -1, -1, 91, 
	-1, -1, -1, -1, -1, 92, -1, -1, -1, -1, -1, -1, -1, -1, 97, -1, -1, 89, 
	-1, 100, -1, -1, -1, -1, -1, -1, -1, 101, -1, 105
    };

static const ANTLR_INT32 dfa50_T22[] =
    {
	301, 298, -1, 297, -1, 289, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 306, -1, -1, -1, -1, -1, -1, 302, -1, -1, -1, -1, -1, 287, -1, -1, 
	303, 305, 293, -1, 292, -1, -1, -1, -1, 294, 295, -1, -1, -1, -1, -1, -1, 
	-1, 290, -1, -1, -1, -1, -1, 291, -1, -1, -1, -1, -1, -1, -1, -1, 296, 
	-1, -1, 288, -1, 299, -1, -1, -1, -1, -1, -1, -1, 300, -1, 304
    };

static const ANTLR_INT32 dfa50_T23[] =
    {
	196, 193, -1, 192, -1, 184, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 201, -1, -1, -1, -1, -1, -1, 197, -1, -1, -1, -1, -1, 182, -1, -1, 
	198, 200, 188, -1, 187, -1, -1, -1, -1, 189, 190, -1, -1, -1, -1, -1, -1, 
	-1, 185, -1, -1, -1, -1, -1, 186, -1, -1, -1, -1, -1, -1, -1, -1, 191, 
	-1, -1, 183, -1, 194, -1, -1, -1, -1, -1, -1, -1, 195, -1, 199
    };

static const ANTLR_INT32 dfa50_T24[] =
    {
	380, 377, -1, 376, -1, 368, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 385, -1, -1, -1, -1, -1, -1, 381, -1, -1, -1, -1, -1, 366, -1, -1, 
	382, 384, 372, -1, 371, -1, -1, -1, -1, 373, 374, -1, -1, -1, -1, -1, -1, 
	-1, 369, -1, -1, -1, -1, -1, 370, -1, -1, -1, -1, -1, -1, -1, -1, 375, 
	-1, -1, 367, -1, 378, -1, -1, -1, -1, -1, -1, -1, 379, -1, 383
    };

static const ANTLR_INT32 dfa50_T25[] =
    {
	179, 176, -1, 175, -1, 167, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 165, -1, -1, -1, 
	-1, 171, -1, 170, -1, -1, -1, -1, 172, 173, -1, -1, -1, -1, -1, -1, -1, 
	168, -1, -1, -1, -1, -1, 169, -1, -1, -1, -1, -1, -1, -1, -1, 174, -1, 
	-1, 166, -1, 177, -1, -1, -1, -1, -1, -1, -1, 178
    };

static const ANTLR_INT32 dfa50_T26[] =
    {
	33, 30, -1, 29, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, -1, -1, 
	25, -1, 24, -1, -1, -1, -1, 26, 27, -1, -1, -1, -1, -1, -1, -1, 22, -1, 
	-1, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, 28, -1, -1, 20, -1, 
	31, -1, -1, -1, -1, -1, -1, -1, 32
    };

static const ANTLR_INT32 dfa50_T27[] =
    {
	279
    };

static const ANTLR_INT32 dfa50_T28[] =
    {
	420
    };

static const ANTLR_INT32 dfa50_T29[] =
    {
	307
    };

static const ANTLR_INT32 dfa50_T30[] =
    {
	416, 418, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 417
    };

static const ANTLR_INT32 dfa50_T31[] =
    {
	83, 85, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 84
    };

static const ANTLR_INT32 dfa50_T32[] =
    {
	260, 262, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 261
    };

static const ANTLR_INT32 dfa50_T33[] =
    {
	282, 284, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 283
    };

static const ANTLR_INT32 dfa50_T34[] =
    {
	18, 15, -1, 14, -1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, 
	10, 3, 9, -1, -1, -1, -1, 11, 12, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 
	-1, -1, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, 5, -1, 16, -1, 
	-1, -1, -1, -1, -1, -1, 17
    };

static const ANTLR_INT32 dfa50_T35[] =
    {
	228
    };

static const ANTLR_INT32 dfa50_T36[] =
    {
	412
    };

static const ANTLR_INT32 dfa50_T37[] =
    {
	-1
    };

static const ANTLR_INT32 dfa50_T38[] =
    {
	232, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 234, -1, -1, -1, -1, -1, -1, 
	233, -1, -1, -1, -1, -1, -1, -1, -1, 230, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 235, -1, -1, -1, -1, -1, -1, -1, -1, -1, 231
    };

static const ANTLR_INT32 dfa50_T39[] =
    {
	39, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, -1, 
	40, -1, -1, -1, -1, -1, -1, -1, -1, 37, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, 38
    };

static const ANTLR_INT32 dfa50_T40[] =
    {
	1
    };

static const ANTLR_INT32 dfa50_T41[] =
    {
	80, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 79
    };

static const ANTLR_INT32 dfa50_T42[] =
    {
	125, 122, -1, 121, -1, 113, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 111, -1, -1, -1, 
	-1, 117, 110, 116, -1, -1, -1, -1, 118, 119, -1, -1, -1, -1, -1, -1, -1, 
	114, -1, -1, -1, -1, -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, 120, -1, 
	-1, 112, -1, 123, -1, -1, -1, -1, -1, -1, -1, 124
    };

static const ANTLR_INT32 dfa50_T43[] =
    {
	78, 75, -1, 74, -1, 66, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 64, -1, -1, -1, -1, 
	70, -1, 69, -1, -1, -1, -1, 71, 72, -1, -1, -1, -1, -1, -1, -1, 67, -1, 
	-1, -1, -1, -1, 68, -1, -1, -1, -1, -1, -1, -1, -1, 73, -1, -1, 65, -1, 
	76, -1, -1, -1, -1, -1, -1, -1, 77
    };

static const ANTLR_INT32 dfa50_T44[] =
    {
	278, 275, -1, 274, -1, 266, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 264, -1, -1, -1, 
	-1, 270, -1, 269, -1, -1, -1, -1, 271, 272, -1, -1, -1, -1, -1, -1, -1, 
	267, -1, -1, -1, -1, -1, 268, -1, -1, -1, -1, -1, -1, -1, -1, 273, -1, 
	-1, 265, -1, 276, -1, -1, -1, -1, -1, -1, -1, 277
    };

static const ANTLR_INT32 dfa50_T45[] =
    {
	140, 137, -1, 136, -1, 128, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 145, -1, -1, -1, -1, -1, -1, 141, -1, -1, -1, -1, -1, 126, -1, -1, 
	142, 144, 132, -1, 131, -1, -1, -1, -1, 133, 134, -1, -1, -1, -1, -1, -1, 
	-1, 129, -1, -1, -1, -1, 146, 130, -1, -1, -1, -1, -1, -1, -1, -1, 135, 
	-1, -1, 127, -1, 138, -1, -1, -1, -1, -1, -1, -1, 139, -1, 143
    };

static const ANTLR_INT32 dfa50_T46[] =
    {
	341, 338, -1, 337, -1, 329, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 346, -1, -1, -1, -1, -1, -1, 342, -1, -1, -1, -1, -1, 327, -1, -1, 
	343, 345, 333, -1, 332, -1, -1, -1, -1, 334, 335, -1, -1, -1, -1, -1, -1, 
	-1, 330, -1, -1, -1, -1, 347, 331, -1, -1, -1, -1, -1, -1, -1, -1, 336, 
	-1, -1, 328, -1, 339, -1, -1, -1, -1, -1, -1, -1, 340, -1, 344
    };

static const ANTLR_INT32 dfa50_T47[] =
    {
	2
    };

static const ANTLR_INT32 dfa50_T48[] =
    {
	147
    };

static const ANTLR_INT32 dfa50_T49[] =
    {
	348
    };

static const ANTLR_INT32 dfa50_T50[] =
    {
	415, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 414
    };

static const ANTLR_INT32 dfa50_T51[] =
    {
	82, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 81
    };

static const ANTLR_INT32 dfa50_T52[] =
    {
	259, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 258
    };

static const ANTLR_INT32 dfa50_T53[] =
    {
	281, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 280
    };

static const ANTLR_INT32 dfa50_T54[] =
    {
	204, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 206, -1, -1, -1, -1, -1, -1, 
	205, -1, -1, -1, -1, -1, -1, -1, -1, 202, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 207, -1, -1, -1, -1, -1, -1, -1, -1, -1, 203
    };

static const ANTLR_INT32 dfa50_T55[] =
    {
	388, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 390, -1, -1, -1, -1, -1, -1, 
	389, -1, -1, -1, -1, -1, -1, -1, -1, 386, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 391, -1, -1, -1, -1, -1, -1, -1, -1, -1, 387
    };

static const ANTLR_INT32 dfa50_T56[] =
    {
	326, 323, -1, 322, -1, 314, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 312, -1, -1, -1, 
	-1, 318, 311, 317, -1, -1, -1, -1, 319, 320, -1, -1, -1, -1, -1, -1, -1, 
	315, -1, -1, -1, -1, -1, 316, -1, -1, 310, -1, -1, -1, -1, -1, 321, -1, 
	-1, 313, -1, 324, -1, -1, -1, -1, -1, -1, -1, 325
    };

static const ANTLR_INT32 dfa50_T57[] =
    {
	250, 247, -1, 246, -1, 238, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 255, -1, -1, -1, -1, -1, -1, 251, -1, -1, -1, -1, -1, 236, -1, -1, 
	252, 254, 242, -1, 241, -1, -1, -1, -1, 243, 244, -1, -1, -1, -1, -1, -1, 
	-1, 239, -1, -1, -1, -1, 256, 240, -1, -1, -1, -1, -1, -1, -1, -1, 245, 
	-1, -1, 237, -1, 248, -1, -1, -1, -1, -1, -1, -1, 249, -1, 253
    };

static const ANTLR_INT32 dfa50_T58[] =
    {
	57, 54, -1, 53, -1, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	62, -1, -1, -1, -1, -1, -1, 58, -1, -1, -1, -1, -1, 43, -1, -1, 59, 61, 
	49, -1, 48, -1, -1, -1, -1, 50, 51, -1, -1, -1, -1, -1, -1, -1, 46, -1, 
	-1, -1, -1, 63, 47, -1, -1, -1, -1, -1, -1, -1, -1, 52, -1, -1, 44, -1, 
	55, -1, -1, -1, -1, -1, -1, -1, 56, -1, 60
    };

static const ANTLR_INT32 dfa50_T59[] =
    {
	164, 161, -1, 160, -1, 152, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 150, -1, -1, -1, 
	-1, 156, -1, 155, -1, -1, -1, -1, 157, 158, -1, -1, -1, -1, -1, -1, -1, 
	153, -1, -1, -1, -1, 149, 154, -1, -1, -1, -1, -1, -1, -1, -1, 159, -1, 
	-1, 151, -1, 162, -1, -1, -1, -1, -1, -1, -1, 163
    };

static const ANTLR_INT32 dfa50_T60[] =
    {
	365, 362, -1, 361, -1, 353, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 351, -1, -1, -1, 
	-1, 357, -1, 356, -1, -1, -1, -1, 358, 359, -1, -1, -1, -1, -1, -1, -1, 
	354, -1, -1, -1, -1, 350, 355, -1, -1, -1, -1, -1, -1, -1, -1, 360, -1, 
	-1, 352, -1, 363, -1, -1, -1, -1, -1, -1, -1, 364
    };


/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR_INT32 * const dfa50_transitions[] =
{
    dfa50_T40, dfa50_T47, dfa50_T34, dfa50_T26, dfa50_T11, dfa50_T11, dfa50_T11, 
    dfa50_T11, dfa50_T11, dfa50_T11, dfa50_T11, dfa50_T11, dfa50_T11, dfa50_T11, 
    dfa50_T11, dfa50_T11, dfa50_T11, dfa50_T11, dfa50_T11, dfa50_T7, dfa50_T7, 
    dfa50_T7, dfa50_T7, dfa50_T7, dfa50_T7, dfa50_T7, dfa50_T7, dfa50_T7, 
    dfa50_T7, dfa50_T7, dfa50_T7, dfa50_T7, dfa50_T7, dfa50_T7, dfa50_T39, 
    dfa50_T58, dfa50_T43, dfa50_T41, dfa50_T16, dfa50_T16, dfa50_T51, dfa50_T31, 
    dfa50_T16, dfa50_T2, dfa50_T2, dfa50_T2, dfa50_T2, dfa50_T2, dfa50_T2, 
    dfa50_T2, dfa50_T2, dfa50_T2, dfa50_T2, dfa50_T2, dfa50_T2, dfa50_T2, 
    dfa50_T2, dfa50_T2, dfa50_T2, dfa50_T2, dfa50_T2, dfa50_T2, dfa50_T2, 
    dfa50_T21, dfa50_T12, dfa50_T12, dfa50_T12, dfa50_T12, dfa50_T12, dfa50_T12, 
    dfa50_T12, dfa50_T12, dfa50_T12, dfa50_T12, dfa50_T12, dfa50_T12, dfa50_T12, 
    dfa50_T12, dfa50_T12, dfa50_T20, NULL, dfa50_T16, dfa50_T16, dfa50_T16, 
    dfa50_T16, dfa50_T16, dfa50_T45, dfa50_T48, dfa50_T14, dfa50_T14, dfa50_T14, 
    dfa50_T14, dfa50_T14, dfa50_T14, dfa50_T14, dfa50_T14, dfa50_T14, dfa50_T14, 
    dfa50_T14, dfa50_T14, dfa50_T14, dfa50_T14, dfa50_T14, dfa50_T14, dfa50_T14, 
    dfa50_T14, dfa50_T14, dfa50_T14, dfa50_T34, dfa50_T59, dfa50_T25, dfa50_T10, 
    dfa50_T10, dfa50_T10, dfa50_T10, dfa50_T10, dfa50_T10, dfa50_T10, dfa50_T10, 
    dfa50_T10, dfa50_T10, dfa50_T10, dfa50_T10, dfa50_T10, dfa50_T10, dfa50_T10, 
    dfa50_T2, dfa50_T2, dfa50_T2, dfa50_T2, dfa50_T2, dfa50_T2, dfa50_T2, 
    dfa50_T2, dfa50_T2, dfa50_T2, dfa50_T2, dfa50_T2, dfa50_T2, dfa50_T2, 
    dfa50_T2, dfa50_T2, dfa50_T2, dfa50_T2, dfa50_T2, dfa50_T2, dfa50_T23, 
    dfa50_T54, dfa50_T2, dfa50_T18, dfa50_T35, dfa50_T35, dfa50_T35, dfa50_T35, 
    dfa50_T35, dfa50_T35, dfa50_T35, dfa50_T35, dfa50_T35, dfa50_T35, dfa50_T35, 
    dfa50_T35, dfa50_T35, dfa50_T35, dfa50_T35, dfa50_T6, dfa50_T6, dfa50_T6, 
    dfa50_T6, dfa50_T6, dfa50_T6, dfa50_T6, dfa50_T6, dfa50_T6, dfa50_T6, 
    dfa50_T6, dfa50_T6, dfa50_T6, dfa50_T6, dfa50_T6, dfa50_T38, dfa50_T57, 
    dfa50_T1, dfa50_T1, dfa50_T1, dfa50_T1, dfa50_T1, dfa50_T1, dfa50_T1, 
    dfa50_T1, dfa50_T1, dfa50_T1, dfa50_T1, dfa50_T1, dfa50_T1, dfa50_T1, 
    dfa50_T1, dfa50_T1, dfa50_T1, dfa50_T1, dfa50_T1, dfa50_T1, dfa50_T41, 
    dfa50_T9, dfa50_T9, dfa50_T52, dfa50_T32, dfa50_T9, dfa50_T5, dfa50_T5, 
    dfa50_T5, dfa50_T5, dfa50_T5, dfa50_T5, dfa50_T5, dfa50_T5, dfa50_T5, 
    dfa50_T5, dfa50_T5, dfa50_T5, dfa50_T5, dfa50_T5, dfa50_T5, dfa50_T5, 
    dfa50_T5, dfa50_T5, dfa50_T5, dfa50_T5, dfa50_T34, dfa50_T44, dfa50_T27, 
    dfa50_T17, dfa50_T17, dfa50_T53, dfa50_T33, dfa50_T17, dfa50_T3, dfa50_T3, 
    dfa50_T3, dfa50_T3, dfa50_T3, dfa50_T3, dfa50_T3, dfa50_T3, dfa50_T3, 
    dfa50_T3, dfa50_T3, dfa50_T3, dfa50_T3, dfa50_T3, dfa50_T3, dfa50_T3, 
    dfa50_T3, dfa50_T3, dfa50_T3, dfa50_T3, dfa50_T22, dfa50_T2, dfa50_T9, 
    dfa50_T9, dfa50_T9, dfa50_T9, dfa50_T9, dfa50_T29, dfa50_T13, dfa50_T13, 
    dfa50_T13, dfa50_T13, dfa50_T13, dfa50_T13, dfa50_T13, dfa50_T13, dfa50_T13, 
    dfa50_T13, dfa50_T13, dfa50_T13, dfa50_T13, dfa50_T13, dfa50_T13, dfa50_T56, 
    dfa50_T17, dfa50_T17, dfa50_T17, dfa50_T17, dfa50_T17, dfa50_T46, dfa50_T49, 
    dfa50_T15, dfa50_T15, dfa50_T15, dfa50_T15, dfa50_T15, dfa50_T15, dfa50_T15, 
    dfa50_T15, dfa50_T15, dfa50_T15, dfa50_T15, dfa50_T15, dfa50_T15, dfa50_T15, 
    dfa50_T15, dfa50_T15, dfa50_T15, dfa50_T15, dfa50_T15, dfa50_T15, dfa50_T34, 
    dfa50_T42, dfa50_T60, dfa50_T37, NULL, NULL, NULL, NULL, NULL, NULL, 
    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, dfa50_T3, 
    dfa50_T3, dfa50_T3, dfa50_T3, dfa50_T3, dfa50_T3, dfa50_T3, dfa50_T3, 
    dfa50_T3, dfa50_T3, dfa50_T3, dfa50_T3, dfa50_T3, dfa50_T3, dfa50_T3, 
    dfa50_T3, dfa50_T3, dfa50_T3, dfa50_T3, dfa50_T3, dfa50_T24, dfa50_T55, 
    dfa50_T3, dfa50_T19, dfa50_T36, dfa50_T36, dfa50_T36, dfa50_T36, dfa50_T36, 
    dfa50_T36, dfa50_T36, dfa50_T36, dfa50_T36, dfa50_T36, dfa50_T36, dfa50_T36, 
    dfa50_T36, dfa50_T36, dfa50_T36, dfa50_T0, dfa50_T0, dfa50_T0, dfa50_T0, 
    dfa50_T0, dfa50_T0, dfa50_T0, dfa50_T0, dfa50_T0, dfa50_T0, dfa50_T0, 
    dfa50_T0, dfa50_T0, dfa50_T0, dfa50_T0, dfa50_T0, dfa50_T0, dfa50_T0, 
    dfa50_T0, dfa50_T0, dfa50_T27, dfa50_T8, dfa50_T8, dfa50_T50, dfa50_T30, 
    dfa50_T8, dfa50_T4, dfa50_T4, dfa50_T4, dfa50_T4, dfa50_T4, dfa50_T4, 
    dfa50_T4, dfa50_T4, dfa50_T4, dfa50_T4, dfa50_T4, dfa50_T4, dfa50_T4, 
    dfa50_T4, dfa50_T4, dfa50_T4, dfa50_T4, dfa50_T4, dfa50_T4, dfa50_T4, 
    dfa50_T42, dfa50_T3, dfa50_T8, dfa50_T8, dfa50_T8, dfa50_T8, dfa50_T8, 
    dfa50_T28, dfa50_T42
};


/* Declare tracking structure for Cyclic DFA 50
 */
class gEconParserCyclicDFA50 : public CyclicDFA< gEconParserImplTraits, gEconParser >, public gEconParserTokens
{
public:
	typedef CyclicDFA< gEconParserImplTraits, gEconParser >  BaseType;
	typedef BaseType::ContextType CtxType;

private:
	//to maintain C-Target compatibility, we need to make some of ctx functions look like member funcs
	CtxType*	m_ctx; 
	

public:
	gEconParserCyclicDFA50( ANTLR_INT32	decisionNumber
					, const ANTLR_UCHAR*	description
					, const ANTLR_INT32* const	eot
					, const ANTLR_INT32* const	eof
					, const ANTLR_INT32* const	min
					, const ANTLR_INT32* const	max
					, const ANTLR_INT32* const	accept
					, const ANTLR_INT32* const	special
					, const ANTLR_INT32* const *const	transition)
					:BaseType( decisionNumber, description, eot, eof, min, max, accept,
								special, transition )
	{
		m_ctx = NULL;
		
	}

        ANTLR_UINT32 LA(ANTLR_INT32 i)
        {
        	return m_ctx->LA(i);
        }

        template<typename PredType>
        bool msynpred( PredType pred )
        {
        	return m_ctx->msynpred(pred);
        }

	const CtxType::CommonTokenType*  LT(ANTLR_INT32 k)
	{
		return m_ctx->LT(k);
	}

	ANTLR_INT32  specialStateTransition(CtxType * ctx, RecognizerType* recognizer, IntStreamType* is, ANTLR_INT32 s)
	{
	    ANTLR_INT32    _s;

	    m_ctx = ctx;
	    _s	    = s;
	    switch  (s)
	    {
	    	    case 0:

	    		{
	    		    ANTLR_UINT32 LA50_310;

	    		    ANTLR_MARKER index50_310;


	    		    LA50_310 = ctx->LA(1);

	    		     
	    		        index50_310 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (this->msynpred( antlr3::ClassForwarder<synpred1_gEcon>() )) )
	    		    {
	    		        s = 326;
	    		    }

	    		    else if ( (true) )
	    		    {
	    		        s = 80;
	    		    }

	    			 
	    				ctx->seek(index50_310);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;

	    	    case 1:

	    		{
	    		    ANTLR_UINT32 LA50_279;

	    		    ANTLR_MARKER index50_279;


	    		    LA50_279 = ctx->LA(1);

	    		     
	    		        index50_279 = ctx->index();

	    		        ctx->rewindLast();

	    		    s = -1;
	    		    if ( (LA50_279 == RBRACE) )
	    		    {
	    		        s = 310;
	    		    }

	    		    else if ( (this->msynpred( antlr3::ClassForwarder<synpred1_gEcon>() )) && (LA50_279 == LANGBR) )
	    		    {
	    		        s = 311;
	    		    }

	    		    else if ( (this->msynpred( antlr3::ClassForwarder<synpred1_gEcon>() )) && (LA50_279 == ID) )
	    		    {
	    		        s = 312;
	    		    }

	    		    else if ( (this->msynpred( antlr3::ClassForwarder<synpred1_gEcon>() )) && (LA50_279 == SLETTER) )
	    		    {
	    		        s = 313;
	    		    }

	    		    else if ( (this->msynpred( antlr3::ClassForwarder<synpred1_gEcon>() )) && (LA50_279 == CLETTER) )
	    		    {
	    		        s = 314;
	    		    }

	    		    else if ( (this->msynpred( antlr3::ClassForwarder<synpred1_gEcon>() )) && (LA50_279 == OUTPUT) )
	    		    {
	    		        s = 315;
	    		    }

	    		    else if ( (this->msynpred( antlr3::ClassForwarder<synpred1_gEcon>() )) && (LA50_279 == R) )
	    		    {
	    		        s = 316;
	    		    }

	    		    else if ( (this->msynpred( antlr3::ClassForwarder<synpred1_gEcon>() )) && (LA50_279 == LATEX) )
	    		    {
	    		        s = 317;
	    		    }

	    		    else if ( (this->msynpred( antlr3::ClassForwarder<synpred1_gEcon>() )) && (LA50_279 == LANDSCAPE) )
	    		    {
	    		        s = 318;
	    		    }

	    		    else if ( (this->msynpred( antlr3::ClassForwarder<synpred1_gEcon>() )) && (LA50_279 == LOGF) )
	    		    {
	    		        s = 319;
	    		    }

	    		    else if ( (this->msynpred( antlr3::ClassForwarder<synpred1_gEcon>() )) && (LA50_279 == LONG) )
	    		    {
	    		        s = 320;
	    		    }

	    		    else if ( (this->msynpred( antlr3::ClassForwarder<synpred1_gEcon>() )) && (LA50_279 == SHORT) )
	    		    {
	    		        s = 321;
	    		    }

	    		    else if ( (this->msynpred( antlr3::ClassForwarder<synpred1_gEcon>() )) && (LA50_279 == BTRUE) )
	    		    {
	    		        s = 322;
	    		    }

	    		    else if ( (this->msynpred( antlr3::ClassForwarder<synpred1_gEcon>() )) && (LA50_279 == BFALSE) )
	    		    {
	    		        s = 323;
	    		    }

	    		    else if ( (this->msynpred( antlr3::ClassForwarder<synpred1_gEcon>() )) && (LA50_279 == SS) )
	    		    {
	    		        s = 324;
	    		    }

	    		    else if ( (this->msynpred( antlr3::ClassForwarder<synpred1_gEcon>() )) && (LA50_279 == VERBOSE) )
	    		    {
	    		        s = 325;
	    		    }

	    		    else if ( (this->msynpred( antlr3::ClassForwarder<synpred1_gEcon>() )) && (LA50_279 == BACKWARDCOMP) )
	    		    {
	    		        s = 326;
	    		    }

	    			 
	    				ctx->seek(index50_279);

	    		    if ( s>=0 )
	    		    {
	    			return s;
	    		    }
	    		}
	    		break;
	    }
	    if ( ctx->get_backtracking() > 0)
	    {
		 ctx->set_failedflag( true );
		return	-1;
	    }
	    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( recognizer, "357:1: block_shocks : ( ({...}?)=> SHOCKS LBRACE shock ( shock )+ RBRACE ( SEMI )? | SHOCKS LBRACE ls= list_var ( shock )? RBRACE ( SEMI )? );" );
	    ex->set_decisionNum( 50 );
	    ex->set_state(_s);
	    return -1;
	}
};

static gEconParserCyclicDFA50  cdfa50(
	    50,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const ANTLR_UCHAR*)"357:1: block_shocks : ( ({...}?)=> SHOCKS LBRACE shock ( shock )+ RBRACE ( SEMI )? | SHOCKS LBRACE ls= list_var ( shock )? RBRACE ( SEMI )? );",
	    dfa50_eot,	    /* EOT table			    */
	    dfa50_eof,	    /* EOF table			    */
	    dfa50_min,	    /* Minimum tokens for each state    */
	    dfa50_max,	    /* Maximum tokens for each state    */
	    dfa50_accept,	/* Accept table			    */
	    dfa50_special,	/* Special transition states	    */
	    dfa50_transitions	/* Table of transition tables	    */

	);


/* End of Cyclic DFA 50
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    579:1: atom_id returns [ex val] : (v= atom_id_nt |v= atom_id_t );
 */
static const ANTLR_INT32 dfa70_eot[105] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa70_eof[105] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa70_min[105] =
    {
	10, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, -1, 10, 
	-1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 10, 10, 16, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 10, 17, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 17
    };
static const ANTLR_INT32 dfa70_max[105] =
    {
	90, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, -1, 92, 
	-1, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 92, 92, 74, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 92, 69, 67, 67, 67, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 69
    };
static const ANTLR_INT32 dfa70_accept[105] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 
	2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa70_special[105] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
static const ANTLR_INT32* dfa70_T_empty	 =   NULL;

static const ANTLR_INT32 dfa70_T0[] =
    {
	104
    };

static const ANTLR_INT32 dfa70_T1[] =
    {
	40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41
    };

static const ANTLR_INT32 dfa70_T2[] =
    {
	83
    };

static const ANTLR_INT32 dfa70_T3[] =
    {
	16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, -1, -1, -1, 
	-1, -1, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, 18, -1, 
	-1, -1, -1, -1, 16, 16, -1, -1, -1, -1, -1, 16, 16, -1, -1, -1, -1, -1, 
	16, -1, 16, 16, 16
    };

static const ANTLR_INT32 dfa70_T4[] =
    {
	15, 12, -1, 11, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 
	7, -1, 6, -1, -1, -1, -1, 8, 9, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, 
	-1, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 2, -1, 13, -1, 
	-1, -1, -1, -1, -1, -1, 14
    };

static const ANTLR_INT32 dfa70_T5[] =
    {
	76, 73, -1, 72, -1, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	81, -1, -1, -1, -1, -1, -1, 77, -1, -1, -1, -1, -1, 62, -1, -1, 78, 80, 
	68, -1, 67, -1, -1, -1, -1, 69, 70, -1, -1, -1, -1, -1, -1, -1, 65, -1, 
	-1, -1, -1, 82, 66, -1, -1, -1, -1, -1, -1, -1, -1, 71, -1, -1, 63, -1, 
	74, -1, -1, -1, -1, -1, -1, -1, 75, -1, 79
    };

static const ANTLR_INT32 dfa70_T6[] =
    {
	56, 53, -1, 52, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	61, -1, -1, -1, -1, -1, -1, 57, -1, -1, -1, -1, -1, 42, -1, -1, 58, 60, 
	48, -1, 47, -1, -1, -1, -1, 49, 50, -1, -1, -1, -1, -1, -1, -1, 45, -1, 
	-1, -1, -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, 51, -1, -1, 43, -1, 
	54, -1, -1, -1, -1, -1, -1, -1, 55, -1, 59
    };

static const ANTLR_INT32 dfa70_T7[] =
    {
	98, 95, -1, 94, -1, 86, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	103, -1, -1, -1, -1, -1, -1, 99, -1, -1, -1, -1, -1, 84, -1, -1, 100, 102, 
	90, -1, 89, -1, -1, -1, -1, 91, 92, -1, -1, -1, -1, -1, -1, -1, 87, -1, 
	-1, -1, -1, -1, 88, -1, -1, -1, -1, -1, -1, -1, -1, 93, -1, -1, 85, -1, 
	96, -1, -1, -1, -1, -1, -1, -1, 97, -1, 101
    };

static const ANTLR_INT32 dfa70_T8[] =
    {
	33, 30, -1, 29, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	38, -1, -1, -1, -1, -1, -1, 34, -1, -1, -1, -1, -1, 19, -1, -1, 35, 37, 
	25, -1, 24, -1, -1, -1, -1, 26, 27, -1, -1, -1, -1, -1, -1, -1, 22, -1, 
	-1, -1, -1, 39, 23, -1, -1, -1, -1, -1, -1, -1, -1, 28, -1, -1, 20, -1, 
	31, -1, -1, -1, -1, -1, -1, -1, 32, -1, 36
    };

static const ANTLR_INT32 dfa70_T9[] =
    {
	16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, -1, -1, -1, 
	-1, -1, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, 
	-1, -1, -1, -1, 16, 16, -1, -1, -1, -1, -1, 16, 16, -1, -1, -1, -1, -1, 
	16, -1, 16, 16, 16
    };


/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR_INT32 * const dfa70_transitions[] =
{
    dfa70_T4, dfa70_T3, dfa70_T3, dfa70_T3, dfa70_T3, dfa70_T3, dfa70_T3, 
    dfa70_T3, dfa70_T3, dfa70_T3, dfa70_T3, dfa70_T3, dfa70_T3, dfa70_T3, 
    dfa70_T3, dfa70_T3, NULL, dfa70_T8, NULL, dfa70_T1, dfa70_T1, dfa70_T1, 
    dfa70_T1, dfa70_T1, dfa70_T1, dfa70_T1, dfa70_T1, dfa70_T1, dfa70_T1, 
    dfa70_T1, dfa70_T1, dfa70_T1, dfa70_T1, dfa70_T1, dfa70_T1, dfa70_T1, 
    dfa70_T1, dfa70_T1, dfa70_T1, dfa70_T6, dfa70_T5, dfa70_T9, dfa70_T2, 
    dfa70_T2, dfa70_T2, dfa70_T2, dfa70_T2, dfa70_T2, dfa70_T2, dfa70_T2, 
    dfa70_T2, dfa70_T2, dfa70_T2, dfa70_T2, dfa70_T2, dfa70_T2, dfa70_T2, 
    dfa70_T2, dfa70_T2, dfa70_T2, dfa70_T2, dfa70_T2, dfa70_T1, dfa70_T1, 
    dfa70_T1, dfa70_T1, dfa70_T1, dfa70_T1, dfa70_T1, dfa70_T1, dfa70_T1, 
    dfa70_T1, dfa70_T1, dfa70_T1, dfa70_T1, dfa70_T1, dfa70_T1, dfa70_T1, 
    dfa70_T1, dfa70_T1, dfa70_T1, dfa70_T1, dfa70_T7, dfa70_T1, dfa70_T0, 
    dfa70_T0, dfa70_T0, dfa70_T0, dfa70_T0, dfa70_T0, dfa70_T0, dfa70_T0, 
    dfa70_T0, dfa70_T0, dfa70_T0, dfa70_T0, dfa70_T0, dfa70_T0, dfa70_T0, 
    dfa70_T0, dfa70_T0, dfa70_T0, dfa70_T0, dfa70_T0, dfa70_T1
};


/* Declare tracking structure for Cyclic DFA 70
 */
class gEconParserCyclicDFA70 : public CyclicDFA< gEconParserImplTraits, gEconParser >, public gEconParserTokens
{
public:
	typedef CyclicDFA< gEconParserImplTraits, gEconParser >  BaseType;
	typedef BaseType::ContextType CtxType;

private:
	

public:
	gEconParserCyclicDFA70( ANTLR_INT32	decisionNumber
					, const ANTLR_UCHAR*	description
					, const ANTLR_INT32* const	eot
					, const ANTLR_INT32* const	eof
					, const ANTLR_INT32* const	min
					, const ANTLR_INT32* const	max
					, const ANTLR_INT32* const	accept
					, const ANTLR_INT32* const	special
					, const ANTLR_INT32* const *const	transition)
					:BaseType( decisionNumber, description, eot, eof, min, max, accept,
								special, transition )
	{
		
	}

};

static gEconParserCyclicDFA70  cdfa70(
	    70,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const ANTLR_UCHAR*)"579:1: atom_id returns [ex val] : (v= atom_id_nt |v= atom_id_t );",
	    dfa70_eot,	    /* EOT table			    */
	    dfa70_eof,	    /* EOF table			    */
	    dfa70_min,	    /* Minimum tokens for each state    */
	    dfa70_max,	    /* Maximum tokens for each state    */
	    dfa70_accept,	/* Accept table			    */
	    dfa70_special,	/* Special transition states	    */
	    dfa70_transitions	/* Table of transition tables	    */

	);


/* End of Cyclic DFA 70
 * ---------------------
 */ 
/* =========================================================================
 * End of DFA tables for the parser
 */

/* ==============================================
 * Parsing rules
 */
/**
 * $ANTLR start model
 * ../gEcon_CURRENT/src//parser/gEcon.g:70:1: model : ( opts )? ( sets )? ( tryreduce )? ( block )+ EOF ;
 */
void
gEconParser::model()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // ../gEcon_CURRENT/src//parser/gEcon.g:71:5: ( ( opts )? ( sets )? ( tryreduce )? ( block )+ EOF )
        // ../gEcon_CURRENT/src//parser/gEcon.g:71:7: ( opts )? ( sets )? ( tryreduce )? ( block )+ EOF
        {
            // ../gEcon_CURRENT/src//parser/gEcon.g:71:7: ( opts )?
            {
                int alt1=2;
                switch ( this->LA(1) )
                {
                    case OPTS:
                    	{
                    		alt1=1;
                    	}
                        break;
                }

                switch (alt1)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src//parser/gEcon.g:71:7: opts
            	    {
            	        this->followPush(FOLLOW_opts_in_model83);
            	        opts();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemodelEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

            // ../gEcon_CURRENT/src//parser/gEcon.g:71:13: ( sets )?
            {
                int alt2=2;
                switch ( this->LA(1) )
                {
                    case SETS:
                    	{
                    		alt2=1;
                    	}
                        break;
                }

                switch (alt2)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src//parser/gEcon.g:71:13: sets
            	    {
            	        this->followPush(FOLLOW_sets_in_model86);
            	        sets();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemodelEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

            // ../gEcon_CURRENT/src//parser/gEcon.g:71:19: ( tryreduce )?
            {
                int alt3=2;
                switch ( this->LA(1) )
                {
                    case TRYREDUCE:
                    	{
                    		alt3=1;
                    	}
                        break;
                }

                switch (alt3)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src//parser/gEcon.g:71:19: tryreduce
            	    {
            	        this->followPush(FOLLOW_tryreduce_in_model89);
            	        tryreduce();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemodelEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

            // ../gEcon_CURRENT/src//parser/gEcon.g:71:30: ( block )+
            {
                int cnt4=0;

                for (;;)
                {
                    int alt4=2;
            	switch ( this->LA(1) )
            	{
            	case BLOCK:
            		{
            			alt4=1;
            		}
            	    break;

            	}

            	switch (alt4)
            	{
            	    case 1:
            	        // ../gEcon_CURRENT/src//parser/gEcon.g:71:31: block
            	        {
            	            this->followPush(FOLLOW_block_in_model93);
            	            block();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulemodelEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return ;
            	            }


            	        }
            	        break;

            	    default:

            		if ( cnt4 >= 1 )
            		{
            		    goto loop4;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return ;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< gEconParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto rulemodelEx;
            	}
            	cnt4++;
                }
                loop4: ;	/* Jump to here if this rule does not match */
            }

             this->matchToken(EOF, &FOLLOW_EOF_in_model97);
            if  (this->hasException())
            {
                goto rulemodelEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulemodelEx; /* Prevent compiler warnings */
    rulemodelEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end model */

/**
 * $ANTLR start opts
 * ../gEcon_CURRENT/src//parser/gEcon.g:75:1: opts : OPTS LBRACE ( opt )+ RBRACE ( SEMI )? ;
 */
void
gEconParser::opts()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // ../gEcon_CURRENT/src//parser/gEcon.g:76:5: ( OPTS LBRACE ( opt )+ RBRACE ( SEMI )? )
        // ../gEcon_CURRENT/src//parser/gEcon.g:76:7: OPTS LBRACE ( opt )+ RBRACE ( SEMI )?
        {
             this->matchToken(OPTS, &FOLLOW_OPTS_in_opts115);
            if  (this->hasException())
            {
                goto ruleoptsEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(LBRACE, &FOLLOW_LBRACE_in_opts117);
            if  (this->hasException())
            {
                goto ruleoptsEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            // ../gEcon_CURRENT/src//parser/gEcon.g:76:19: ( opt )+
            {
                int cnt5=0;

                for (;;)
                {
                    int alt5=2;
            	switch ( this->LA(1) )
            	{
            	case BACKWARDCOMP:
            	case OUTPUT:
            	case VERBOSE:
            		{
            			alt5=1;
            		}
            	    break;

            	}

            	switch (alt5)
            	{
            	    case 1:
            	        // ../gEcon_CURRENT/src//parser/gEcon.g:76:20: opt
            	        {
            	            this->followPush(FOLLOW_opt_in_opts120);
            	            opt();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleoptsEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return ;
            	            }


            	        }
            	        break;

            	    default:

            		if ( cnt5 >= 1 )
            		{
            		    goto loop5;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return ;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< gEconParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto ruleoptsEx;
            	}
            	cnt5++;
                }
                loop5: ;	/* Jump to here if this rule does not match */
            }

             this->matchToken(RBRACE, &FOLLOW_RBRACE_in_opts124);
            if  (this->hasException())
            {
                goto ruleoptsEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            // ../gEcon_CURRENT/src//parser/gEcon.g:76:33: ( SEMI )?
            {
                int alt6=2;
                switch ( this->LA(1) )
                {
                    case SEMI:
                    	{
                    		alt6=1;
                    	}
                        break;
                }

                switch (alt6)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src//parser/gEcon.g:76:33: SEMI
            	    {
            	         this->matchToken(SEMI, &FOLLOW_SEMI_in_opts126);
            	        if  (this->hasException())
            	        {
            	            goto ruleoptsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleoptsEx; /* Prevent compiler warnings */
    ruleoptsEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end opts */

/**
 * $ANTLR start opt
 * ../gEcon_CURRENT/src//parser/gEcon.g:79:1: opt : ( OUTPUT LATEX EQ b= atom_bool SEMI | OUTPUT LOGF EQ b= atom_bool SEMI | OUTPUT R EQ b= atom_bool SEMI | OUTPUT R LONG EQ b= atom_bool SEMI | OUTPUT LATEX LONG EQ b= atom_bool SEMI | OUTPUT LATEX LANDSCAPE EQ b= atom_bool SEMI | VERBOSE EQ b= atom_bool SEMI | BACKWARDCOMP EQ b= atom_bool SEMI );
 */
void
gEconParser::opt()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    bool b;
    typedef	bool RETURN_TYPE_b;

    /* Initialize rule variables
     */


 
    {
        {
            //  ../gEcon_CURRENT/src//parser/gEcon.g:80:5: ( OUTPUT LATEX EQ b= atom_bool SEMI | OUTPUT LOGF EQ b= atom_bool SEMI | OUTPUT R EQ b= atom_bool SEMI | OUTPUT R LONG EQ b= atom_bool SEMI | OUTPUT LATEX LONG EQ b= atom_bool SEMI | OUTPUT LATEX LANDSCAPE EQ b= atom_bool SEMI | VERBOSE EQ b= atom_bool SEMI | BACKWARDCOMP EQ b= atom_bool SEMI )

            ANTLR_UINT32 alt7;

            alt7=8;

            switch ( this->LA(1) )
            {
            case OUTPUT:
            	{
            		switch ( this->LA(2) )
            		{
            		case LATEX:
            			{
            				switch ( this->LA(3) )
            				{
            				case EQ:
            					{
            						alt7=1;
            					}
            				    break;
            				case LONG:
            					{
            						alt7=5;
            					}
            				    break;
            				case LANDSCAPE:
            					{
            						alt7=6;
            					}
            				    break;

            				default:
            				    if (this->get_backtracking()>0)
            				    {
            				        this->set_failedflag( true );
            				        return ;
            				    }

            				    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 7 );
            				    ex->set_state( 4 );


            				    goto ruleoptEx;

            				}

            			}
            		    break;
            		case LOGF:
            			{
            				alt7=2;
            			}
            		    break;
            		case R:
            			{
            				switch ( this->LA(3) )
            				{
            				case EQ:
            					{
            						alt7=3;
            					}
            				    break;
            				case LONG:
            					{
            						alt7=4;
            					}
            				    break;

            				default:
            				    if (this->get_backtracking()>0)
            				    {
            				        this->set_failedflag( true );
            				        return ;
            				    }

            				    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 7 );
            				    ex->set_state( 6 );


            				    goto ruleoptEx;

            				}

            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return ;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 7 );
            		    ex->set_state( 1 );


            		    goto ruleoptEx;

            		}

            	}
                break;
            case VERBOSE:
            	{
            		alt7=7;
            	}
                break;
            case BACKWARDCOMP:
            	{
            		alt7=8;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 7 );
                ex->set_state( 0 );


                goto ruleoptEx;

            }

            switch (alt7)
            {
        	case 1:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:80:7: OUTPUT LATEX EQ b= atom_bool SEMI
        	    {
        	         this->matchToken(OUTPUT, &FOLLOW_OUTPUT_in_opt144);
        	        if  (this->hasException())
        	        {
        	            goto ruleoptEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(LATEX, &FOLLOW_LATEX_in_opt146);
        	        if  (this->hasException())
        	        {
        	            goto ruleoptEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(EQ, &FOLLOW_EQ_in_opt148);
        	        if  (this->hasException())
        	        {
        	            goto ruleoptEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_atom_bool_in_opt154);
        	        b=atom_bool();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleoptEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             model_obj.set_option(Model::output_latex, b); 
        	        }


        	         this->matchToken(SEMI, &FOLLOW_SEMI_in_opt158);
        	        if  (this->hasException())
        	        {
        	            goto ruleoptEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 2:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:81:7: OUTPUT LOGF EQ b= atom_bool SEMI
        	    {
        	         this->matchToken(OUTPUT, &FOLLOW_OUTPUT_in_opt166);
        	        if  (this->hasException())
        	        {
        	            goto ruleoptEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(LOGF, &FOLLOW_LOGF_in_opt168);
        	        if  (this->hasException())
        	        {
        	            goto ruleoptEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(EQ, &FOLLOW_EQ_in_opt170);
        	        if  (this->hasException())
        	        {
        	            goto ruleoptEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_atom_bool_in_opt176);
        	        b=atom_bool();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleoptEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             model_obj.set_option(Model::output_logf, b); 
        	        }


        	         this->matchToken(SEMI, &FOLLOW_SEMI_in_opt180);
        	        if  (this->hasException())
        	        {
        	            goto ruleoptEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 3:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:82:7: OUTPUT R EQ b= atom_bool SEMI
        	    {
        	         this->matchToken(OUTPUT, &FOLLOW_OUTPUT_in_opt188);
        	        if  (this->hasException())
        	        {
        	            goto ruleoptEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(R, &FOLLOW_R_in_opt190);
        	        if  (this->hasException())
        	        {
        	            goto ruleoptEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(EQ, &FOLLOW_EQ_in_opt192);
        	        if  (this->hasException())
        	        {
        	            goto ruleoptEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_atom_bool_in_opt198);
        	        b=atom_bool();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleoptEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             model_obj.set_option(Model::output_r, b); 
        	        }


        	         this->matchToken(SEMI, &FOLLOW_SEMI_in_opt202);
        	        if  (this->hasException())
        	        {
        	            goto ruleoptEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 4:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:83:7: OUTPUT R LONG EQ b= atom_bool SEMI
        	    {
        	         this->matchToken(OUTPUT, &FOLLOW_OUTPUT_in_opt210);
        	        if  (this->hasException())
        	        {
        	            goto ruleoptEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(R, &FOLLOW_R_in_opt212);
        	        if  (this->hasException())
        	        {
        	            goto ruleoptEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(LONG, &FOLLOW_LONG_in_opt214);
        	        if  (this->hasException())
        	        {
        	            goto ruleoptEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(EQ, &FOLLOW_EQ_in_opt216);
        	        if  (this->hasException())
        	        {
        	            goto ruleoptEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_atom_bool_in_opt222);
        	        b=atom_bool();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleoptEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             model_obj.set_option(Model::output_r_long, b); 
        	        }


        	         this->matchToken(SEMI, &FOLLOW_SEMI_in_opt226);
        	        if  (this->hasException())
        	        {
        	            goto ruleoptEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 5:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:84:7: OUTPUT LATEX LONG EQ b= atom_bool SEMI
        	    {
        	         this->matchToken(OUTPUT, &FOLLOW_OUTPUT_in_opt234);
        	        if  (this->hasException())
        	        {
        	            goto ruleoptEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(LATEX, &FOLLOW_LATEX_in_opt236);
        	        if  (this->hasException())
        	        {
        	            goto ruleoptEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(LONG, &FOLLOW_LONG_in_opt238);
        	        if  (this->hasException())
        	        {
        	            goto ruleoptEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(EQ, &FOLLOW_EQ_in_opt240);
        	        if  (this->hasException())
        	        {
        	            goto ruleoptEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_atom_bool_in_opt246);
        	        b=atom_bool();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleoptEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             model_obj.set_option(Model::output_latex_long, b); 
        	        }


        	         this->matchToken(SEMI, &FOLLOW_SEMI_in_opt250);
        	        if  (this->hasException())
        	        {
        	            goto ruleoptEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 6:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:85:7: OUTPUT LATEX LANDSCAPE EQ b= atom_bool SEMI
        	    {
        	         this->matchToken(OUTPUT, &FOLLOW_OUTPUT_in_opt258);
        	        if  (this->hasException())
        	        {
        	            goto ruleoptEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(LATEX, &FOLLOW_LATEX_in_opt260);
        	        if  (this->hasException())
        	        {
        	            goto ruleoptEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(LANDSCAPE, &FOLLOW_LANDSCAPE_in_opt262);
        	        if  (this->hasException())
        	        {
        	            goto ruleoptEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(EQ, &FOLLOW_EQ_in_opt264);
        	        if  (this->hasException())
        	        {
        	            goto ruleoptEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_atom_bool_in_opt270);
        	        b=atom_bool();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleoptEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             model_obj.set_option(Model::output_latex_landscape, b); 
        	        }


        	         this->matchToken(SEMI, &FOLLOW_SEMI_in_opt274);
        	        if  (this->hasException())
        	        {
        	            goto ruleoptEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 7:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:86:7: VERBOSE EQ b= atom_bool SEMI
        	    {
        	         this->matchToken(VERBOSE, &FOLLOW_VERBOSE_in_opt282);
        	        if  (this->hasException())
        	        {
        	            goto ruleoptEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(EQ, &FOLLOW_EQ_in_opt284);
        	        if  (this->hasException())
        	        {
        	            goto ruleoptEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_atom_bool_in_opt290);
        	        b=atom_bool();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleoptEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             model_obj.set_option(Model::verbose, b); 
        	        }


        	         this->matchToken(SEMI, &FOLLOW_SEMI_in_opt294);
        	        if  (this->hasException())
        	        {
        	            goto ruleoptEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 8:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:87:7: BACKWARDCOMP EQ b= atom_bool SEMI
        	    {
        	         this->matchToken(BACKWARDCOMP, &FOLLOW_BACKWARDCOMP_in_opt302);
        	        if  (this->hasException())
        	        {
        	            goto ruleoptEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(EQ, &FOLLOW_EQ_in_opt304);
        	        if  (this->hasException())
        	        {
        	            goto ruleoptEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_atom_bool_in_opt310);
        	        b=atom_bool();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleoptEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             model_obj.set_option(Model::backwardcomp, b); 
        	        }


        	         this->matchToken(SEMI, &FOLLOW_SEMI_in_opt314);
        	        if  (this->hasException())
        	        {
        	            goto ruleoptEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleoptEx; /* Prevent compiler warnings */
    ruleoptEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end opt */

/**
 * $ANTLR start sets
 * ../gEcon_CURRENT/src//parser/gEcon.g:90:1: sets : SETS LBRACE ( seteq | setvalid )+ RBRACE ( SEMI )? ;
 */
void
gEconParser::sets()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // ../gEcon_CURRENT/src//parser/gEcon.g:91:5: ( SETS LBRACE ( seteq | setvalid )+ RBRACE ( SEMI )? )
        // ../gEcon_CURRENT/src//parser/gEcon.g:91:7: SETS LBRACE ( seteq | setvalid )+ RBRACE ( SEMI )?
        {
             this->matchToken(SETS, &FOLLOW_SETS_in_sets331);
            if  (this->hasException())
            {
                goto rulesetsEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(LBRACE, &FOLLOW_LBRACE_in_sets333);
            if  (this->hasException())
            {
                goto rulesetsEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            // ../gEcon_CURRENT/src//parser/gEcon.g:91:19: ( seteq | setvalid )+
            {
                int cnt8=0;

                for (;;)
                {
                    int alt8=3;
            	switch ( this->LA(1) )
            	{
            	case ID:
            		{
            			switch ( this->LA(2) )
            			{
            			case EQ:
            				{
            					alt8=1;
            				}
            			    break;
            			case AND:
            			case BACKSLASH:
            			case DEQ:
            			case LEQ:
            			case NEQ:
            			case OR:
            			case TILDE:
            				{
            					alt8=2;
            				}
            			    break;

            			}

            		}
            	    break;
            	case SLETTER:
            		{
            			switch ( this->LA(2) )
            			{
            			case EQ:
            				{
            					alt8=1;
            				}
            			    break;
            			case AND:
            			case BACKSLASH:
            			case DEQ:
            			case LEQ:
            			case NEQ:
            			case OR:
            			case TILDE:
            				{
            					alt8=2;
            				}
            			    break;

            			}

            		}
            	    break;
            	case CLETTER:
            		{
            			switch ( this->LA(2) )
            			{
            			case EQ:
            				{
            					alt8=1;
            				}
            			    break;
            			case AND:
            			case BACKSLASH:
            			case DEQ:
            			case LEQ:
            			case NEQ:
            			case OR:
            			case TILDE:
            				{
            					alt8=2;
            				}
            			    break;

            			}

            		}
            	    break;
            	case OUTPUT:
            		{
            			switch ( this->LA(2) )
            			{
            			case EQ:
            				{
            					alt8=1;
            				}
            			    break;
            			case AND:
            			case BACKSLASH:
            			case DEQ:
            			case LEQ:
            			case NEQ:
            			case OR:
            			case TILDE:
            				{
            					alt8=2;
            				}
            			    break;

            			}

            		}
            	    break;
            	case R:
            		{
            			switch ( this->LA(2) )
            			{
            			case EQ:
            				{
            					alt8=1;
            				}
            			    break;
            			case AND:
            			case BACKSLASH:
            			case DEQ:
            			case LEQ:
            			case NEQ:
            			case OR:
            			case TILDE:
            				{
            					alt8=2;
            				}
            			    break;

            			}

            		}
            	    break;
            	case LATEX:
            		{
            			switch ( this->LA(2) )
            			{
            			case EQ:
            				{
            					alt8=1;
            				}
            			    break;
            			case AND:
            			case BACKSLASH:
            			case DEQ:
            			case LEQ:
            			case NEQ:
            			case OR:
            			case TILDE:
            				{
            					alt8=2;
            				}
            			    break;

            			}

            		}
            	    break;
            	case LANDSCAPE:
            		{
            			switch ( this->LA(2) )
            			{
            			case EQ:
            				{
            					alt8=1;
            				}
            			    break;
            			case AND:
            			case BACKSLASH:
            			case DEQ:
            			case LEQ:
            			case NEQ:
            			case OR:
            			case TILDE:
            				{
            					alt8=2;
            				}
            			    break;

            			}

            		}
            	    break;
            	case LOGF:
            		{
            			switch ( this->LA(2) )
            			{
            			case EQ:
            				{
            					alt8=1;
            				}
            			    break;
            			case AND:
            			case BACKSLASH:
            			case DEQ:
            			case LEQ:
            			case NEQ:
            			case OR:
            			case TILDE:
            				{
            					alt8=2;
            				}
            			    break;

            			}

            		}
            	    break;
            	case LONG:
            		{
            			switch ( this->LA(2) )
            			{
            			case EQ:
            				{
            					alt8=1;
            				}
            			    break;
            			case AND:
            			case BACKSLASH:
            			case DEQ:
            			case LEQ:
            			case NEQ:
            			case OR:
            			case TILDE:
            				{
            					alt8=2;
            				}
            			    break;

            			}

            		}
            	    break;
            	case SHORT:
            		{
            			switch ( this->LA(2) )
            			{
            			case EQ:
            				{
            					alt8=1;
            				}
            			    break;
            			case AND:
            			case BACKSLASH:
            			case DEQ:
            			case LEQ:
            			case NEQ:
            			case OR:
            			case TILDE:
            				{
            					alt8=2;
            				}
            			    break;

            			}

            		}
            	    break;
            	case BTRUE:
            		{
            			switch ( this->LA(2) )
            			{
            			case EQ:
            				{
            					alt8=1;
            				}
            			    break;
            			case AND:
            			case BACKSLASH:
            			case DEQ:
            			case LEQ:
            			case NEQ:
            			case OR:
            			case TILDE:
            				{
            					alt8=2;
            				}
            			    break;

            			}

            		}
            	    break;
            	case BFALSE:
            		{
            			switch ( this->LA(2) )
            			{
            			case EQ:
            				{
            					alt8=1;
            				}
            			    break;
            			case AND:
            			case BACKSLASH:
            			case DEQ:
            			case LEQ:
            			case NEQ:
            			case OR:
            			case TILDE:
            				{
            					alt8=2;
            				}
            			    break;

            			}

            		}
            	    break;
            	case SS:
            		{
            			switch ( this->LA(2) )
            			{
            			case EQ:
            				{
            					alt8=1;
            				}
            			    break;
            			case AND:
            			case BACKSLASH:
            			case DEQ:
            			case LEQ:
            			case NEQ:
            			case OR:
            			case TILDE:
            				{
            					alt8=2;
            				}
            			    break;

            			}

            		}
            	    break;
            	case VERBOSE:
            		{
            			switch ( this->LA(2) )
            			{
            			case EQ:
            				{
            					alt8=1;
            				}
            			    break;
            			case AND:
            			case BACKSLASH:
            			case DEQ:
            			case LEQ:
            			case NEQ:
            			case OR:
            			case TILDE:
            				{
            					alt8=2;
            				}
            			    break;

            			}

            		}
            	    break;
            	case BACKWARDCOMP:
            		{
            			switch ( this->LA(2) )
            			{
            			case EQ:
            				{
            					alt8=1;
            				}
            			    break;
            			case AND:
            			case BACKSLASH:
            			case DEQ:
            			case LEQ:
            			case NEQ:
            			case OR:
            			case TILDE:
            				{
            					alt8=2;
            				}
            			    break;

            			}

            		}
            	    break;
            	case LBRACE:
            	case LPAREN:
            	case QUOTE:
            	case ZERO:
            		{
            			alt8=2;
            		}
            	    break;

            	}

            	switch (alt8)
            	{
            	    case 1:
            	        // ../gEcon_CURRENT/src//parser/gEcon.g:91:20: seteq
            	        {
            	            this->followPush(FOLLOW_seteq_in_sets336);
            	            seteq();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulesetsEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return ;
            	            }


            	        }
            	        break;
            	    case 2:
            	        // ../gEcon_CURRENT/src//parser/gEcon.g:91:28: setvalid
            	        {
            	            this->followPush(FOLLOW_setvalid_in_sets340);
            	            setvalid();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulesetsEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return ;
            	            }


            	        }
            	        break;

            	    default:

            		if ( cnt8 >= 1 )
            		{
            		    goto loop8;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return ;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< gEconParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto rulesetsEx;
            	}
            	cnt8++;
                }
                loop8: ;	/* Jump to here if this rule does not match */
            }

             this->matchToken(RBRACE, &FOLLOW_RBRACE_in_sets344);
            if  (this->hasException())
            {
                goto rulesetsEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            // ../gEcon_CURRENT/src//parser/gEcon.g:91:46: ( SEMI )?
            {
                int alt9=2;
                switch ( this->LA(1) )
                {
                    case SEMI:
                    	{
                    		alt9=1;
                    	}
                        break;
                }

                switch (alt9)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src//parser/gEcon.g:91:46: SEMI
            	    {
            	         this->matchToken(SEMI, &FOLLOW_SEMI_in_sets346);
            	        if  (this->hasException())
            	        {
            	            goto rulesetsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulesetsEx; /* Prevent compiler warnings */
    rulesetsEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end sets */

/**
 * $ANTLR start seteq
 * ../gEcon_CURRENT/src//parser/gEcon.g:94:1: seteq : ids= id_str EQ s= setex SEMI ;
 */
void
gEconParser::seteq()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    std::pair<std::string, int> ids;
    typedef	std::pair<std::string, int> RETURN_TYPE_ids;

    idx_set s;
    typedef	idx_set RETURN_TYPE_s;

    /* Initialize rule variables
     */


 
    {
        // ../gEcon_CURRENT/src//parser/gEcon.g:95:5: (ids= id_str EQ s= setex SEMI )
        // ../gEcon_CURRENT/src//parser/gEcon.g:95:7: ids= id_str EQ s= setex SEMI
        {
            this->followPush(FOLLOW_id_str_in_seteq368);
            ids=id_str();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleseteqEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(EQ, &FOLLOW_EQ_in_seteq370);
            if  (this->hasException())
            {
                goto ruleseteqEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            this->followPush(FOLLOW_setex_in_seteq376);
            s=setex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleseteqEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(SEMI, &FOLLOW_SEMI_in_seteq378);
            if  (this->hasException())
            {
                goto ruleseteqEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            if ( this->get_backtracking()==0 )
            {

                        if (!model_obj.add_set(idx_set(s, ids.first)))
                            errors.push_back("set \"" + ids.first + "\" already declared"
                                + "; error near line " + num2str(ids.second));
                      
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleseteqEx; /* Prevent compiler warnings */
    ruleseteqEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end seteq */

/**
 * $ANTLR start setvalid
 * ../gEcon_CURRENT/src//parser/gEcon.g:102:1: setvalid : a= setex ( LEQ | DEQ | NEQ ) b= setex QUESTION ;
 */
void
gEconParser::setvalid()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    const CommonTokenType*    QUESTION1;
    idx_set a;
    typedef	idx_set RETURN_TYPE_a;

    idx_set b;
    typedef	idx_set RETURN_TYPE_b;

    /* Initialize rule variables
     */


        bool ok;
        int test;

    QUESTION1       = NULL;


 
    {
        // ../gEcon_CURRENT/src//parser/gEcon.g:107:5: (a= setex ( LEQ | DEQ | NEQ ) b= setex QUESTION )
        // ../gEcon_CURRENT/src//parser/gEcon.g:107:7: a= setex ( LEQ | DEQ | NEQ ) b= setex QUESTION
        {
            this->followPush(FOLLOW_setex_in_setvalid406);
            a=setex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesetvalidEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            // ../gEcon_CURRENT/src//parser/gEcon.g:107:17: ( LEQ | DEQ | NEQ )
            {
                int alt10=3;
                switch ( this->LA(1) )
                {
                case LEQ:
                	{
                		alt10=1;
                	}
                    break;
                case DEQ:
                	{
                		alt10=2;
                	}
                    break;
                case NEQ:
                	{
                		alt10=3;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 10 );
                    ex->set_state( 0 );


                    goto rulesetvalidEx;

                }

                switch (alt10)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src//parser/gEcon.g:107:18: LEQ
            	    {
            	         this->matchToken(LEQ, &FOLLOW_LEQ_in_setvalid409);
            	        if  (this->hasException())
            	        {
            	            goto rulesetvalidEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             test = 1; 
            	        }


            	    }
            	    break;
            	case 2:
            	    // ../gEcon_CURRENT/src//parser/gEcon.g:107:38: DEQ
            	    {
            	         this->matchToken(DEQ, &FOLLOW_DEQ_in_setvalid415);
            	        if  (this->hasException())
            	        {
            	            goto rulesetvalidEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             test = 2; 
            	        }


            	    }
            	    break;
            	case 3:
            	    // ../gEcon_CURRENT/src//parser/gEcon.g:107:58: NEQ
            	    {
            	         this->matchToken(NEQ, &FOLLOW_NEQ_in_setvalid421);
            	        if  (this->hasException())
            	        {
            	            goto rulesetvalidEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             test = 3; 
            	        }


            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_setex_in_setvalid430);
            b=setex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesetvalidEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            QUESTION1 =  this->matchToken(QUESTION, &FOLLOW_QUESTION_in_setvalid432);
            if  (this->hasException())
            {
                goto rulesetvalidEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            if ( this->get_backtracking()==0 )
            {

                        switch (test) {
                            case 1: ok = (a <= b); break;
                            case 2: ok = (a == b); break;
                            case 3: ok = (a != b); break;
                        }
                        if (!ok) {
                            std::string mes = "index set test failed (";
                            switch (test) {
                                case 1: mes += "lhs is not a subset of rhs"; break;
                                case 2: mes += "sets are not equal"; break;
                                case 3: mes += "sets are equal"; break;
                            }
                            mes += ") near line " + num2str((QUESTION1->get_line()));
                            model_obj.error(mes);
                        }
                      
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulesetvalidEx; /* Prevent compiler warnings */
    rulesetvalidEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end setvalid */

/**
 * $ANTLR start setex
 * ../gEcon_CURRENT/src//parser/gEcon.g:126:1: setex returns [idx_set is] : s= setex_add ;
 */
idx_set
gEconParser::setex()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    idx_set is;


    idx_set s;
    typedef	idx_set RETURN_TYPE_s;

    /* Initialize rule variables
     */


 
    {
        // ../gEcon_CURRENT/src//parser/gEcon.g:127:5: (s= setex_add )
        // ../gEcon_CURRENT/src//parser/gEcon.g:127:7: s= setex_add
        {
            this->followPush(FOLLOW_setex_add_in_setex459);
            s=setex_add();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesetexEx;
            }
            if (this->hasFailed())
            {
                return is;
            }


            if ( this->get_backtracking()==0 )
            {
                 is= s;
                 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulesetexEx; /* Prevent compiler warnings */
    rulesetexEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return is;
}
/* $ANTLR end setex */

/**
 * $ANTLR start setex_add
 * ../gEcon_CURRENT/src//parser/gEcon.g:130:1: setex_add returns [idx_set is] : a= setex_intersect ( ( OR b= setex_intersect ) | ( BACKSLASH b= setex_intersect ) )* ;
 */
idx_set
gEconParser::setex_add()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    idx_set is;


    idx_set a;
    typedef	idx_set RETURN_TYPE_a;

    idx_set b;
    typedef	idx_set RETURN_TYPE_b;

    /* Initialize rule variables
     */


 
    {
        // ../gEcon_CURRENT/src//parser/gEcon.g:131:5: (a= setex_intersect ( ( OR b= setex_intersect ) | ( BACKSLASH b= setex_intersect ) )* )
        // ../gEcon_CURRENT/src//parser/gEcon.g:131:7: a= setex_intersect ( ( OR b= setex_intersect ) | ( BACKSLASH b= setex_intersect ) )*
        {
            this->followPush(FOLLOW_setex_intersect_in_setex_add486);
            a=setex_intersect();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesetex_addEx;
            }
            if (this->hasFailed())
            {
                return is;
            }


            if ( this->get_backtracking()==0 )
            {
                 is= a;
                 
            }


            // ../gEcon_CURRENT/src//parser/gEcon.g:132:9: ( ( OR b= setex_intersect ) | ( BACKSLASH b= setex_intersect ) )*

            for (;;)
            {
                int alt11=3;
                switch ( this->LA(1) )
                {
                case OR:
                	{
                		alt11=1;
                	}
                    break;
                case BACKSLASH:
                	{
                		alt11=2;
                	}
                    break;

                }

                switch (alt11)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src//parser/gEcon.g:132:10: ( OR b= setex_intersect )
            	    {
            	        // ../gEcon_CURRENT/src//parser/gEcon.g:132:10: ( OR b= setex_intersect )
            	        // ../gEcon_CURRENT/src//parser/gEcon.g:132:11: OR b= setex_intersect
            	        {
            	             this->matchToken(OR, &FOLLOW_OR_in_setex_add500);
            	            if  (this->hasException())
            	            {
            	                goto rulesetex_addEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return is;
            	            }


            	            this->followPush(FOLLOW_setex_intersect_in_setex_add506);
            	            b=setex_intersect();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulesetex_addEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return is;
            	            }


            	            if ( this->get_backtracking()==0 )
            	            {
            	                 is= 
            	                is
            	                .set_sum(b);
            	                 
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    // ../gEcon_CURRENT/src//parser/gEcon.g:133:11: ( BACKSLASH b= setex_intersect )
            	    {
            	        // ../gEcon_CURRENT/src//parser/gEcon.g:133:11: ( BACKSLASH b= setex_intersect )
            	        // ../gEcon_CURRENT/src//parser/gEcon.g:133:12: BACKSLASH b= setex_intersect
            	        {
            	             this->matchToken(BACKSLASH, &FOLLOW_BACKSLASH_in_setex_add522);
            	            if  (this->hasException())
            	            {
            	                goto rulesetex_addEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return is;
            	            }


            	            this->followPush(FOLLOW_setex_intersect_in_setex_add528);
            	            b=setex_intersect();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulesetex_addEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return is;
            	            }


            	            if ( this->get_backtracking()==0 )
            	            {
            	                 is= 
            	                is
            	                .set_diff(b);
            	                 
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop11;	/* break out of the loop */
            	    break;
                }
            }
            loop11: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto rulesetex_addEx; /* Prevent compiler warnings */
    rulesetex_addEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return is;
}
/* $ANTLR end setex_add */

/**
 * $ANTLR start setex_intersect
 * ../gEcon_CURRENT/src//parser/gEcon.g:136:1: setex_intersect returns [idx_set is] : a= setex_cat ( AND b= setex_cat )* ;
 */
idx_set
gEconParser::setex_intersect()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    idx_set is;


    idx_set a;
    typedef	idx_set RETURN_TYPE_a;

    idx_set b;
    typedef	idx_set RETURN_TYPE_b;

    /* Initialize rule variables
     */


        a = idx_set("");
        b = idx_set("");


 
    {
        // ../gEcon_CURRENT/src//parser/gEcon.g:141:5: (a= setex_cat ( AND b= setex_cat )* )
        // ../gEcon_CURRENT/src//parser/gEcon.g:141:7: a= setex_cat ( AND b= setex_cat )*
        {
            this->followPush(FOLLOW_setex_cat_in_setex_intersect563);
            a=setex_cat();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesetex_intersectEx;
            }
            if (this->hasFailed())
            {
                return is;
            }


            if ( this->get_backtracking()==0 )
            {
                 is= a;
                 
            }


            // ../gEcon_CURRENT/src//parser/gEcon.g:141:34: ( AND b= setex_cat )*

            for (;;)
            {
                int alt12=2;
                switch ( this->LA(1) )
                {
                case AND:
                	{
                		alt12=1;
                	}
                    break;

                }

                switch (alt12)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src//parser/gEcon.g:141:35: AND b= setex_cat
            	    {
            	         this->matchToken(AND, &FOLLOW_AND_in_setex_intersect568);
            	        if  (this->hasException())
            	        {
            	            goto rulesetex_intersectEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return is;
            	        }


            	        this->followPush(FOLLOW_setex_cat_in_setex_intersect574);
            	        b=setex_cat();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesetex_intersectEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return is;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             is= 
            	            is
            	            .set_intersect(b);
            	             
            	        }


            	    }
            	    break;

            	default:
            	    goto loop12;	/* break out of the loop */
            	    break;
                }
            }
            loop12: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto rulesetex_intersectEx; /* Prevent compiler warnings */
    rulesetex_intersectEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return is;
}
/* $ANTLR end setex_intersect */

/**
 * $ANTLR start setex_cat
 * ../gEcon_CURRENT/src//parser/gEcon.g:144:1: setex_cat returns [idx_set is] : ( QUOTE ( IDU | DIDU |idxp= idx_str ) QUOTE TILDE )? a= setex_atom ( TILDE QUOTE ( UID | UDID |idxs= idx_str ) QUOTE )? ;
 */
idx_set
gEconParser::setex_cat()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    idx_set is;


    const CommonTokenType*    IDU2;
    const CommonTokenType*    DIDU3;
    const CommonTokenType*    UID4;
    const CommonTokenType*    UDID5;
    std::pair<std::string, int> idxp;
    typedef	std::pair<std::string, int> RETURN_TYPE_idxp;

    idx_set a;
    typedef	idx_set RETURN_TYPE_a;

    std::pair<std::string, int> idxs;
    typedef	std::pair<std::string, int> RETURN_TYPE_idxs;

    /* Initialize rule variables
     */


        a = idx_set("");
        std::string pre, suf;

    IDU2       = NULL;
    DIDU3       = NULL;
    UID4       = NULL;
    UDID5       = NULL;


 
    {
        // ../gEcon_CURRENT/src//parser/gEcon.g:149:5: ( ( QUOTE ( IDU | DIDU |idxp= idx_str ) QUOTE TILDE )? a= setex_atom ( TILDE QUOTE ( UID | UDID |idxs= idx_str ) QUOTE )? )
        // ../gEcon_CURRENT/src//parser/gEcon.g:149:7: ( QUOTE ( IDU | DIDU |idxp= idx_str ) QUOTE TILDE )? a= setex_atom ( TILDE QUOTE ( UID | UDID |idxs= idx_str ) QUOTE )?
        {
            // ../gEcon_CURRENT/src//parser/gEcon.g:149:7: ( QUOTE ( IDU | DIDU |idxp= idx_str ) QUOTE TILDE )?
            {
                int alt14=2;
                switch ( this->LA(1) )
                {
                    case QUOTE:
                    	{
                    		alt14=1;
                    	}
                        break;
                }

                switch (alt14)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src//parser/gEcon.g:149:8: QUOTE ( IDU | DIDU |idxp= idx_str ) QUOTE TILDE
            	    {
            	         this->matchToken(QUOTE, &FOLLOW_QUOTE_in_setex_cat605);
            	        if  (this->hasException())
            	        {
            	            goto rulesetex_catEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return is;
            	        }


            	        // ../gEcon_CURRENT/src//parser/gEcon.g:149:14: ( IDU | DIDU |idxp= idx_str )
            	        {
            	            int alt13=3;
            	            switch ( this->LA(1) )
            	            {
            	            case IDU:
            	            	{
            	            		alt13=1;
            	            	}
            	                break;
            	            case DIDU:
            	            	{
            	            		alt13=2;
            	            	}
            	                break;
            	            case BACKWARDCOMP:
            	            case BFALSE:
            	            case BTRUE:
            	            case CLETTER:
            	            case DID:
            	            case E:
            	            case ID:
            	            case INF:
            	            case INT:
            	            case LANDSCAPE:
            	            case LATEX:
            	            case LOGF:
            	            case LONG:
            	            case OUTPUT:
            	            case R:
            	            case SHORT:
            	            case SLETTER:
            	            case SS:
            	            case VERBOSE:
            	            case ZERO:
            	            	{
            	            		alt13=3;
            	            	}
            	                break;

            	            default:
            	                if (this->get_backtracking()>0)
            	                {
            	                    this->set_failedflag( true );
            	                    return is;
            	                }

            	                ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                ex->set_decisionNum( 13 );
            	                ex->set_state( 0 );


            	                goto rulesetex_catEx;

            	            }

            	            switch (alt13)
            	            {
            	        	case 1:
            	        	    // ../gEcon_CURRENT/src//parser/gEcon.g:149:15: IDU
            	        	    {
            	        	        IDU2 =  this->matchToken(IDU, &FOLLOW_IDU_in_setex_cat608);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulesetex_catEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return is;
            	        	        }


            	        	        if ( this->get_backtracking()==0 )
            	        	        {
            	        	             pre = (IDU2->getText()); 
            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // ../gEcon_CURRENT/src//parser/gEcon.g:149:43: DIDU
            	        	    {
            	        	        DIDU3 =  this->matchToken(DIDU, &FOLLOW_DIDU_in_setex_cat615);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulesetex_catEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return is;
            	        	        }


            	        	        if ( this->get_backtracking()==0 )
            	        	        {
            	        	             pre = (DIDU3->getText()); 
            	        	        }


            	        	    }
            	        	    break;
            	        	case 3:
            	        	    // ../gEcon_CURRENT/src//parser/gEcon.g:149:73: idxp= idx_str
            	        	    {
            	        	        this->followPush(FOLLOW_idx_str_in_setex_cat626);
            	        	        idxp=idx_str();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulesetex_catEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return is;
            	        	        }


            	        	        if ( this->get_backtracking()==0 )
            	        	        {
            	        	             pre = idxp.first; 
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	         this->matchToken(QUOTE, &FOLLOW_QUOTE_in_setex_cat631);
            	        if  (this->hasException())
            	        {
            	            goto rulesetex_catEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return is;
            	        }


            	         this->matchToken(TILDE, &FOLLOW_TILDE_in_setex_cat633);
            	        if  (this->hasException())
            	        {
            	            goto rulesetex_catEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return is;
            	        }


            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_setex_atom_in_setex_cat641);
            a=setex_atom();

            this->followPop();
            if  (this->hasException())
            {
                goto rulesetex_catEx;
            }
            if (this->hasFailed())
            {
                return is;
            }


            // ../gEcon_CURRENT/src//parser/gEcon.g:150:7: ( TILDE QUOTE ( UID | UDID |idxs= idx_str ) QUOTE )?
            {
                int alt16=2;
                switch ( this->LA(1) )
                {
                    case TILDE:
                    	{
                    		alt16=1;
                    	}
                        break;
                }

                switch (alt16)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src//parser/gEcon.g:150:8: TILDE QUOTE ( UID | UDID |idxs= idx_str ) QUOTE
            	    {
            	         this->matchToken(TILDE, &FOLLOW_TILDE_in_setex_cat650);
            	        if  (this->hasException())
            	        {
            	            goto rulesetex_catEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return is;
            	        }


            	         this->matchToken(QUOTE, &FOLLOW_QUOTE_in_setex_cat652);
            	        if  (this->hasException())
            	        {
            	            goto rulesetex_catEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return is;
            	        }


            	        // ../gEcon_CURRENT/src//parser/gEcon.g:150:20: ( UID | UDID |idxs= idx_str )
            	        {
            	            int alt15=3;
            	            switch ( this->LA(1) )
            	            {
            	            case UID:
            	            	{
            	            		alt15=1;
            	            	}
            	                break;
            	            case UDID:
            	            	{
            	            		alt15=2;
            	            	}
            	                break;
            	            case BACKWARDCOMP:
            	            case BFALSE:
            	            case BTRUE:
            	            case CLETTER:
            	            case DID:
            	            case E:
            	            case ID:
            	            case INF:
            	            case INT:
            	            case LANDSCAPE:
            	            case LATEX:
            	            case LOGF:
            	            case LONG:
            	            case OUTPUT:
            	            case R:
            	            case SHORT:
            	            case SLETTER:
            	            case SS:
            	            case VERBOSE:
            	            case ZERO:
            	            	{
            	            		alt15=3;
            	            	}
            	                break;

            	            default:
            	                if (this->get_backtracking()>0)
            	                {
            	                    this->set_failedflag( true );
            	                    return is;
            	                }

            	                ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                ex->set_decisionNum( 15 );
            	                ex->set_state( 0 );


            	                goto rulesetex_catEx;

            	            }

            	            switch (alt15)
            	            {
            	        	case 1:
            	        	    // ../gEcon_CURRENT/src//parser/gEcon.g:150:21: UID
            	        	    {
            	        	        UID4 =  this->matchToken(UID, &FOLLOW_UID_in_setex_cat655);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulesetex_catEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return is;
            	        	        }


            	        	        if ( this->get_backtracking()==0 )
            	        	        {
            	        	             suf = (UID4->getText()); 
            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // ../gEcon_CURRENT/src//parser/gEcon.g:150:48: UDID
            	        	    {
            	        	        UDID5 =  this->matchToken(UDID, &FOLLOW_UDID_in_setex_cat661);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulesetex_catEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return is;
            	        	        }


            	        	        if ( this->get_backtracking()==0 )
            	        	        {
            	        	             suf = (UDID5->getText()); 
            	        	        }


            	        	    }
            	        	    break;
            	        	case 3:
            	        	    // ../gEcon_CURRENT/src//parser/gEcon.g:150:77: idxs= idx_str
            	        	    {
            	        	        this->followPush(FOLLOW_idx_str_in_setex_cat671);
            	        	        idxs=idx_str();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulesetex_catEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return is;
            	        	        }


            	        	        if ( this->get_backtracking()==0 )
            	        	        {
            	        	             suf = idxs.first; 
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	         this->matchToken(QUOTE, &FOLLOW_QUOTE_in_setex_cat676);
            	        if  (this->hasException())
            	        {
            	            goto rulesetex_catEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return is;
            	        }


            	    }
            	    break;

                }
            }

            if ( this->get_backtracking()==0 )
            {
                 is= a.prefix(pre).suffix(suf);
                 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulesetex_catEx; /* Prevent compiler warnings */
    rulesetex_catEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return is;
}
/* $ANTLR end setex_cat */

/**
 * $ANTLR start setex_atom
 * ../gEcon_CURRENT/src//parser/gEcon.g:153:1: setex_atom returns [idx_set is] : (a= set | LPAREN a= setex RPAREN );
 */
idx_set
gEconParser::setex_atom()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    idx_set is;


    idx_set a;
    typedef	idx_set RETURN_TYPE_a;

    /* Initialize rule variables
     */


 
    {
        {
            //  ../gEcon_CURRENT/src//parser/gEcon.g:154:5: (a= set | LPAREN a= setex RPAREN )

            ANTLR_UINT32 alt17;

            alt17=2;

            switch ( this->LA(1) )
            {
            case BACKWARDCOMP:
            case BFALSE:
            case BTRUE:
            case CLETTER:
            case ID:
            case LANDSCAPE:
            case LATEX:
            case LBRACE:
            case LOGF:
            case LONG:
            case OUTPUT:
            case R:
            case SHORT:
            case SLETTER:
            case SS:
            case VERBOSE:
            case ZERO:
            	{
            		alt17=1;
            	}
                break;
            case LPAREN:
            	{
            		alt17=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return is;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 17 );
                ex->set_state( 0 );


                goto rulesetex_atomEx;

            }

            switch (alt17)
            {
        	case 1:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:154:7: a= set
        	    {
        	        this->followPush(FOLLOW_set_in_setex_atom705);
        	        a=set();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesetex_atomEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return is;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             is= a;
        	             
        	        }


        	    }
        	    break;
        	case 2:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:155:7: LPAREN a= setex RPAREN
        	    {
        	         this->matchToken(LPAREN, &FOLLOW_LPAREN_in_setex_atom715);
        	        if  (this->hasException())
        	        {
        	            goto rulesetex_atomEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return is;
        	        }


        	        this->followPush(FOLLOW_setex_in_setex_atom721);
        	        a=setex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesetex_atomEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return is;
        	        }


        	         this->matchToken(RPAREN, &FOLLOW_RPAREN_in_setex_atom723);
        	        if  (this->hasException())
        	        {
        	            goto rulesetex_atomEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return is;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             is= a;
        	             
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulesetex_atomEx; /* Prevent compiler warnings */
    rulesetex_atomEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return is;
}
/* $ANTLR end setex_atom */

/**
 * $ANTLR start set
 * ../gEcon_CURRENT/src//parser/gEcon.g:158:1: set returns [idx_set iset] : ( ZERO |ls= list_set |seq= seq_set |is= id_str );
 */
idx_set
gEconParser::set()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    idx_set iset;


    vec_strint ls;
    typedef	vec_strint RETURN_TYPE_ls;

    triplet<bool, unsigned, unsigned> seq;
    typedef	triplet<bool, unsigned, unsigned> RETURN_TYPE_seq;

    std::pair<std::string, int> is;
    typedef	std::pair<std::string, int> RETURN_TYPE_is;

    /* Initialize rule variables
     */


        iset = idx_set("");


 
    {
        {
            //  ../gEcon_CURRENT/src//parser/gEcon.g:162:5: ( ZERO |ls= list_set |seq= seq_set |is= id_str )

            ANTLR_UINT32 alt18;

            alt18=4;

            switch ( this->LA(1) )
            {
            case ZERO:
            	{
            		alt18=1;
            	}
                break;
            case LBRACE:
            	{
            		switch ( this->LA(2) )
            		{
            		case QUOTE:
            			{
            				switch ( this->LA(3) )
            				{
            				case SLETTER:
            					{
            						switch ( this->LA(4) )
            						{
            						case QUOTE:
            							{
            								switch ( this->LA(5) )
            								{
            								case DDOT:
            									{
            										alt18=3;
            									}
            								    break;
            								case COMMA:
            								case RBRACE:
            									{
            										alt18=2;
            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return iset;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 18 );
            								    ex->set_state( 12 );


            								    goto rulesetEx;

            								}

            							}
            						    break;

            						default:
            						    if (this->get_backtracking()>0)
            						    {
            						        this->set_failedflag( true );
            						        return iset;
            						    }

            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 18 );
            						    ex->set_state( 5 );


            						    goto rulesetEx;

            						}

            					}
            				    break;
            				case BACKWARDCOMP:
            				case BFALSE:
            				case BTRUE:
            				case DID:
            				case ID:
            				case INF:
            				case LANDSCAPE:
            				case LATEX:
            				case LOGF:
            				case LONG:
            				case OUTPUT:
            				case SHORT:
            				case SS:
            				case VERBOSE:
            					{
            						alt18=2;
            					}
            				    break;
            				case CLETTER:
            					{
            						switch ( this->LA(4) )
            						{
            						case QUOTE:
            							{
            								switch ( this->LA(5) )
            								{
            								case DDOT:
            									{
            										alt18=3;
            									}
            								    break;
            								case COMMA:
            								case RBRACE:
            									{
            										alt18=2;
            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return iset;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 18 );
            								    ex->set_state( 13 );


            								    goto rulesetEx;

            								}

            							}
            						    break;

            						default:
            						    if (this->get_backtracking()>0)
            						    {
            						        this->set_failedflag( true );
            						        return iset;
            						    }

            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 18 );
            						    ex->set_state( 7 );


            						    goto rulesetEx;

            						}

            					}
            				    break;
            				case R:
            					{
            						switch ( this->LA(4) )
            						{
            						case QUOTE:
            							{
            								switch ( this->LA(5) )
            								{
            								case DDOT:
            									{
            										alt18=3;
            									}
            								    break;
            								case COMMA:
            								case RBRACE:
            									{
            										alt18=2;
            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return iset;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 18 );
            								    ex->set_state( 13 );


            								    goto rulesetEx;

            								}

            							}
            						    break;

            						default:
            						    if (this->get_backtracking()>0)
            						    {
            						        this->set_failedflag( true );
            						        return iset;
            						    }

            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 18 );
            						    ex->set_state( 8 );


            						    goto rulesetEx;

            						}

            					}
            				    break;
            				case E:
            					{
            						switch ( this->LA(4) )
            						{
            						case QUOTE:
            							{
            								switch ( this->LA(5) )
            								{
            								case DDOT:
            									{
            										alt18=3;
            									}
            								    break;
            								case COMMA:
            								case RBRACE:
            									{
            										alt18=2;
            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return iset;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 18 );
            								    ex->set_state( 13 );


            								    goto rulesetEx;

            								}

            							}
            						    break;

            						default:
            						    if (this->get_backtracking()>0)
            						    {
            						        this->set_failedflag( true );
            						        return iset;
            						    }

            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 18 );
            						    ex->set_state( 9 );


            						    goto rulesetEx;

            						}

            					}
            				    break;
            				case ZERO:
            					{
            						switch ( this->LA(4) )
            						{
            						case QUOTE:
            							{
            								switch ( this->LA(5) )
            								{
            								case DDOT:
            									{
            										alt18=3;
            									}
            								    break;
            								case COMMA:
            								case RBRACE:
            									{
            										alt18=2;
            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return iset;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 18 );
            								    ex->set_state( 14 );


            								    goto rulesetEx;

            								}

            							}
            						    break;

            						default:
            						    if (this->get_backtracking()>0)
            						    {
            						        this->set_failedflag( true );
            						        return iset;
            						    }

            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 18 );
            						    ex->set_state( 10 );


            						    goto rulesetEx;

            						}

            					}
            				    break;
            				case INT:
            					{
            						switch ( this->LA(4) )
            						{
            						case QUOTE:
            							{
            								switch ( this->LA(5) )
            								{
            								case DDOT:
            									{
            										alt18=3;
            									}
            								    break;
            								case COMMA:
            								case RBRACE:
            									{
            										alt18=2;
            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return iset;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 18 );
            								    ex->set_state( 14 );


            								    goto rulesetEx;

            								}

            							}
            						    break;

            						default:
            						    if (this->get_backtracking()>0)
            						    {
            						        this->set_failedflag( true );
            						        return iset;
            						    }

            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 18 );
            						    ex->set_state( 11 );


            						    goto rulesetEx;

            						}

            					}
            				    break;

            				default:
            				    if (this->get_backtracking()>0)
            				    {
            				        this->set_failedflag( true );
            				        return iset;
            				    }

            				    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 18 );
            				    ex->set_state( 4 );


            				    goto rulesetEx;

            				}

            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return iset;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 18 );
            		    ex->set_state( 2 );


            		    goto rulesetEx;

            		}

            	}
                break;
            case BACKWARDCOMP:
            case BFALSE:
            case BTRUE:
            case CLETTER:
            case ID:
            case LANDSCAPE:
            case LATEX:
            case LOGF:
            case LONG:
            case OUTPUT:
            case R:
            case SHORT:
            case SLETTER:
            case SS:
            case VERBOSE:
            	{
            		alt18=4;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return iset;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 18 );
                ex->set_state( 0 );


                goto rulesetEx;

            }

            switch (alt18)
            {
        	case 1:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:162:7: ZERO
        	    {
        	         this->matchToken(ZERO, &FOLLOW_ZERO_in_set751);
        	        if  (this->hasException())
        	        {
        	            goto rulesetEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return iset;
        	        }


        	    }
        	    break;
        	case 2:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:163:7: ls= list_set
        	    {
        	        this->followPush(FOLLOW_list_set_in_set763);
        	        ls=list_set();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesetEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return iset;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {

        	                    vec_strint::const_iterator it = ls.begin();
        	                    for (; it != ls.end(); ++it) {
        	                        if (!iset.add(it->first))
        	                            errors.push_back("element \"" + it->first + "\" already present in the set"
        	                                + "; error near line " + num2str(it->second));
        	                    }
        	                  
        	        }


        	    }
        	    break;
        	case 3:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:171:7: seq= seq_set
        	    {
        	        this->followPush(FOLLOW_seq_set_in_set777);
        	        seq=seq_set();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesetEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return iset;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {

        	                    if (seq.first) {
        	                        for (char i = seq.second; i <= (char) seq.third; ++i)
        	                            iset.add(std::string() = i);
        	                    } else {
        	                        for (unsigned i = seq.second; i <= seq.third; ++i)
        	                            iset.add(num2str(i));
        	                    }
        	                  
        	        }


        	    }
        	    break;
        	case 4:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:180:7: is= id_str
        	    {
        	        this->followPush(FOLLOW_id_str_in_set791);
        	        is=id_str();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulesetEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return iset;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {

        	                    if (!model_obj.is_set(is.first))
        	                        model_obj.error("undefined set \"" + is.first + "\" used in expression; error near line "
        	                                        + num2str(is.second));
        	                    iset = model_obj.get_set(is.first);
        	                  
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulesetEx; /* Prevent compiler warnings */
    rulesetEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return iset;
}
/* $ANTLR end set */

/**
 * $ANTLR start list_set
 * ../gEcon_CURRENT/src//parser/gEcon.g:188:1: list_set returns [vec_strint vsi] : LBRACE QUOTE ids= idx_str QUOTE ( COMMA QUOTE ids= idx_str QUOTE )* RBRACE ;
 */
vec_strint
gEconParser::list_set()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    vec_strint vsi;


    std::pair<std::string, int> ids;
    typedef	std::pair<std::string, int> RETURN_TYPE_ids;

    /* Initialize rule variables
     */


 
    {
        // ../gEcon_CURRENT/src//parser/gEcon.g:189:5: ( LBRACE QUOTE ids= idx_str QUOTE ( COMMA QUOTE ids= idx_str QUOTE )* RBRACE )
        // ../gEcon_CURRENT/src//parser/gEcon.g:189:7: LBRACE QUOTE ids= idx_str QUOTE ( COMMA QUOTE ids= idx_str QUOTE )* RBRACE
        {
             this->matchToken(LBRACE, &FOLLOW_LBRACE_in_list_set814);
            if  (this->hasException())
            {
                goto rulelist_setEx;
            }
            if (this->hasFailed())
            {
                return vsi;
            }


             this->matchToken(QUOTE, &FOLLOW_QUOTE_in_list_set816);
            if  (this->hasException())
            {
                goto rulelist_setEx;
            }
            if (this->hasFailed())
            {
                return vsi;
            }


            this->followPush(FOLLOW_idx_str_in_list_set822);
            ids=idx_str();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelist_setEx;
            }
            if (this->hasFailed())
            {
                return vsi;
            }


             this->matchToken(QUOTE, &FOLLOW_QUOTE_in_list_set824);
            if  (this->hasException())
            {
                goto rulelist_setEx;
            }
            if (this->hasFailed())
            {
                return vsi;
            }


            if ( this->get_backtracking()==0 )
            {
                 vsi.push_back(strint(ids.first, ids.second)); 
            }


            // ../gEcon_CURRENT/src//parser/gEcon.g:190:7: ( COMMA QUOTE ids= idx_str QUOTE )*

            for (;;)
            {
                int alt19=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt19=1;
                	}
                    break;

                }

                switch (alt19)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src//parser/gEcon.g:190:8: COMMA QUOTE ids= idx_str QUOTE
            	    {
            	         this->matchToken(COMMA, &FOLLOW_COMMA_in_list_set835);
            	        if  (this->hasException())
            	        {
            	            goto rulelist_setEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return vsi;
            	        }


            	         this->matchToken(QUOTE, &FOLLOW_QUOTE_in_list_set837);
            	        if  (this->hasException())
            	        {
            	            goto rulelist_setEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return vsi;
            	        }


            	        this->followPush(FOLLOW_idx_str_in_list_set843);
            	        ids=idx_str();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulelist_setEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return vsi;
            	        }


            	         this->matchToken(QUOTE, &FOLLOW_QUOTE_in_list_set845);
            	        if  (this->hasException())
            	        {
            	            goto rulelist_setEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return vsi;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             vsi.push_back(strint(ids.first, ids.second)); 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop19;	/* break out of the loop */
            	    break;
                }
            }
            loop19: ; /* Jump out to here if this rule does not match */


             this->matchToken(RBRACE, &FOLLOW_RBRACE_in_list_set851);
            if  (this->hasException())
            {
                goto rulelist_setEx;
            }
            if (this->hasFailed())
            {
                return vsi;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulelist_setEx; /* Prevent compiler warnings */
    rulelist_setEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return vsi;
}
/* $ANTLR end list_set */

/**
 * $ANTLR start seq_set
 * ../gEcon_CURRENT/src//parser/gEcon.g:193:1: seq_set returns [triplet<bool, unsigned, unsigned> seq] : ( LBRACE QUOTE beg= SLETTER QUOTE DDOT QUOTE end= SLETTER QUOTE RBRACE | LBRACE QUOTE begc= capletter QUOTE DDOT QUOTE endc= capletter QUOTE RBRACE | LBRACE QUOTE begi= atom_int QUOTE DDOT QUOTE endi= atom_int QUOTE RBRACE );
 */
triplet<bool, unsigned, unsigned>
gEconParser::seq_set()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    triplet<bool, unsigned, unsigned> seq;


    const CommonTokenType*    beg;
    const CommonTokenType*    end;
    const CommonTokenType*    DDOT6;
    const CommonTokenType*    DDOT7;
    const CommonTokenType*    DDOT8;
    unsigned begc;
    typedef	unsigned RETURN_TYPE_begc;

    unsigned endc;
    typedef	unsigned RETURN_TYPE_endc;

    int begi;
    typedef	int RETURN_TYPE_begi;

    int endi;
    typedef	int RETURN_TYPE_endi;

    /* Initialize rule variables
     */

    beg       = NULL;
    end       = NULL;
    DDOT6       = NULL;
    DDOT7       = NULL;
    DDOT8       = NULL;


 
    {
        {
            //  ../gEcon_CURRENT/src//parser/gEcon.g:194:5: ( LBRACE QUOTE beg= SLETTER QUOTE DDOT QUOTE end= SLETTER QUOTE RBRACE | LBRACE QUOTE begc= capletter QUOTE DDOT QUOTE endc= capletter QUOTE RBRACE | LBRACE QUOTE begi= atom_int QUOTE DDOT QUOTE endi= atom_int QUOTE RBRACE )

            ANTLR_UINT32 alt20;

            alt20=3;

            switch ( this->LA(1) )
            {
            case LBRACE:
            	{
            		switch ( this->LA(2) )
            		{
            		case QUOTE:
            			{
            				switch ( this->LA(3) )
            				{
            				case SLETTER:
            					{
            						alt20=1;
            					}
            				    break;
            				case CLETTER:
            				case E:
            				case R:
            					{
            						alt20=2;
            					}
            				    break;
            				case INT:
            				case ZERO:
            					{
            						alt20=3;
            					}
            				    break;

            				default:
            				    if (this->get_backtracking()>0)
            				    {
            				        this->set_failedflag( true );
            				        return seq;
            				    }

            				    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 20 );
            				    ex->set_state( 2 );


            				    goto ruleseq_setEx;

            				}

            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return seq;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 20 );
            		    ex->set_state( 1 );


            		    goto ruleseq_setEx;

            		}

            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return seq;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 20 );
                ex->set_state( 0 );


                goto ruleseq_setEx;

            }

            switch (alt20)
            {
        	case 1:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:194:7: LBRACE QUOTE beg= SLETTER QUOTE DDOT QUOTE end= SLETTER QUOTE RBRACE
        	    {
        	         this->matchToken(LBRACE, &FOLLOW_LBRACE_in_seq_set872);
        	        if  (this->hasException())
        	        {
        	            goto ruleseq_setEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return seq;
        	        }


        	         this->matchToken(QUOTE, &FOLLOW_QUOTE_in_seq_set874);
        	        if  (this->hasException())
        	        {
        	            goto ruleseq_setEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return seq;
        	        }


        	        beg =  this->matchToken(SLETTER, &FOLLOW_SLETTER_in_seq_set880);
        	        if  (this->hasException())
        	        {
        	            goto ruleseq_setEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return seq;
        	        }


        	         this->matchToken(QUOTE, &FOLLOW_QUOTE_in_seq_set882);
        	        if  (this->hasException())
        	        {
        	            goto ruleseq_setEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return seq;
        	        }


        	        DDOT6 =  this->matchToken(DDOT, &FOLLOW_DDOT_in_seq_set884);
        	        if  (this->hasException())
        	        {
        	            goto ruleseq_setEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return seq;
        	        }


        	         this->matchToken(QUOTE, &FOLLOW_QUOTE_in_seq_set886);
        	        if  (this->hasException())
        	        {
        	            goto ruleseq_setEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return seq;
        	        }


        	        end =  this->matchToken(SLETTER, &FOLLOW_SLETTER_in_seq_set892);
        	        if  (this->hasException())
        	        {
        	            goto ruleseq_setEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return seq;
        	        }


        	         this->matchToken(QUOTE, &FOLLOW_QUOTE_in_seq_set894);
        	        if  (this->hasException())
        	        {
        	            goto ruleseq_setEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return seq;
        	        }


        	         this->matchToken(RBRACE, &FOLLOW_RBRACE_in_seq_set896);
        	        if  (this->hasException())
        	        {
        	            goto ruleseq_setEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return seq;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {

        	                    seq.first = true; seq.second = (beg->getText())[0]; seq.third = (end->getText())[0];
        	                    if (seq.second > seq.third)
        	                        errors.push_back("decreasing sequence of elements in set; error near line "
        	                                         + num2str((DDOT6->get_line())));
        	                  
        	        }


        	    }
        	    break;
        	case 2:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:200:7: LBRACE QUOTE begc= capletter QUOTE DDOT QUOTE endc= capletter QUOTE RBRACE
        	    {
        	         this->matchToken(LBRACE, &FOLLOW_LBRACE_in_seq_set906);
        	        if  (this->hasException())
        	        {
        	            goto ruleseq_setEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return seq;
        	        }


        	         this->matchToken(QUOTE, &FOLLOW_QUOTE_in_seq_set908);
        	        if  (this->hasException())
        	        {
        	            goto ruleseq_setEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return seq;
        	        }


        	        this->followPush(FOLLOW_capletter_in_seq_set914);
        	        begc=capletter();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleseq_setEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return seq;
        	        }


        	         this->matchToken(QUOTE, &FOLLOW_QUOTE_in_seq_set916);
        	        if  (this->hasException())
        	        {
        	            goto ruleseq_setEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return seq;
        	        }


        	        DDOT7 =  this->matchToken(DDOT, &FOLLOW_DDOT_in_seq_set918);
        	        if  (this->hasException())
        	        {
        	            goto ruleseq_setEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return seq;
        	        }


        	         this->matchToken(QUOTE, &FOLLOW_QUOTE_in_seq_set920);
        	        if  (this->hasException())
        	        {
        	            goto ruleseq_setEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return seq;
        	        }


        	        this->followPush(FOLLOW_capletter_in_seq_set926);
        	        endc=capletter();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleseq_setEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return seq;
        	        }


        	         this->matchToken(QUOTE, &FOLLOW_QUOTE_in_seq_set928);
        	        if  (this->hasException())
        	        {
        	            goto ruleseq_setEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return seq;
        	        }


        	         this->matchToken(RBRACE, &FOLLOW_RBRACE_in_seq_set930);
        	        if  (this->hasException())
        	        {
        	            goto ruleseq_setEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return seq;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {

        	                    seq.first = true; seq.second = begc; seq.third = endc;
        	                    if (seq.second > seq.third)
        	                        errors.push_back("decreasing sequence of elements in set; error near line "
        	                                         + num2str((DDOT7->get_line())));
        	                  
        	        }


        	    }
        	    break;
        	case 3:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:206:7: LBRACE QUOTE begi= atom_int QUOTE DDOT QUOTE endi= atom_int QUOTE RBRACE
        	    {
        	         this->matchToken(LBRACE, &FOLLOW_LBRACE_in_seq_set940);
        	        if  (this->hasException())
        	        {
        	            goto ruleseq_setEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return seq;
        	        }


        	         this->matchToken(QUOTE, &FOLLOW_QUOTE_in_seq_set942);
        	        if  (this->hasException())
        	        {
        	            goto ruleseq_setEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return seq;
        	        }


        	        this->followPush(FOLLOW_atom_int_in_seq_set948);
        	        begi=atom_int();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleseq_setEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return seq;
        	        }


        	         this->matchToken(QUOTE, &FOLLOW_QUOTE_in_seq_set950);
        	        if  (this->hasException())
        	        {
        	            goto ruleseq_setEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return seq;
        	        }


        	        DDOT8 =  this->matchToken(DDOT, &FOLLOW_DDOT_in_seq_set952);
        	        if  (this->hasException())
        	        {
        	            goto ruleseq_setEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return seq;
        	        }


        	         this->matchToken(QUOTE, &FOLLOW_QUOTE_in_seq_set954);
        	        if  (this->hasException())
        	        {
        	            goto ruleseq_setEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return seq;
        	        }


        	        this->followPush(FOLLOW_atom_int_in_seq_set960);
        	        endi=atom_int();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleseq_setEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return seq;
        	        }


        	         this->matchToken(QUOTE, &FOLLOW_QUOTE_in_seq_set962);
        	        if  (this->hasException())
        	        {
        	            goto ruleseq_setEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return seq;
        	        }


        	         this->matchToken(RBRACE, &FOLLOW_RBRACE_in_seq_set964);
        	        if  (this->hasException())
        	        {
        	            goto ruleseq_setEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return seq;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {

        	                    seq.first = false; seq.second = begi; seq.third = endi;
        	                    if (seq.second > seq.third)
        	                        errors.push_back("decreasing sequence of elements in set; error near line "
        	                                         + num2str((DDOT8->get_line())));
        	                  
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleseq_setEx; /* Prevent compiler warnings */
    ruleseq_setEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return seq;
}
/* $ANTLR end seq_set */

/**
 * $ANTLR start capletter
 * ../gEcon_CURRENT/src//parser/gEcon.g:214:1: capletter returns [unsigned c] : ( CLETTER | E | R );
 */
unsigned
gEconParser::capletter()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    unsigned c;


    const CommonTokenType*    CLETTER9;

    /* Initialize rule variables
     */


        c= 0;


    CLETTER9       = NULL;


 
    {
        {
            //  ../gEcon_CURRENT/src//parser/gEcon.g:218:5: ( CLETTER | E | R )

            ANTLR_UINT32 alt21;

            alt21=3;

            switch ( this->LA(1) )
            {
            case CLETTER:
            	{
            		alt21=1;
            	}
                break;
            case E:
            	{
            		alt21=2;
            	}
                break;
            case R:
            	{
            		alt21=3;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return c;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 21 );
                ex->set_state( 0 );


                goto rulecapletterEx;

            }

            switch (alt21)
            {
        	case 1:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:218:7: CLETTER
        	    {
        	        CLETTER9 =  this->matchToken(CLETTER, &FOLLOW_CLETTER_in_capletter992);
        	        if  (this->hasException())
        	        {
        	            goto rulecapletterEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return c;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             c= (CLETTER9->getText())[0];
        	             
        	        }


        	    }
        	    break;
        	case 2:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:219:7: E
        	    {
        	         this->matchToken(E, &FOLLOW_E_in_capletter1002);
        	        if  (this->hasException())
        	        {
        	            goto rulecapletterEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return c;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             c= 'E';
        	             
        	        }


        	    }
        	    break;
        	case 3:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:220:7: R
        	    {
        	         this->matchToken(R, &FOLLOW_R_in_capletter1012);
        	        if  (this->hasException())
        	        {
        	            goto rulecapletterEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return c;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             c= 'R';
        	             
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulecapletterEx; /* Prevent compiler warnings */
    rulecapletterEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return c;
}
/* $ANTLR end capletter */

/**
 * $ANTLR start tryreduce
 * ../gEcon_CURRENT/src//parser/gEcon.g:224:1: tryreduce : TRYREDUCE LBRACE lv= list_var RBRACE ( SEMI )? ;
 */
void
gEconParser::tryreduce()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    vec_exint lv;
    typedef	vec_exint RETURN_TYPE_lv;

    /* Initialize rule variables
     */


 
    {
        // ../gEcon_CURRENT/src//parser/gEcon.g:225:5: ( TRYREDUCE LBRACE lv= list_var RBRACE ( SEMI )? )
        // ../gEcon_CURRENT/src//parser/gEcon.g:225:7: TRYREDUCE LBRACE lv= list_var RBRACE ( SEMI )?
        {
             this->matchToken(TRYREDUCE, &FOLLOW_TRYREDUCE_in_tryreduce1032);
            if  (this->hasException())
            {
                goto ruletryreduceEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(LBRACE, &FOLLOW_LBRACE_in_tryreduce1034);
            if  (this->hasException())
            {
                goto ruletryreduceEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            this->followPush(FOLLOW_list_var_in_tryreduce1040);
            lv=list_var();

            this->followPop();
            if  (this->hasException())
            {
                goto ruletryreduceEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            if ( this->get_backtracking()==0 )
            {
                 model_obj.add_red_vars(lv); 
            }


             this->matchToken(RBRACE, &FOLLOW_RBRACE_in_tryreduce1044);
            if  (this->hasException())
            {
                goto ruletryreduceEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            // ../gEcon_CURRENT/src//parser/gEcon.g:225:77: ( SEMI )?
            {
                int alt22=2;
                switch ( this->LA(1) )
                {
                    case SEMI:
                    	{
                    		alt22=1;
                    	}
                        break;
                }

                switch (alt22)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src//parser/gEcon.g:225:77: SEMI
            	    {
            	         this->matchToken(SEMI, &FOLLOW_SEMI_in_tryreduce1046);
            	        if  (this->hasException())
            	        {
            	            goto ruletryreduceEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruletryreduceEx; /* Prevent compiler warnings */
    ruletryreduceEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end tryreduce */

/**
 * $ANTLR start block
 * ../gEcon_CURRENT/src//parser/gEcon.g:229:1: block : BLOCK lie= list_indexing_ex ids= id_str LBRACE ( block_definitions )? ( block_controls block_objective ( block_constraints )? ( block_identities )? | block_identities ) ( block_shocks )? ( block_calibr )? RBRACE ( SEMI )? ;
 */
void
gEconParser::block()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    vec_idx_ex lie;
    typedef	vec_idx_ex RETURN_TYPE_lie;

    std::pair<std::string, int> ids;
    typedef	std::pair<std::string, int> RETURN_TYPE_ids;

    /* Initialize rule variables
     */


 
    {
        // ../gEcon_CURRENT/src//parser/gEcon.g:230:5: ( BLOCK lie= list_indexing_ex ids= id_str LBRACE ( block_definitions )? ( block_controls block_objective ( block_constraints )? ( block_identities )? | block_identities ) ( block_shocks )? ( block_calibr )? RBRACE ( SEMI )? )
        // ../gEcon_CURRENT/src//parser/gEcon.g:230:7: BLOCK lie= list_indexing_ex ids= id_str LBRACE ( block_definitions )? ( block_controls block_objective ( block_constraints )? ( block_identities )? | block_identities ) ( block_shocks )? ( block_calibr )? RBRACE ( SEMI )?
        {
             this->matchToken(BLOCK, &FOLLOW_BLOCK_in_block1065);
            if  (this->hasException())
            {
                goto ruleblockEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            this->followPush(FOLLOW_list_indexing_ex_in_block1071);
            lie=list_indexing_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleblockEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            this->followPush(FOLLOW_id_str_in_block1083);
            ids=id_str();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleblockEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            if ( this->get_backtracking()==0 )
            {

                        if (model_obj.block_declared(ids.first)) {
                            errors.push_back("block \"" + ids.first + "\" already declared"
                                + "; error near line " + num2str(ids.second));
                            return;
                        }
                        else model_obj.add_block(ids.first, ids.second, lie[0], lie[1]);
                      
            }


             this->matchToken(LBRACE, &FOLLOW_LBRACE_in_block1093);
            if  (this->hasException())
            {
                goto ruleblockEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            // ../gEcon_CURRENT/src//parser/gEcon.g:240:9: ( block_definitions )?
            {
                int alt23=2;
                switch ( this->LA(1) )
                {
                    case DEFS:
                    	{
                    		alt23=1;
                    	}
                        break;
                }

                switch (alt23)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src//parser/gEcon.g:240:9: block_definitions
            	    {
            	        this->followPush(FOLLOW_block_definitions_in_block1103);
            	        block_definitions();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleblockEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

            // ../gEcon_CURRENT/src//parser/gEcon.g:241:9: ( block_controls block_objective ( block_constraints )? ( block_identities )? | block_identities )
            {
                int alt26=2;
                switch ( this->LA(1) )
                {
                case CONTROLS:
                	{
                		alt26=1;
                	}
                    break;
                case IDS:
                	{
                		alt26=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 26 );
                    ex->set_state( 0 );


                    goto ruleblockEx;

                }

                switch (alt26)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src//parser/gEcon.g:241:10: block_controls block_objective ( block_constraints )? ( block_identities )?
            	    {
            	        this->followPush(FOLLOW_block_controls_in_block1115);
            	        block_controls();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleblockEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        this->followPush(FOLLOW_block_objective_in_block1117);
            	        block_objective();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleblockEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        // ../gEcon_CURRENT/src//parser/gEcon.g:241:41: ( block_constraints )?
            	        {
            	            int alt24=2;
            	            switch ( this->LA(1) )
            	            {
            	                case CONSTRAINTS:
            	                	{
            	                		alt24=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt24)
            	            {
            	        	case 1:
            	        	    // ../gEcon_CURRENT/src//parser/gEcon.g:241:42: block_constraints
            	        	    {
            	        	        this->followPush(FOLLOW_block_constraints_in_block1120);
            	        	        block_constraints();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleblockEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return ;
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        // ../gEcon_CURRENT/src//parser/gEcon.g:241:62: ( block_identities )?
            	        {
            	            int alt25=2;
            	            switch ( this->LA(1) )
            	            {
            	                case IDS:
            	                	{
            	                		alt25=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt25)
            	            {
            	        	case 1:
            	        	    // ../gEcon_CURRENT/src//parser/gEcon.g:241:63: block_identities
            	        	    {
            	        	        this->followPush(FOLLOW_block_identities_in_block1125);
            	        	        block_identities();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleblockEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return ;
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;
            	case 2:
            	    // ../gEcon_CURRENT/src//parser/gEcon.g:242:11: block_identities
            	    {
            	        this->followPush(FOLLOW_block_identities_in_block1139);
            	        block_identities();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleblockEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

            // ../gEcon_CURRENT/src//parser/gEcon.g:243:9: ( block_shocks )?
            {
                int alt27=2;
                switch ( this->LA(1) )
                {
                    case SHOCKS:
                    	{
                    		alt27=1;
                    	}
                        break;
                }

                switch (alt27)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src//parser/gEcon.g:243:9: block_shocks
            	    {
            	        this->followPush(FOLLOW_block_shocks_in_block1150);
            	        block_shocks();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleblockEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

            // ../gEcon_CURRENT/src//parser/gEcon.g:244:9: ( block_calibr )?
            {
                int alt28=2;
                switch ( this->LA(1) )
                {
                    case CALIBR:
                    	{
                    		alt28=1;
                    	}
                        break;
                }

                switch (alt28)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src//parser/gEcon.g:244:9: block_calibr
            	    {
            	        this->followPush(FOLLOW_block_calibr_in_block1161);
            	        block_calibr();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleblockEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(RBRACE, &FOLLOW_RBRACE_in_block1170);
            if  (this->hasException())
            {
                goto ruleblockEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            // ../gEcon_CURRENT/src//parser/gEcon.g:245:14: ( SEMI )?
            {
                int alt29=2;
                switch ( this->LA(1) )
                {
                    case SEMI:
                    	{
                    		alt29=1;
                    	}
                        break;
                }

                switch (alt29)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src//parser/gEcon.g:245:14: SEMI
            	    {
            	         this->matchToken(SEMI, &FOLLOW_SEMI_in_block1172);
            	        if  (this->hasException())
            	        {
            	            goto ruleblockEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleblockEx; /* Prevent compiler warnings */
    ruleblockEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end block */

/**
 * $ANTLR start block_definitions
 * ../gEcon_CURRENT/src//parser/gEcon.g:248:1: block_definitions : DEFS LBRACE ( definition )+ RBRACE ( SEMI )? ;
 */
void
gEconParser::block_definitions()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // ../gEcon_CURRENT/src//parser/gEcon.g:249:5: ( DEFS LBRACE ( definition )+ RBRACE ( SEMI )? )
        // ../gEcon_CURRENT/src//parser/gEcon.g:249:7: DEFS LBRACE ( definition )+ RBRACE ( SEMI )?
        {
             this->matchToken(DEFS, &FOLLOW_DEFS_in_block_definitions1190);
            if  (this->hasException())
            {
                goto ruleblock_definitionsEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(LBRACE, &FOLLOW_LBRACE_in_block_definitions1192);
            if  (this->hasException())
            {
                goto ruleblock_definitionsEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            // ../gEcon_CURRENT/src//parser/gEcon.g:249:19: ( definition )+
            {
                int cnt30=0;

                for (;;)
                {
                    int alt30=2;
            	switch ( this->LA(1) )
            	{
            	case BACKWARDCOMP:
            	case BFALSE:
            	case BTRUE:
            	case CLETTER:
            	case ID:
            	case LANDSCAPE:
            	case LATEX:
            	case LOGF:
            	case LONG:
            	case OUTPUT:
            	case R:
            	case SHORT:
            	case SLETTER:
            	case SS:
            	case VERBOSE:
            		{
            			alt30=1;
            		}
            	    break;

            	}

            	switch (alt30)
            	{
            	    case 1:
            	        // ../gEcon_CURRENT/src//parser/gEcon.g:249:19: definition
            	        {
            	            this->followPush(FOLLOW_definition_in_block_definitions1194);
            	            definition();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleblock_definitionsEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return ;
            	            }


            	        }
            	        break;

            	    default:

            		if ( cnt30 >= 1 )
            		{
            		    goto loop30;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return ;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< gEconParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto ruleblock_definitionsEx;
            	}
            	cnt30++;
                }
                loop30: ;	/* Jump to here if this rule does not match */
            }

             this->matchToken(RBRACE, &FOLLOW_RBRACE_in_block_definitions1197);
            if  (this->hasException())
            {
                goto ruleblock_definitionsEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            // ../gEcon_CURRENT/src//parser/gEcon.g:249:38: ( SEMI )?
            {
                int alt31=2;
                switch ( this->LA(1) )
                {
                    case SEMI:
                    	{
                    		alt31=1;
                    	}
                        break;
                }

                switch (alt31)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src//parser/gEcon.g:249:38: SEMI
            	    {
            	         this->matchToken(SEMI, &FOLLOW_SEMI_in_block_definitions1199);
            	        if  (this->hasException())
            	        {
            	            goto ruleblock_definitionsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleblock_definitionsEx; /* Prevent compiler warnings */
    ruleblock_definitionsEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end block_definitions */

/**
 * $ANTLR start definition
 * ../gEcon_CURRENT/src//parser/gEcon.g:252:1: definition : (lhs= atom_id_t EQ rhs= expr SEMI |lhs= atom_id_nt EQ rhs= expr SEMI );
 */
void
gEconParser::definition()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    const CommonTokenType*    SEMI10;
    const CommonTokenType*    SEMI11;
    ex lhs;
    typedef	ex RETURN_TYPE_lhs;

    ex rhs;
    typedef	ex RETURN_TYPE_rhs;

    /* Initialize rule variables
     */

    SEMI10       = NULL;
    SEMI11       = NULL;


 
    {
        {
            //  ../gEcon_CURRENT/src//parser/gEcon.g:253:5: (lhs= atom_id_t EQ rhs= expr SEMI |lhs= atom_id_nt EQ rhs= expr SEMI )

            ANTLR_UINT32 alt32;

            alt32=2;

            alt32 = cdfa32.predict(this, this->get_rec(), this->get_istream(), cdfa32 );
            if  (this->hasException())
            {
                goto ruledefinitionEx;
            }
            if (this->hasFailed())
            {
                return ;
            }

            switch (alt32)
            {
        	case 1:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:253:7: lhs= atom_id_t EQ rhs= expr SEMI
        	    {
        	        this->followPush(FOLLOW_atom_id_t_in_definition1221);
        	        lhs=atom_id_t();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruledefinitionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(EQ, &FOLLOW_EQ_in_definition1223);
        	        if  (this->hasException())
        	        {
        	            goto ruledefinitionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_expr_in_definition1229);
        	        rhs=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruledefinitionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        SEMI10 =  this->matchToken(SEMI, &FOLLOW_SEMI_in_definition1231);
        	        if  (this->hasException())
        	        {
        	            goto ruledefinitionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             model_obj.add_definition(lhs, rhs, (SEMI10->get_line())); 
        	        }


        	    }
        	    break;
        	case 2:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:255:7: lhs= atom_id_nt EQ rhs= expr SEMI
        	    {
        	        this->followPush(FOLLOW_atom_id_nt_in_definition1253);
        	        lhs=atom_id_nt();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruledefinitionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(EQ, &FOLLOW_EQ_in_definition1255);
        	        if  (this->hasException())
        	        {
        	            goto ruledefinitionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_expr_in_definition1261);
        	        rhs=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruledefinitionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        SEMI11 =  this->matchToken(SEMI, &FOLLOW_SEMI_in_definition1263);
        	        if  (this->hasException())
        	        {
        	            goto ruledefinitionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             model_obj.add_definition(lhs, rhs, (SEMI11->get_line())); 
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruledefinitionEx; /* Prevent compiler warnings */
    ruledefinitionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end definition */

/**
 * $ANTLR start block_controls
 * ../gEcon_CURRENT/src//parser/gEcon.g:259:1: block_controls : CONTROLS LBRACE lv= list_ctr_var RBRACE ( SEMI )? ;
 */
void
gEconParser::block_controls()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    vec_exintstr lv;
    typedef	vec_exintstr RETURN_TYPE_lv;

    /* Initialize rule variables
     */


 
    {
        // ../gEcon_CURRENT/src//parser/gEcon.g:260:5: ( CONTROLS LBRACE lv= list_ctr_var RBRACE ( SEMI )? )
        // ../gEcon_CURRENT/src//parser/gEcon.g:260:7: CONTROLS LBRACE lv= list_ctr_var RBRACE ( SEMI )?
        {
             this->matchToken(CONTROLS, &FOLLOW_CONTROLS_in_block_controls1290);
            if  (this->hasException())
            {
                goto ruleblock_controlsEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(LBRACE, &FOLLOW_LBRACE_in_block_controls1292);
            if  (this->hasException())
            {
                goto ruleblock_controlsEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            this->followPush(FOLLOW_list_ctr_var_in_block_controls1298);
            lv=list_ctr_var();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleblock_controlsEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            if ( this->get_backtracking()==0 )
            {
                 model_obj.add_controls(lv); 
            }


             this->matchToken(RBRACE, &FOLLOW_RBRACE_in_block_controls1302);
            if  (this->hasException())
            {
                goto ruleblock_controlsEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            // ../gEcon_CURRENT/src//parser/gEcon.g:260:80: ( SEMI )?
            {
                int alt33=2;
                switch ( this->LA(1) )
                {
                    case SEMI:
                    	{
                    		alt33=1;
                    	}
                        break;
                }

                switch (alt33)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src//parser/gEcon.g:260:80: SEMI
            	    {
            	         this->matchToken(SEMI, &FOLLOW_SEMI_in_block_controls1304);
            	        if  (this->hasException())
            	        {
            	            goto ruleblock_controlsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleblock_controlsEx; /* Prevent compiler warnings */
    ruleblock_controlsEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end block_controls */

/**
 * $ANTLR start list_ctr_var
 * ../gEcon_CURRENT/src//parser/gEcon.g:263:1: list_ctr_var returns [vec_exintstr listln] : val= list_ctr_var_elem ( COMMA val= list_ctr_var_elem )* SEMI ;
 */
vec_exintstr
gEconParser::list_ctr_var()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    vec_exintstr listln;


    const CommonTokenType*    COMMA12;
    const CommonTokenType*    SEMI13;
    exstr val;
    typedef	exstr RETURN_TYPE_val;

    /* Initialize rule variables
     */


        vec_ex liste;
        std::vector<std::string> lists;
        std::vector<int> listl;

    COMMA12       = NULL;
    SEMI13       = NULL;


 
    {
        // ../gEcon_CURRENT/src//parser/gEcon.g:269:5: (val= list_ctr_var_elem ( COMMA val= list_ctr_var_elem )* SEMI )
        // ../gEcon_CURRENT/src//parser/gEcon.g:269:8: val= list_ctr_var_elem ( COMMA val= list_ctr_var_elem )* SEMI
        {
            this->followPush(FOLLOW_list_ctr_var_elem_in_list_ctr_var1336);
            val=list_ctr_var_elem();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelist_ctr_varEx;
            }
            if (this->hasFailed())
            {
                return listln;
            }


            if ( this->get_backtracking()==0 )
            {
                 liste.push_back(val.first); lists.push_back(val.second); 
            }


            // ../gEcon_CURRENT/src//parser/gEcon.g:270:9: ( COMMA val= list_ctr_var_elem )*

            for (;;)
            {
                int alt34=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt34=1;
                	}
                    break;

                }

                switch (alt34)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src//parser/gEcon.g:270:10: COMMA val= list_ctr_var_elem
            	    {
            	        COMMA12 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_list_ctr_var1349);
            	        if  (this->hasException())
            	        {
            	            goto rulelist_ctr_varEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return listln;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             listl.push_back((COMMA12->get_line())); 
            	        }


            	        this->followPush(FOLLOW_list_ctr_var_elem_in_list_ctr_var1369);
            	        val=list_ctr_var_elem();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulelist_ctr_varEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return listln;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             liste.push_back(val.first); lists.push_back(val.second); 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop34;	/* break out of the loop */
            	    break;
                }
            }
            loop34: ; /* Jump out to here if this rule does not match */


            SEMI13 =  this->matchToken(SEMI, &FOLLOW_SEMI_in_list_ctr_var1383);
            if  (this->hasException())
            {
                goto rulelist_ctr_varEx;
            }
            if (this->hasFailed())
            {
                return listln;
            }


            if ( this->get_backtracking()==0 )
            {
                 listl.push_back((SEMI13->get_line()));
                            unsigned i = 0, n = listl.size();
                            listln.reserve(n);
                            for (; i < n; ++i)
                                listln.push_back(exintstr(liste[i], listl[i], lists[i]));
                        
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulelist_ctr_varEx; /* Prevent compiler warnings */
    rulelist_ctr_varEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return listln;
}
/* $ANTLR end list_ctr_var */

/**
 * $ANTLR start list_ctr_var_elem
 * ../gEcon_CURRENT/src//parser/gEcon.g:280:1: list_ctr_var_elem returns [exstr val] : lie= list_indexing_ex v= atom_id_t ( AT ids= id_str )? ;
 */
exstr
gEconParser::list_ctr_var_elem()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    exstr val;


    vec_idx_ex lie;
    typedef	vec_idx_ex RETURN_TYPE_lie;

    ex v;
    typedef	ex RETURN_TYPE_v;

    std::pair<std::string, int> ids;
    typedef	std::pair<std::string, int> RETURN_TYPE_ids;

    /* Initialize rule variables
     */


        std::string ref;


 
    {
        // ../gEcon_CURRENT/src//parser/gEcon.g:284:5: (lie= list_indexing_ex v= atom_id_t ( AT ids= id_str )? )
        // ../gEcon_CURRENT/src//parser/gEcon.g:284:7: lie= list_indexing_ex v= atom_id_t ( AT ids= id_str )?
        {
            this->followPush(FOLLOW_list_indexing_ex_in_list_ctr_var_elem1415);
            lie=list_indexing_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelist_ctr_var_elemEx;
            }
            if (this->hasFailed())
            {
                return val;
            }


            this->followPush(FOLLOW_atom_id_t_in_list_ctr_var_elem1427);
            v=atom_id_t();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelist_ctr_var_elemEx;
            }
            if (this->hasFailed())
            {
                return val;
            }


            // ../gEcon_CURRENT/src//parser/gEcon.g:285:21: ( AT ids= id_str )?
            {
                int alt35=2;
                switch ( this->LA(1) )
                {
                    case AT:
                    	{
                    		alt35=1;
                    	}
                        break;
                }

                switch (alt35)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src//parser/gEcon.g:285:22: AT ids= id_str
            	    {
            	         this->matchToken(AT, &FOLLOW_AT_in_list_ctr_var_elem1430);
            	        if  (this->hasException())
            	        {
            	            goto rulelist_ctr_var_elemEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return val;
            	        }


            	        this->followPush(FOLLOW_id_str_in_list_ctr_var_elem1436);
            	        ids=id_str();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulelist_ctr_var_elemEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return val;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {

            	                    if (ids.first == model_obj.get_curr_block()) {
            	                        errors.push_back("reference to block \"" + ids.first + "\" within itself"
            	                            + "; error near line " + num2str(ids.second));
            	                    } else if (!model_obj.block_declared(ids.first)) {
            	                        errors.push_back("reference to an undeclared block \"" + ids.first + "\""
            	                            + "; error near line " + num2str(ids.second));
            	                    } else {
            	                        ref = ids.first;
            	                    }
            	                  
            	        }


            	    }
            	    break;

                }
            }

            if ( this->get_backtracking()==0 )
            {

                        val= exstr(ex(lie[0], ex(lie[1], v)), ref);

                      
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulelist_ctr_var_elemEx; /* Prevent compiler warnings */
    rulelist_ctr_var_elemEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return val;
}
/* $ANTLR end list_ctr_var_elem */

/**
 * $ANTLR start block_objective
 * ../gEcon_CURRENT/src//parser/gEcon.g:299:1: block_objective : OBJ LBRACE objective RBRACE ( SEMI )? ;
 */
void
gEconParser::block_objective()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // ../gEcon_CURRENT/src//parser/gEcon.g:300:5: ( OBJ LBRACE objective RBRACE ( SEMI )? )
        // ../gEcon_CURRENT/src//parser/gEcon.g:300:7: OBJ LBRACE objective RBRACE ( SEMI )?
        {
             this->matchToken(OBJ, &FOLLOW_OBJ_in_block_objective1458);
            if  (this->hasException())
            {
                goto ruleblock_objectiveEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(LBRACE, &FOLLOW_LBRACE_in_block_objective1460);
            if  (this->hasException())
            {
                goto ruleblock_objectiveEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            this->followPush(FOLLOW_objective_in_block_objective1462);
            objective();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleblock_objectiveEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(RBRACE, &FOLLOW_RBRACE_in_block_objective1464);
            if  (this->hasException())
            {
                goto ruleblock_objectiveEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            // ../gEcon_CURRENT/src//parser/gEcon.g:300:35: ( SEMI )?
            {
                int alt36=2;
                switch ( this->LA(1) )
                {
                    case SEMI:
                    	{
                    		alt36=1;
                    	}
                        break;
                }

                switch (alt36)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src//parser/gEcon.g:300:35: SEMI
            	    {
            	         this->matchToken(SEMI, &FOLLOW_SEMI_in_block_objective1466);
            	        if  (this->hasException())
            	        {
            	            goto ruleblock_objectiveEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleblock_objectiveEx; /* Prevent compiler warnings */
    ruleblock_objectiveEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end block_objective */

/**
 * $ANTLR start objective
 * ../gEcon_CURRENT/src//parser/gEcon.g:303:1: objective : obj= atom_id_t EQ obj_eq= expr ( COLON lambda= atom_id_t )? SEMI ;
 */
void
gEconParser::objective()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    const CommonTokenType*    SEMI14;
    ex obj;
    typedef	ex RETURN_TYPE_obj;

    ex obj_eq;
    typedef	ex RETURN_TYPE_obj_eq;

    ex lambda;
    typedef	ex RETURN_TYPE_lambda;

    /* Initialize rule variables
     */

    SEMI14       = NULL;


 
    {
        // ../gEcon_CURRENT/src//parser/gEcon.g:304:5: (obj= atom_id_t EQ obj_eq= expr ( COLON lambda= atom_id_t )? SEMI )
        // ../gEcon_CURRENT/src//parser/gEcon.g:304:7: obj= atom_id_t EQ obj_eq= expr ( COLON lambda= atom_id_t )? SEMI
        {
            this->followPush(FOLLOW_atom_id_t_in_objective1488);
            obj=atom_id_t();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleobjectiveEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(EQ, &FOLLOW_EQ_in_objective1490);
            if  (this->hasException())
            {
                goto ruleobjectiveEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            this->followPush(FOLLOW_expr_in_objective1496);
            obj_eq=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleobjectiveEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            // ../gEcon_CURRENT/src//parser/gEcon.g:304:40: ( COLON lambda= atom_id_t )?
            {
                int alt37=2;
                switch ( this->LA(1) )
                {
                    case COLON:
                    	{
                    		alt37=1;
                    	}
                        break;
                }

                switch (alt37)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src//parser/gEcon.g:304:41: COLON lambda= atom_id_t
            	    {
            	         this->matchToken(COLON, &FOLLOW_COLON_in_objective1499);
            	        if  (this->hasException())
            	        {
            	            goto ruleobjectiveEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        this->followPush(FOLLOW_atom_id_t_in_objective1505);
            	        lambda=atom_id_t();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleobjectiveEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

            SEMI14 =  this->matchToken(SEMI, &FOLLOW_SEMI_in_objective1509);
            if  (this->hasException())
            {
                goto ruleobjectiveEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            if ( this->get_backtracking()==0 )
            {
                 model_obj.add_objective(obj, obj_eq, lambda, (SEMI14->get_line())); 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleobjectiveEx; /* Prevent compiler warnings */
    ruleobjectiveEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end objective */

/**
 * $ANTLR start block_constraints
 * ../gEcon_CURRENT/src//parser/gEcon.g:309:1: block_constraints : CONSTRAINTS LBRACE ( constraint )+ RBRACE ( SEMI )? ;
 */
void
gEconParser::block_constraints()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // ../gEcon_CURRENT/src//parser/gEcon.g:310:5: ( CONSTRAINTS LBRACE ( constraint )+ RBRACE ( SEMI )? )
        // ../gEcon_CURRENT/src//parser/gEcon.g:310:7: CONSTRAINTS LBRACE ( constraint )+ RBRACE ( SEMI )?
        {
             this->matchToken(CONSTRAINTS, &FOLLOW_CONSTRAINTS_in_block_constraints1537);
            if  (this->hasException())
            {
                goto ruleblock_constraintsEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(LBRACE, &FOLLOW_LBRACE_in_block_constraints1539);
            if  (this->hasException())
            {
                goto ruleblock_constraintsEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            // ../gEcon_CURRENT/src//parser/gEcon.g:310:26: ( constraint )+
            {
                int cnt38=0;

                for (;;)
                {
                    int alt38=2;
            	switch ( this->LA(1) )
            	{
            	case ACOS:
            	case ASIN:
            	case ATAN:
            	case BACKWARDCOMP:
            	case BFALSE:
            	case BTRUE:
            	case CLETTER:
            	case CONSTRAINTS:
            	case COS:
            	case COSH:
            	case DELTA:
            	case DOUBLE:
            	case E:
            	case EXP:
            	case FOCS:
            	case ID:
            	case IDS:
            	case INT:
            	case LANDSCAPE:
            	case LANGBR:
            	case LATEX:
            	case LOG:
            	case LOGF:
            	case LONG:
            	case LPAREN:
            	case MINUS:
            	case OBJ:
            	case OUTPUT:
            	case PROD:
            	case R:
            	case SHORT:
            	case SIN:
            	case SINH:
            	case SLETTER:
            	case SQRT:
            	case SS:
            	case SUM:
            	case TAN:
            	case TANH:
            	case VERBOSE:
            	case ZERO:
            		{
            			alt38=1;
            		}
            	    break;

            	}

            	switch (alt38)
            	{
            	    case 1:
            	        // ../gEcon_CURRENT/src//parser/gEcon.g:310:26: constraint
            	        {
            	            this->followPush(FOLLOW_constraint_in_block_constraints1541);
            	            constraint();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleblock_constraintsEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return ;
            	            }


            	        }
            	        break;

            	    default:

            		if ( cnt38 >= 1 )
            		{
            		    goto loop38;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return ;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< gEconParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto ruleblock_constraintsEx;
            	}
            	cnt38++;
                }
                loop38: ;	/* Jump to here if this rule does not match */
            }

             this->matchToken(RBRACE, &FOLLOW_RBRACE_in_block_constraints1544);
            if  (this->hasException())
            {
                goto ruleblock_constraintsEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            // ../gEcon_CURRENT/src//parser/gEcon.g:310:45: ( SEMI )?
            {
                int alt39=2;
                switch ( this->LA(1) )
                {
                    case SEMI:
                    	{
                    		alt39=1;
                    	}
                        break;
                }

                switch (alt39)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src//parser/gEcon.g:310:45: SEMI
            	    {
            	         this->matchToken(SEMI, &FOLLOW_SEMI_in_block_constraints1546);
            	        if  (this->hasException())
            	        {
            	            goto ruleblock_constraintsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleblock_constraintsEx; /* Prevent compiler warnings */
    ruleblock_constraintsEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end block_constraints */

/**
 * $ANTLR start constraint
 * ../gEcon_CURRENT/src//parser/gEcon.g:313:1: constraint : (lie= list_indexing_ex lhs= expr EQ rhs= expr ( COLON lambda= atom_id_t )? SEMI |lr= list_ref AT ids= id_str SEMI );
 */
void
gEconParser::constraint()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    const CommonTokenType*    SEMI15;
    vec_idx_ex lie;
    typedef	vec_idx_ex RETURN_TYPE_lie;

    ex lhs;
    typedef	ex RETURN_TYPE_lhs;

    ex rhs;
    typedef	ex RETURN_TYPE_rhs;

    ex lambda;
    typedef	ex RETURN_TYPE_lambda;

    vec_intint lr;
    typedef	vec_intint RETURN_TYPE_lr;

    std::pair<std::string, int> ids;
    typedef	std::pair<std::string, int> RETURN_TYPE_ids;

    /* Initialize rule variables
     */

    SEMI15       = NULL;


 
    {
        {
            //  ../gEcon_CURRENT/src//parser/gEcon.g:314:5: (lie= list_indexing_ex lhs= expr EQ rhs= expr ( COLON lambda= atom_id_t )? SEMI |lr= list_ref AT ids= id_str SEMI )

            ANTLR_UINT32 alt41;

            alt41=2;

            switch ( this->LA(1) )
            {
            case ACOS:
            case ASIN:
            case ATAN:
            case BACKWARDCOMP:
            case BFALSE:
            case BTRUE:
            case CLETTER:
            case COS:
            case COSH:
            case DELTA:
            case DOUBLE:
            case E:
            case EXP:
            case ID:
            case INT:
            case LANDSCAPE:
            case LANGBR:
            case LATEX:
            case LOG:
            case LOGF:
            case LONG:
            case LPAREN:
            case MINUS:
            case OUTPUT:
            case PROD:
            case R:
            case SHORT:
            case SIN:
            case SINH:
            case SLETTER:
            case SQRT:
            case SS:
            case SUM:
            case TAN:
            case TANH:
            case VERBOSE:
            case ZERO:
            	{
            		alt41=1;
            	}
                break;
            case CONSTRAINTS:
            case FOCS:
            case IDS:
            case OBJ:
            	{
            		alt41=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 41 );
                ex->set_state( 0 );


                goto ruleconstraintEx;

            }

            switch (alt41)
            {
        	case 1:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:314:7: lie= list_indexing_ex lhs= expr EQ rhs= expr ( COLON lambda= atom_id_t )? SEMI
        	    {
        	        this->followPush(FOLLOW_list_indexing_ex_in_constraint1568);
        	        lie=list_indexing_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleconstraintEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_expr_in_constraint1580);
        	        lhs=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleconstraintEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(EQ, &FOLLOW_EQ_in_constraint1582);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstraintEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_expr_in_constraint1588);
        	        rhs=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleconstraintEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        // ../gEcon_CURRENT/src//parser/gEcon.g:315:32: ( COLON lambda= atom_id_t )?
        	        {
        	            int alt40=2;
        	            switch ( this->LA(1) )
        	            {
        	                case COLON:
        	                	{
        	                		alt40=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt40)
        	            {
        	        	case 1:
        	        	    // ../gEcon_CURRENT/src//parser/gEcon.g:315:33: COLON lambda= atom_id_t
        	        	    {
        	        	         this->matchToken(COLON, &FOLLOW_COLON_in_constraint1591);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleconstraintEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return ;
        	        	        }


        	        	        this->followPush(FOLLOW_atom_id_t_in_constraint1597);
        	        	        lambda=atom_id_t();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleconstraintEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return ;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	        SEMI15 =  this->matchToken(SEMI, &FOLLOW_SEMI_in_constraint1601);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstraintEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             model_obj.add_constraint(ex(lie[0], ex(lie[1], lhs)), ex(lie[0], ex(lie[1], rhs)),
        	                                                ex(lie[0], ex(lie[1], lambda)), (SEMI15->get_line())); 
        	        }


        	    }
        	    break;
        	case 2:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:318:7: lr= list_ref AT ids= id_str SEMI
        	    {
        	        this->followPush(FOLLOW_list_ref_in_constraint1623);
        	        lr=list_ref();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleconstraintEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(AT, &FOLLOW_AT_in_constraint1625);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstraintEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_id_str_in_constraint1631);
        	        ids=id_str();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleconstraintEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(SEMI, &FOLLOW_SEMI_in_constraint1633);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstraintEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {

        	                    if (ids.first == model_obj.get_curr_block()) {
        	                        errors.push_back("reference to block \"" + ids.first + "\" within itself"
        	                            + "; error near line " + num2str(ids.second));
        	                        return;
        	                    } else if (!model_obj.block_declared(ids.first)) {
        	                        errors.push_back("reference to an undeclared block \"" + ids.first + "\""
        	                            + "; error near line " + num2str(ids.second));
        	                        return;
        	                    } else {
        	                        for (unsigned i = 0; i < lr.size(); ++i) {
        	                            model_obj.add_constraint_ref(ids.first, lr[i].first, lr[i].second);
        	                        }
        	                    }
        	                  
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleconstraintEx; /* Prevent compiler warnings */
    ruleconstraintEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end constraint */

/**
 * $ANTLR start list_ref
 * ../gEcon_CURRENT/src//parser/gEcon.g:335:1: list_ref returns [vec_intint lr] : r= ref_sec ( COMMA r= ref_sec )* ;
 */
vec_intint
gEconParser::list_ref()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    vec_intint lr;


    std::pair<int, int> r;
    typedef	std::pair<int, int> RETURN_TYPE_r;

    /* Initialize rule variables
     */


 
    {
        // ../gEcon_CURRENT/src//parser/gEcon.g:336:5: (r= ref_sec ( COMMA r= ref_sec )* )
        // ../gEcon_CURRENT/src//parser/gEcon.g:336:7: r= ref_sec ( COMMA r= ref_sec )*
        {
            this->followPush(FOLLOW_ref_sec_in_list_ref1660);
            r=ref_sec();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelist_refEx;
            }
            if (this->hasFailed())
            {
                return lr;
            }


            if ( this->get_backtracking()==0 )
            {
                 lr.push_back(r); 
            }


            // ../gEcon_CURRENT/src//parser/gEcon.g:336:40: ( COMMA r= ref_sec )*

            for (;;)
            {
                int alt42=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt42=1;
                	}
                    break;

                }

                switch (alt42)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src//parser/gEcon.g:336:41: COMMA r= ref_sec
            	    {
            	         this->matchToken(COMMA, &FOLLOW_COMMA_in_list_ref1665);
            	        if  (this->hasException())
            	        {
            	            goto rulelist_refEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return lr;
            	        }


            	        this->followPush(FOLLOW_ref_sec_in_list_ref1671);
            	        r=ref_sec();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulelist_refEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return lr;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             lr.push_back(r); 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop42;	/* break out of the loop */
            	    break;
                }
            }
            loop42: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto rulelist_refEx; /* Prevent compiler warnings */
    rulelist_refEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return lr;
}
/* $ANTLR end list_ref */

/**
 * $ANTLR start ref_sec
 * ../gEcon_CURRENT/src//parser/gEcon.g:339:1: ref_sec returns [std::pair<int, int> rs] : ( OBJ | CONSTRAINTS | FOCS | IDS );
 */
std::pair<int, int>
gEconParser::ref_sec()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    std::pair<int, int> rs;


    const CommonTokenType*    OBJ16;
    const CommonTokenType*    CONSTRAINTS17;
    const CommonTokenType*    FOCS18;
    const CommonTokenType*    IDS19;

    /* Initialize rule variables
     */

    OBJ16       = NULL;
    CONSTRAINTS17       = NULL;
    FOCS18       = NULL;
    IDS19       = NULL;


 
    {
        {
            //  ../gEcon_CURRENT/src//parser/gEcon.g:340:5: ( OBJ | CONSTRAINTS | FOCS | IDS )

            ANTLR_UINT32 alt43;

            alt43=4;

            switch ( this->LA(1) )
            {
            case OBJ:
            	{
            		alt43=1;
            	}
                break;
            case CONSTRAINTS:
            	{
            		alt43=2;
            	}
                break;
            case FOCS:
            	{
            		alt43=3;
            	}
                break;
            case IDS:
            	{
            		alt43=4;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return rs;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 43 );
                ex->set_state( 0 );


                goto ruleref_secEx;

            }

            switch (alt43)
            {
        	case 1:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:340:7: OBJ
        	    {
        	        OBJ16 =  this->matchToken(OBJ, &FOLLOW_OBJ_in_ref_sec1696);
        	        if  (this->hasException())
        	        {
        	            goto ruleref_secEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return rs;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             return std::pair<int, int>(Model::objective, (OBJ16->get_line())); 
        	        }


        	    }
        	    break;
        	case 2:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:341:7: CONSTRAINTS
        	    {
        	        CONSTRAINTS17 =  this->matchToken(CONSTRAINTS, &FOLLOW_CONSTRAINTS_in_ref_sec1706);
        	        if  (this->hasException())
        	        {
        	            goto ruleref_secEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return rs;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             return std::pair<int, int>(Model::constraints, (CONSTRAINTS17->get_line())); 
        	        }


        	    }
        	    break;
        	case 3:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:342:7: FOCS
        	    {
        	        FOCS18 =  this->matchToken(FOCS, &FOLLOW_FOCS_in_ref_sec1716);
        	        if  (this->hasException())
        	        {
        	            goto ruleref_secEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return rs;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             return std::pair<int, int>(Model::focs, (FOCS18->get_line())); 
        	        }


        	    }
        	    break;
        	case 4:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:343:7: IDS
        	    {
        	        IDS19 =  this->matchToken(IDS, &FOLLOW_IDS_in_ref_sec1726);
        	        if  (this->hasException())
        	        {
        	            goto ruleref_secEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return rs;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             return std::pair<int, int>(Model::identities, (IDS19->get_line())); 
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleref_secEx; /* Prevent compiler warnings */
    ruleref_secEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return rs;
}
/* $ANTLR end ref_sec */

/**
 * $ANTLR start block_identities
 * ../gEcon_CURRENT/src//parser/gEcon.g:346:1: block_identities : IDS LBRACE ( identity )+ RBRACE ( SEMI )? ;
 */
void
gEconParser::block_identities()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // ../gEcon_CURRENT/src//parser/gEcon.g:347:5: ( IDS LBRACE ( identity )+ RBRACE ( SEMI )? )
        // ../gEcon_CURRENT/src//parser/gEcon.g:347:7: IDS LBRACE ( identity )+ RBRACE ( SEMI )?
        {
             this->matchToken(IDS, &FOLLOW_IDS_in_block_identities1745);
            if  (this->hasException())
            {
                goto ruleblock_identitiesEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(LBRACE, &FOLLOW_LBRACE_in_block_identities1747);
            if  (this->hasException())
            {
                goto ruleblock_identitiesEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            // ../gEcon_CURRENT/src//parser/gEcon.g:347:18: ( identity )+
            {
                int cnt44=0;

                for (;;)
                {
                    int alt44=2;
            	switch ( this->LA(1) )
            	{
            	case ACOS:
            	case ASIN:
            	case ATAN:
            	case BACKWARDCOMP:
            	case BFALSE:
            	case BTRUE:
            	case CLETTER:
            	case COS:
            	case COSH:
            	case DELTA:
            	case DOUBLE:
            	case E:
            	case EXP:
            	case ID:
            	case INT:
            	case LANDSCAPE:
            	case LANGBR:
            	case LATEX:
            	case LOG:
            	case LOGF:
            	case LONG:
            	case LPAREN:
            	case MINUS:
            	case OUTPUT:
            	case PROD:
            	case R:
            	case SHORT:
            	case SIN:
            	case SINH:
            	case SLETTER:
            	case SQRT:
            	case SS:
            	case SUM:
            	case TAN:
            	case TANH:
            	case VERBOSE:
            	case ZERO:
            		{
            			alt44=1;
            		}
            	    break;

            	}

            	switch (alt44)
            	{
            	    case 1:
            	        // ../gEcon_CURRENT/src//parser/gEcon.g:347:18: identity
            	        {
            	            this->followPush(FOLLOW_identity_in_block_identities1749);
            	            identity();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleblock_identitiesEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return ;
            	            }


            	        }
            	        break;

            	    default:

            		if ( cnt44 >= 1 )
            		{
            		    goto loop44;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return ;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< gEconParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto ruleblock_identitiesEx;
            	}
            	cnt44++;
                }
                loop44: ;	/* Jump to here if this rule does not match */
            }

             this->matchToken(RBRACE, &FOLLOW_RBRACE_in_block_identities1752);
            if  (this->hasException())
            {
                goto ruleblock_identitiesEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            // ../gEcon_CURRENT/src//parser/gEcon.g:347:35: ( SEMI )?
            {
                int alt45=2;
                switch ( this->LA(1) )
                {
                    case SEMI:
                    	{
                    		alt45=1;
                    	}
                        break;
                }

                switch (alt45)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src//parser/gEcon.g:347:35: SEMI
            	    {
            	         this->matchToken(SEMI, &FOLLOW_SEMI_in_block_identities1754);
            	        if  (this->hasException())
            	        {
            	            goto ruleblock_identitiesEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleblock_identitiesEx; /* Prevent compiler warnings */
    ruleblock_identitiesEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end block_identities */

/**
 * $ANTLR start identity
 * ../gEcon_CURRENT/src//parser/gEcon.g:350:1: identity : lie= list_indexing_ex lhs= expr EQ rhs= expr SEMI ;
 */
void
gEconParser::identity()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    const CommonTokenType*    SEMI20;
    vec_idx_ex lie;
    typedef	vec_idx_ex RETURN_TYPE_lie;

    ex lhs;
    typedef	ex RETURN_TYPE_lhs;

    ex rhs;
    typedef	ex RETURN_TYPE_rhs;

    /* Initialize rule variables
     */

    SEMI20       = NULL;


 
    {
        // ../gEcon_CURRENT/src//parser/gEcon.g:351:5: (lie= list_indexing_ex lhs= expr EQ rhs= expr SEMI )
        // ../gEcon_CURRENT/src//parser/gEcon.g:351:7: lie= list_indexing_ex lhs= expr EQ rhs= expr SEMI
        {
            this->followPush(FOLLOW_list_indexing_ex_in_identity1776);
            lie=list_indexing_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleidentityEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            this->followPush(FOLLOW_expr_in_identity1788);
            lhs=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleidentityEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(EQ, &FOLLOW_EQ_in_identity1790);
            if  (this->hasException())
            {
                goto ruleidentityEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            this->followPush(FOLLOW_expr_in_identity1796);
            rhs=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleidentityEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            SEMI20 =  this->matchToken(SEMI, &FOLLOW_SEMI_in_identity1798);
            if  (this->hasException())
            {
                goto ruleidentityEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            if ( this->get_backtracking()==0 )
            {

                        model_obj.add_identity(ex(lie[0], ex(lie[1], lhs)), ex(lie[0], ex(lie[1], rhs)), (SEMI20->get_line()));
                      
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleidentityEx; /* Prevent compiler warnings */
    ruleidentityEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end identity */

/**
 * $ANTLR start block_shocks
 * ../gEcon_CURRENT/src//parser/gEcon.g:357:1: block_shocks : ( ({...}?)=> SHOCKS LBRACE shock ( shock )+ RBRACE ( SEMI )? | SHOCKS LBRACE ls= list_var ( shock )? RBRACE ( SEMI )? );
 */
void
gEconParser::block_shocks()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    const CommonTokenType*    LBRACE21;
    const CommonTokenType*    LBRACE22;
    vec_exint ls;
    typedef	vec_exint RETURN_TYPE_ls;

    /* Initialize rule variables
     */

    LBRACE21       = NULL;
    LBRACE22       = NULL;


 
    {
        {
            //  ../gEcon_CURRENT/src//parser/gEcon.g:358:5: ( ({...}?)=> SHOCKS LBRACE shock ( shock )+ RBRACE ( SEMI )? | SHOCKS LBRACE ls= list_var ( shock )? RBRACE ( SEMI )? )

            ANTLR_UINT32 alt50;

            alt50=2;

            alt50 = cdfa50.predict(this, this->get_rec(), this->get_istream(), cdfa50 );
            if  (this->hasException())
            {
                goto ruleblock_shocksEx;
            }
            if (this->hasFailed())
            {
                return ;
            }

            switch (alt50)
            {
        	case 1:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:358:7: ({...}?)=> SHOCKS LBRACE shock ( shock )+ RBRACE ( SEMI )?
        	    {
        	         this->matchToken(SHOCKS, &FOLLOW_SHOCKS_in_block_shocks1823);
        	        if  (this->hasException())
        	        {
        	            goto ruleblock_shocksEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        LBRACE21 =  this->matchToken(LBRACE, &FOLLOW_LBRACE_in_block_shocks1825);
        	        if  (this->hasException())
        	        {
        	            goto ruleblock_shocksEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_shock_in_block_shocks1827);
        	        shock();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleblock_shocksEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        // ../gEcon_CURRENT/src//parser/gEcon.g:358:79: ( shock )+
        	        {
        	            int cnt46=0;

        	            for (;;)
        	            {
        	                int alt46=2;
        	        	switch ( this->LA(1) )
        	        	{
        	        	case ACOS:
        	        	case ASIN:
        	        	case ATAN:
        	        	case BACKWARDCOMP:
        	        	case BFALSE:
        	        	case BTRUE:
        	        	case CLETTER:
        	        	case COS:
        	        	case COSH:
        	        	case DELTA:
        	        	case DOUBLE:
        	        	case E:
        	        	case EXP:
        	        	case ID:
        	        	case INT:
        	        	case LANDSCAPE:
        	        	case LANGBR:
        	        	case LATEX:
        	        	case LOG:
        	        	case LOGF:
        	        	case LONG:
        	        	case LPAREN:
        	        	case MINUS:
        	        	case OUTPUT:
        	        	case PROD:
        	        	case R:
        	        	case SHORT:
        	        	case SIN:
        	        	case SINH:
        	        	case SLETTER:
        	        	case SQRT:
        	        	case SS:
        	        	case SUM:
        	        	case TAN:
        	        	case TANH:
        	        	case VERBOSE:
        	        	case ZERO:
        	        		{
        	        			alt46=1;
        	        		}
        	        	    break;

        	        	}

        	        	switch (alt46)
        	        	{
        	        	    case 1:
        	        	        // ../gEcon_CURRENT/src//parser/gEcon.g:358:79: shock
        	        	        {
        	        	            this->followPush(FOLLOW_shock_in_block_shocks1829);
        	        	            shock();

        	        	            this->followPop();
        	        	            if  (this->hasException())
        	        	            {
        	        	                goto ruleblock_shocksEx;
        	        	            }
        	        	            if (this->hasFailed())
        	        	            {
        	        	                return ;
        	        	            }


        	        	        }
        	        	        break;

        	        	    default:

        	        		if ( cnt46 >= 1 )
        	        		{
        	        		    goto loop46;
        	        		}
        	        		if (this->get_backtracking()>0)
        	        		{
        	        		    this->set_failedflag( true );
        	        		    return ;
        	        		}

        	        		/* mismatchedSetEx()
        	        		 */
        	        		new ANTLR_Exception< gEconParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


        	        		goto ruleblock_shocksEx;
        	        	}
        	        	cnt46++;
        	            }
        	            loop46: ;	/* Jump to here if this rule does not match */
        	        }

        	        if ( this->get_backtracking()==0 )
        	        {
        	             model_obj.warning("in backward compatibility mode; accepting shock declarations separated by colon (';'); warning near line " + num2str((LBRACE21->get_line()))); 
        	        }


        	         this->matchToken(RBRACE, &FOLLOW_RBRACE_in_block_shocks1834);
        	        if  (this->hasException())
        	        {
        	            goto ruleblock_shocksEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        // ../gEcon_CURRENT/src//parser/gEcon.g:358:249: ( SEMI )?
        	        {
        	            int alt47=2;
        	            switch ( this->LA(1) )
        	            {
        	                case SEMI:
        	                	{
        	                		alt47=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt47)
        	            {
        	        	case 1:
        	        	    // ../gEcon_CURRENT/src//parser/gEcon.g:358:249: SEMI
        	        	    {
        	        	         this->matchToken(SEMI, &FOLLOW_SEMI_in_block_shocks1836);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleblock_shocksEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return ;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 2:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:359:7: SHOCKS LBRACE ls= list_var ( shock )? RBRACE ( SEMI )?
        	    {
        	         this->matchToken(SHOCKS, &FOLLOW_SHOCKS_in_block_shocks1845);
        	        if  (this->hasException())
        	        {
        	            goto ruleblock_shocksEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        LBRACE22 =  this->matchToken(LBRACE, &FOLLOW_LBRACE_in_block_shocks1847);
        	        if  (this->hasException())
        	        {
        	            goto ruleblock_shocksEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_list_var_in_block_shocks1853);
        	        ls=list_var();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleblock_shocksEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        // ../gEcon_CURRENT/src//parser/gEcon.g:359:35: ( shock )?
        	        {
        	            int alt48=2;
        	            switch ( this->LA(1) )
        	            {
        	                case ACOS:
        	                case ASIN:
        	                case ATAN:
        	                case BACKWARDCOMP:
        	                case BFALSE:
        	                case BTRUE:
        	                case CLETTER:
        	                case COS:
        	                case COSH:
        	                case DELTA:
        	                case DOUBLE:
        	                case E:
        	                case EXP:
        	                case ID:
        	                case INT:
        	                case LANDSCAPE:
        	                case LANGBR:
        	                case LATEX:
        	                case LOG:
        	                case LOGF:
        	                case LONG:
        	                case LPAREN:
        	                case MINUS:
        	                case OUTPUT:
        	                case PROD:
        	                case R:
        	                case SHORT:
        	                case SIN:
        	                case SINH:
        	                case SLETTER:
        	                case SQRT:
        	                case SS:
        	                case SUM:
        	                case TAN:
        	                case TANH:
        	                case VERBOSE:
        	                case ZERO:
        	                	{
        	                		alt48=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt48)
        	            {
        	        	case 1:
        	        	    // ../gEcon_CURRENT/src//parser/gEcon.g:359:36: shock
        	        	    {
        	        	        this->followPush(FOLLOW_shock_in_block_shocks1856);
        	        	        shock();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleblock_shocksEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return ;
        	        	        }


        	        	        if ( this->get_backtracking()==0 )
        	        	        {
        	        	             errors.push_back("declaring shocks separated by colon (';') is obsolete, please rewrite your list of shocks using commas (',') or force acceptance of your code using \"backwardcomp\" option; error near line " + num2str((LBRACE22->get_line()))); 
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	         this->matchToken(RBRACE, &FOLLOW_RBRACE_in_block_shocks1863);
        	        if  (this->hasException())
        	        {
        	            goto ruleblock_shocksEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        // ../gEcon_CURRENT/src//parser/gEcon.g:359:291: ( SEMI )?
        	        {
        	            int alt49=2;
        	            switch ( this->LA(1) )
        	            {
        	                case SEMI:
        	                	{
        	                		alt49=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt49)
        	            {
        	        	case 1:
        	        	    // ../gEcon_CURRENT/src//parser/gEcon.g:359:291: SEMI
        	        	    {
        	        	         this->matchToken(SEMI, &FOLLOW_SEMI_in_block_shocks1865);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleblock_shocksEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return ;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	        if ( this->get_backtracking()==0 )
        	        {

        	                    model_obj.add_shocks(ls);
        	                  
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleblock_shocksEx; /* Prevent compiler warnings */
    ruleblock_shocksEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end block_shocks */

/**
 * $ANTLR start shock
 * ../gEcon_CURRENT/src//parser/gEcon.g:364:1: shock : lie= list_indexing_ex s= atom_id_t SEMI ;
 */
void
gEconParser::shock()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    const CommonTokenType*    SEMI23;
    vec_idx_ex lie;
    typedef	vec_idx_ex RETURN_TYPE_lie;

    ex s;
    typedef	ex RETURN_TYPE_s;

    /* Initialize rule variables
     */

    SEMI23       = NULL;


 
    {
        // ../gEcon_CURRENT/src//parser/gEcon.g:365:5: (lie= list_indexing_ex s= atom_id_t SEMI )
        // ../gEcon_CURRENT/src//parser/gEcon.g:365:7: lie= list_indexing_ex s= atom_id_t SEMI
        {
            this->followPush(FOLLOW_list_indexing_ex_in_shock1889);
            lie=list_indexing_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleshockEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            this->followPush(FOLLOW_atom_id_t_in_shock1901);
            s=atom_id_t();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleshockEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            SEMI23 =  this->matchToken(SEMI, &FOLLOW_SEMI_in_shock1903);
            if  (this->hasException())
            {
                goto ruleshockEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            if ( this->get_backtracking()==0 )
            {
                 model_obj.add_shock(ex(lie[0], ex(lie[1], s)), (SEMI23->get_line())); 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleshockEx; /* Prevent compiler warnings */
    ruleshockEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end shock */

/**
 * $ANTLR start block_calibr
 * ../gEcon_CURRENT/src//parser/gEcon.g:369:1: block_calibr : CALIBR LBRACE ( calibr_eq )+ RBRACE ( SEMI )? ;
 */
void
gEconParser::block_calibr()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // ../gEcon_CURRENT/src//parser/gEcon.g:370:5: ( CALIBR LBRACE ( calibr_eq )+ RBRACE ( SEMI )? )
        // ../gEcon_CURRENT/src//parser/gEcon.g:370:7: CALIBR LBRACE ( calibr_eq )+ RBRACE ( SEMI )?
        {
             this->matchToken(CALIBR, &FOLLOW_CALIBR_in_block_calibr1922);
            if  (this->hasException())
            {
                goto ruleblock_calibrEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(LBRACE, &FOLLOW_LBRACE_in_block_calibr1924);
            if  (this->hasException())
            {
                goto ruleblock_calibrEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            // ../gEcon_CURRENT/src//parser/gEcon.g:370:21: ( calibr_eq )+
            {
                int cnt51=0;

                for (;;)
                {
                    int alt51=2;
            	switch ( this->LA(1) )
            	{
            	case ACOS:
            	case ASIN:
            	case ATAN:
            	case BACKWARDCOMP:
            	case BFALSE:
            	case BTRUE:
            	case CLETTER:
            	case COS:
            	case COSH:
            	case DELTA:
            	case DOUBLE:
            	case E:
            	case EXP:
            	case ID:
            	case INT:
            	case LANDSCAPE:
            	case LANGBR:
            	case LATEX:
            	case LOG:
            	case LOGF:
            	case LONG:
            	case LPAREN:
            	case MINUS:
            	case OUTPUT:
            	case PROD:
            	case R:
            	case SHORT:
            	case SIN:
            	case SINH:
            	case SLETTER:
            	case SQRT:
            	case SS:
            	case SUM:
            	case TAN:
            	case TANH:
            	case VERBOSE:
            	case ZERO:
            		{
            			alt51=1;
            		}
            	    break;

            	}

            	switch (alt51)
            	{
            	    case 1:
            	        // ../gEcon_CURRENT/src//parser/gEcon.g:370:21: calibr_eq
            	        {
            	            this->followPush(FOLLOW_calibr_eq_in_block_calibr1926);
            	            calibr_eq();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleblock_calibrEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return ;
            	            }


            	        }
            	        break;

            	    default:

            		if ( cnt51 >= 1 )
            		{
            		    goto loop51;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return ;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< gEconParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto ruleblock_calibrEx;
            	}
            	cnt51++;
                }
                loop51: ;	/* Jump to here if this rule does not match */
            }

             this->matchToken(RBRACE, &FOLLOW_RBRACE_in_block_calibr1929);
            if  (this->hasException())
            {
                goto ruleblock_calibrEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            // ../gEcon_CURRENT/src//parser/gEcon.g:370:39: ( SEMI )?
            {
                int alt52=2;
                switch ( this->LA(1) )
                {
                    case SEMI:
                    	{
                    		alt52=1;
                    	}
                        break;
                }

                switch (alt52)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src//parser/gEcon.g:370:39: SEMI
            	    {
            	         this->matchToken(SEMI, &FOLLOW_SEMI_in_block_calibr1931);
            	        if  (this->hasException())
            	        {
            	            goto ruleblock_calibrEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleblock_calibrEx; /* Prevent compiler warnings */
    ruleblock_calibrEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end block_calibr */

/**
 * $ANTLR start calibr_eq
 * ../gEcon_CURRENT/src//parser/gEcon.g:373:1: calibr_eq : lie= list_indexing_ex lhs= expr EQ rhs= expr ( ( RARROW lp= list_par ) | SEMI ) ;
 */
void
gEconParser::calibr_eq()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    const CommonTokenType*    EQ24;
    vec_idx_ex lie;
    typedef	vec_idx_ex RETURN_TYPE_lie;

    ex lhs;
    typedef	ex RETURN_TYPE_lhs;

    ex rhs;
    typedef	ex RETURN_TYPE_rhs;

    vec_exint lp;
    typedef	vec_exint RETURN_TYPE_lp;

    /* Initialize rule variables
     */

    EQ24       = NULL;


 
    {
        // ../gEcon_CURRENT/src//parser/gEcon.g:374:5: (lie= list_indexing_ex lhs= expr EQ rhs= expr ( ( RARROW lp= list_par ) | SEMI ) )
        // ../gEcon_CURRENT/src//parser/gEcon.g:374:7: lie= list_indexing_ex lhs= expr EQ rhs= expr ( ( RARROW lp= list_par ) | SEMI )
        {
            this->followPush(FOLLOW_list_indexing_ex_in_calibr_eq1953);
            lie=list_indexing_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecalibr_eqEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            this->followPush(FOLLOW_expr_in_calibr_eq1965);
            lhs=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecalibr_eqEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            EQ24 =  this->matchToken(EQ, &FOLLOW_EQ_in_calibr_eq1967);
            if  (this->hasException())
            {
                goto rulecalibr_eqEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            this->followPush(FOLLOW_expr_in_calibr_eq1973);
            rhs=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecalibr_eqEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            // ../gEcon_CURRENT/src//parser/gEcon.g:375:32: ( ( RARROW lp= list_par ) | SEMI )
            {
                int alt53=2;
                switch ( this->LA(1) )
                {
                case RARROW:
                	{
                		alt53=1;
                	}
                    break;
                case SEMI:
                	{
                		alt53=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 53 );
                    ex->set_state( 0 );


                    goto rulecalibr_eqEx;

                }

                switch (alt53)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src//parser/gEcon.g:375:33: ( RARROW lp= list_par )
            	    {
            	        // ../gEcon_CURRENT/src//parser/gEcon.g:375:33: ( RARROW lp= list_par )
            	        // ../gEcon_CURRENT/src//parser/gEcon.g:375:34: RARROW lp= list_par
            	        {
            	             this->matchToken(RARROW, &FOLLOW_RARROW_in_calibr_eq1977);
            	            if  (this->hasException())
            	            {
            	                goto rulecalibr_eqEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return ;
            	            }


            	            this->followPush(FOLLOW_list_par_in_calibr_eq1983);
            	            lp=list_par();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulecalibr_eqEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return ;
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    // ../gEcon_CURRENT/src//parser/gEcon.g:375:58: SEMI
            	    {
            	         this->matchToken(SEMI, &FOLLOW_SEMI_in_calibr_eq1988);
            	        if  (this->hasException())
            	        {
            	            goto rulecalibr_eqEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

            if ( this->get_backtracking()==0 )
            {

                        vec_exint pln;
                        pln.reserve(lp.size());
                        for (unsigned i = 0; i < lp.size(); ++i) {
                            pln.push_back(exint(ex(lie[0], ex(lie[1], lp[i].first)), lp[i].second));
                        }
                        model_obj.add_calibr(ex(lie[0], ex(lie[1], lhs)), ex(lie[0], ex(lie[1], rhs)), (EQ24->get_line()), pln);
                      
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulecalibr_eqEx; /* Prevent compiler warnings */
    rulecalibr_eqEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end calibr_eq */

/**
 * $ANTLR start list_var
 * ../gEcon_CURRENT/src//parser/gEcon.g:388:1: list_var returns [vec_exint listln] : val= list_var_elem ( COMMA val= list_var_elem )* SEMI ;
 */
vec_exint
gEconParser::list_var()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    vec_exint listln;


    const CommonTokenType*    COMMA25;
    const CommonTokenType*    SEMI26;
    ex val;
    typedef	ex RETURN_TYPE_val;

    /* Initialize rule variables
     */


        vec_ex liste;
        std::vector<int> listl;

    COMMA25       = NULL;
    SEMI26       = NULL;


 
    {
        // ../gEcon_CURRENT/src//parser/gEcon.g:393:5: (val= list_var_elem ( COMMA val= list_var_elem )* SEMI )
        // ../gEcon_CURRENT/src//parser/gEcon.g:393:8: val= list_var_elem ( COMMA val= list_var_elem )* SEMI
        {
            this->followPush(FOLLOW_list_var_elem_in_list_var2025);
            val=list_var_elem();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelist_varEx;
            }
            if (this->hasFailed())
            {
                return listln;
            }


            if ( this->get_backtracking()==0 )
            {
                 liste.push_back(val); 
            }


            // ../gEcon_CURRENT/src//parser/gEcon.g:394:9: ( COMMA val= list_var_elem )*

            for (;;)
            {
                int alt54=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt54=1;
                	}
                    break;

                }

                switch (alt54)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src//parser/gEcon.g:394:10: COMMA val= list_var_elem
            	    {
            	        COMMA25 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_list_var2038);
            	        if  (this->hasException())
            	        {
            	            goto rulelist_varEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return listln;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             listl.push_back((COMMA25->get_line())); 
            	        }


            	        this->followPush(FOLLOW_list_var_elem_in_list_var2058);
            	        val=list_var_elem();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulelist_varEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return listln;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             liste.push_back(val); 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop54;	/* break out of the loop */
            	    break;
                }
            }
            loop54: ; /* Jump out to here if this rule does not match */


            SEMI26 =  this->matchToken(SEMI, &FOLLOW_SEMI_in_list_var2072);
            if  (this->hasException())
            {
                goto rulelist_varEx;
            }
            if (this->hasFailed())
            {
                return listln;
            }


            if ( this->get_backtracking()==0 )
            {
                 listl.push_back((SEMI26->get_line()));
                            unsigned i = 0, n = listl.size();
                            listln.reserve(n);
                            for (; i < n; ++i)
                                listln.push_back(exint(liste[i], listl[i]));
                        
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulelist_varEx; /* Prevent compiler warnings */
    rulelist_varEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return listln;
}
/* $ANTLR end list_var */

/**
 * $ANTLR start list_var_elem
 * ../gEcon_CURRENT/src//parser/gEcon.g:404:1: list_var_elem returns [ex val] : lie= list_indexing_ex v= atom_id_t ;
 */
ex
gEconParser::list_var_elem()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    ex val;


    vec_idx_ex lie;
    typedef	vec_idx_ex RETURN_TYPE_lie;

    ex v;
    typedef	ex RETURN_TYPE_v;

    /* Initialize rule variables
     */


 
    {
        // ../gEcon_CURRENT/src//parser/gEcon.g:405:5: (lie= list_indexing_ex v= atom_id_t )
        // ../gEcon_CURRENT/src//parser/gEcon.g:405:7: lie= list_indexing_ex v= atom_id_t
        {
            this->followPush(FOLLOW_list_indexing_ex_in_list_var_elem2099);
            lie=list_indexing_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelist_var_elemEx;
            }
            if (this->hasFailed())
            {
                return val;
            }


            this->followPush(FOLLOW_atom_id_t_in_list_var_elem2113);
            v=atom_id_t();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelist_var_elemEx;
            }
            if (this->hasFailed())
            {
                return val;
            }


            if ( this->get_backtracking()==0 )
            {
                 val= ex(lie[0], ex(lie[1], v));
                 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulelist_var_elemEx; /* Prevent compiler warnings */
    rulelist_var_elemEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return val;
}
/* $ANTLR end list_var_elem */

/**
 * $ANTLR start list_par
 * ../gEcon_CURRENT/src//parser/gEcon.g:409:1: list_par returns [vec_exint listln] : val= list_par_elem ( COMMA val= list_par_elem )* SEMI ;
 */
vec_exint
gEconParser::list_par()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    vec_exint listln;


    const CommonTokenType*    COMMA27;
    const CommonTokenType*    SEMI28;
    ex val;
    typedef	ex RETURN_TYPE_val;

    /* Initialize rule variables
     */


        vec_ex liste;
        std::vector<int> listl;

    COMMA27       = NULL;
    SEMI28       = NULL;


 
    {
        // ../gEcon_CURRENT/src//parser/gEcon.g:414:5: (val= list_par_elem ( COMMA val= list_par_elem )* SEMI )
        // ../gEcon_CURRENT/src//parser/gEcon.g:414:8: val= list_par_elem ( COMMA val= list_par_elem )* SEMI
        {
            this->followPush(FOLLOW_list_par_elem_in_list_par2146);
            val=list_par_elem();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelist_parEx;
            }
            if (this->hasFailed())
            {
                return listln;
            }


            if ( this->get_backtracking()==0 )
            {
                 liste.push_back(val); 
            }


            // ../gEcon_CURRENT/src//parser/gEcon.g:415:9: ( COMMA val= list_par_elem )*

            for (;;)
            {
                int alt55=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt55=1;
                	}
                    break;

                }

                switch (alt55)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src//parser/gEcon.g:415:10: COMMA val= list_par_elem
            	    {
            	        COMMA27 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_list_par2159);
            	        if  (this->hasException())
            	        {
            	            goto rulelist_parEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return listln;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             listl.push_back((COMMA27->get_line())); 
            	        }


            	        this->followPush(FOLLOW_list_par_elem_in_list_par2179);
            	        val=list_par_elem();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulelist_parEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return listln;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             liste.push_back(val); 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop55;	/* break out of the loop */
            	    break;
                }
            }
            loop55: ; /* Jump out to here if this rule does not match */


            SEMI28 =  this->matchToken(SEMI, &FOLLOW_SEMI_in_list_par2193);
            if  (this->hasException())
            {
                goto rulelist_parEx;
            }
            if (this->hasFailed())
            {
                return listln;
            }


            if ( this->get_backtracking()==0 )
            {
                 listl.push_back((SEMI28->get_line()));
                            unsigned i = 0, n = listl.size();
                            listln.reserve(n);
                            for (; i < n; ++i)
                                listln.push_back(exint(liste[i], listl[i]));
                        
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulelist_parEx; /* Prevent compiler warnings */
    rulelist_parEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return listln;
}
/* $ANTLR end list_par */

/**
 * $ANTLR start list_par_elem
 * ../gEcon_CURRENT/src//parser/gEcon.g:425:1: list_par_elem returns [ex val] : lie= list_indexing_ex p= atom_id_nt ;
 */
ex
gEconParser::list_par_elem()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    ex val;


    vec_idx_ex lie;
    typedef	vec_idx_ex RETURN_TYPE_lie;

    ex p;
    typedef	ex RETURN_TYPE_p;

    /* Initialize rule variables
     */


 
    {
        // ../gEcon_CURRENT/src//parser/gEcon.g:426:5: (lie= list_indexing_ex p= atom_id_nt )
        // ../gEcon_CURRENT/src//parser/gEcon.g:426:7: lie= list_indexing_ex p= atom_id_nt
        {
            this->followPush(FOLLOW_list_indexing_ex_in_list_par_elem2220);
            lie=list_indexing_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelist_par_elemEx;
            }
            if (this->hasFailed())
            {
                return val;
            }


            this->followPush(FOLLOW_atom_id_nt_in_list_par_elem2234);
            p=atom_id_nt();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelist_par_elemEx;
            }
            if (this->hasFailed())
            {
                return val;
            }


            if ( this->get_backtracking()==0 )
            {
                 val= ex(lie[0], ex(lie[1], p));
                 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulelist_par_elemEx; /* Prevent compiler warnings */
    rulelist_par_elemEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return val;
}
/* $ANTLR end list_par_elem */

/**
 * $ANTLR start expr
 * ../gEcon_CURRENT/src//parser/gEcon.g:430:1: expr returns [ex val] : a= expr_add ;
 */
ex
gEconParser::expr()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    ex val;


    ex a;
    typedef	ex RETURN_TYPE_a;

    /* Initialize rule variables
     */


 
    {
        // ../gEcon_CURRENT/src//parser/gEcon.g:431:5: (a= expr_add )
        // ../gEcon_CURRENT/src//parser/gEcon.g:431:7: a= expr_add
        {
            this->followPush(FOLLOW_expr_add_in_expr2261);
            a=expr_add();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleexprEx;
            }
            if (this->hasFailed())
            {
                return val;
            }


            if ( this->get_backtracking()==0 )
            {
                 val= a;
                 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleexprEx; /* Prevent compiler warnings */
    ruleexprEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return val;
}
/* $ANTLR end expr */

/**
 * $ANTLR start expr_add
 * ../gEcon_CURRENT/src//parser/gEcon.g:434:1: expr_add returns [ex val] : a= expr_sum ( ( PLUS b= expr_sum ) | ( MINUS b= expr_sum ) )* ;
 */
ex
gEconParser::expr_add()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    ex val;


    ex a;
    typedef	ex RETURN_TYPE_a;

    ex b;
    typedef	ex RETURN_TYPE_b;

    /* Initialize rule variables
     */


 
    {
        // ../gEcon_CURRENT/src//parser/gEcon.g:435:5: (a= expr_sum ( ( PLUS b= expr_sum ) | ( MINUS b= expr_sum ) )* )
        // ../gEcon_CURRENT/src//parser/gEcon.g:435:7: a= expr_sum ( ( PLUS b= expr_sum ) | ( MINUS b= expr_sum ) )*
        {
            this->followPush(FOLLOW_expr_sum_in_expr_add2288);
            a=expr_sum();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleexpr_addEx;
            }
            if (this->hasFailed())
            {
                return val;
            }


            if ( this->get_backtracking()==0 )
            {
                 val= a;
                 
            }


            // ../gEcon_CURRENT/src//parser/gEcon.g:436:17: ( ( PLUS b= expr_sum ) | ( MINUS b= expr_sum ) )*

            for (;;)
            {
                int alt56=3;
                switch ( this->LA(1) )
                {
                case PLUS:
                	{
                		alt56=1;
                	}
                    break;
                case MINUS:
                	{
                		alt56=2;
                	}
                    break;

                }

                switch (alt56)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src//parser/gEcon.g:436:18: ( PLUS b= expr_sum )
            	    {
            	        // ../gEcon_CURRENT/src//parser/gEcon.g:436:18: ( PLUS b= expr_sum )
            	        // ../gEcon_CURRENT/src//parser/gEcon.g:436:19: PLUS b= expr_sum
            	        {
            	             this->matchToken(PLUS, &FOLLOW_PLUS_in_expr_add2310);
            	            if  (this->hasException())
            	            {
            	                goto ruleexpr_addEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return val;
            	            }


            	            this->followPush(FOLLOW_expr_sum_in_expr_add2316);
            	            b=expr_sum();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleexpr_addEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return val;
            	            }


            	            if ( this->get_backtracking()==0 )
            	            {
            	                 val= 
            	                val
            	                 + b;
            	                 
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    // ../gEcon_CURRENT/src//parser/gEcon.g:437:18: ( MINUS b= expr_sum )
            	    {
            	        // ../gEcon_CURRENT/src//parser/gEcon.g:437:18: ( MINUS b= expr_sum )
            	        // ../gEcon_CURRENT/src//parser/gEcon.g:437:19: MINUS b= expr_sum
            	        {
            	             this->matchToken(MINUS, &FOLLOW_MINUS_in_expr_add2339);
            	            if  (this->hasException())
            	            {
            	                goto ruleexpr_addEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return val;
            	            }


            	            this->followPush(FOLLOW_expr_sum_in_expr_add2345);
            	            b=expr_sum();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleexpr_addEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return val;
            	            }


            	            if ( this->get_backtracking()==0 )
            	            {
            	                 val= 
            	                val
            	                 - b;
            	                 
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop56;	/* break out of the loop */
            	    break;
                }
            }
            loop56: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleexpr_addEx; /* Prevent compiler warnings */
    ruleexpr_addEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return val;
}
/* $ANTLR end expr_add */

/**
 * $ANTLR start expr_sum
 * ../gEcon_CURRENT/src//parser/gEcon.g:440:1: expr_sum returns [ex val] : (e= expr_mul | ( MINUS )? SUM ie= indexing_ex e= expr_sum );
 */
ex
gEconParser::expr_sum()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    ex val;


    ex e;
    typedef	ex RETURN_TYPE_e;

    std::pair<idx_ex, int> ie;
    typedef	std::pair<idx_ex, int> RETURN_TYPE_ie;

    /* Initialize rule variables
     */


        bool minus = false;


 
    {
        {
            //  ../gEcon_CURRENT/src//parser/gEcon.g:444:5: (e= expr_mul | ( MINUS )? SUM ie= indexing_ex e= expr_sum )

            ANTLR_UINT32 alt58;

            alt58=2;

            switch ( this->LA(1) )
            {
            case MINUS:
            	{
            		switch ( this->LA(2) )
            		{
            		case ACOS:
            		case ASIN:
            		case ATAN:
            		case BACKWARDCOMP:
            		case BFALSE:
            		case BTRUE:
            		case CLETTER:
            		case COS:
            		case COSH:
            		case DELTA:
            		case DOUBLE:
            		case E:
            		case EXP:
            		case ID:
            		case INT:
            		case LANDSCAPE:
            		case LATEX:
            		case LOG:
            		case LOGF:
            		case LONG:
            		case LPAREN:
            		case OUTPUT:
            		case PROD:
            		case R:
            		case SHORT:
            		case SIN:
            		case SINH:
            		case SLETTER:
            		case SQRT:
            		case SS:
            		case TAN:
            		case TANH:
            		case VERBOSE:
            		case ZERO:
            			{
            				alt58=1;
            			}
            		    break;
            		case SUM:
            			{
            				alt58=2;
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return val;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 58 );
            		    ex->set_state( 1 );


            		    goto ruleexpr_sumEx;

            		}

            	}
                break;
            case ACOS:
            case ASIN:
            case ATAN:
            case BACKWARDCOMP:
            case BFALSE:
            case BTRUE:
            case CLETTER:
            case COS:
            case COSH:
            case DELTA:
            case DOUBLE:
            case E:
            case EXP:
            case ID:
            case INT:
            case LANDSCAPE:
            case LATEX:
            case LOG:
            case LOGF:
            case LONG:
            case LPAREN:
            case OUTPUT:
            case PROD:
            case R:
            case SHORT:
            case SIN:
            case SINH:
            case SLETTER:
            case SQRT:
            case SS:
            case TAN:
            case TANH:
            case VERBOSE:
            case ZERO:
            	{
            		alt58=1;
            	}
                break;
            case SUM:
            	{
            		alt58=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return val;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 58 );
                ex->set_state( 0 );


                goto ruleexpr_sumEx;

            }

            switch (alt58)
            {
        	case 1:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:444:7: e= expr_mul
        	    {
        	        this->followPush(FOLLOW_expr_mul_in_expr_sum2380);
        	        e=expr_mul();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_sumEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             val= e;
        	             
        	        }


        	    }
        	    break;
        	case 2:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:445:7: ( MINUS )? SUM ie= indexing_ex e= expr_sum
        	    {
        	        // ../gEcon_CURRENT/src//parser/gEcon.g:445:7: ( MINUS )?
        	        {
        	            int alt57=2;
        	            switch ( this->LA(1) )
        	            {
        	                case MINUS:
        	                	{
        	                		alt57=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt57)
        	            {
        	        	case 1:
        	        	    // ../gEcon_CURRENT/src//parser/gEcon.g:445:8: MINUS
        	        	    {
        	        	         this->matchToken(MINUS, &FOLLOW_MINUS_in_expr_sum2391);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleexpr_sumEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return val;
        	        	        }


        	        	        if ( this->get_backtracking()==0 )
        	        	        {
        	        	             minus = true;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	         this->matchToken(SUM, &FOLLOW_SUM_in_expr_sum2398);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_sumEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        this->followPush(FOLLOW_indexing_ex_in_expr_sum2404);
        	        ie=indexing_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_sumEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        this->followPush(FOLLOW_expr_sum_in_expr_sum2410);
        	        e=expr_sum();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_sumEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {

        	                    val= ie.first ? sum(ie.first, e) : e;
        	             val= minus ? -
        	            val
        	             : val
        	            ;

        	                  
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleexpr_sumEx; /* Prevent compiler warnings */
    ruleexpr_sumEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return val;
}
/* $ANTLR end expr_sum */

/**
 * $ANTLR start expr_mul
 * ../gEcon_CURRENT/src//parser/gEcon.g:450:1: expr_mul returns [ex val] : a= expr_prod ( ( MUL b= expr_prod ) | ( DIV b= expr_prod ) )* ;
 */
ex
gEconParser::expr_mul()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    ex val;


    ex a;
    typedef	ex RETURN_TYPE_a;

    ex b;
    typedef	ex RETURN_TYPE_b;

    /* Initialize rule variables
     */


 
    {
        // ../gEcon_CURRENT/src//parser/gEcon.g:451:5: (a= expr_prod ( ( MUL b= expr_prod ) | ( DIV b= expr_prod ) )* )
        // ../gEcon_CURRENT/src//parser/gEcon.g:451:7: a= expr_prod ( ( MUL b= expr_prod ) | ( DIV b= expr_prod ) )*
        {
            this->followPush(FOLLOW_expr_prod_in_expr_mul2437);
            a=expr_prod();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleexpr_mulEx;
            }
            if (this->hasFailed())
            {
                return val;
            }


            if ( this->get_backtracking()==0 )
            {
                 val= a;
                 
            }


            // ../gEcon_CURRENT/src//parser/gEcon.g:452:17: ( ( MUL b= expr_prod ) | ( DIV b= expr_prod ) )*

            for (;;)
            {
                int alt59=3;
                switch ( this->LA(1) )
                {
                case MUL:
                	{
                		alt59=1;
                	}
                    break;
                case DIV:
                	{
                		alt59=2;
                	}
                    break;

                }

                switch (alt59)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src//parser/gEcon.g:452:18: ( MUL b= expr_prod )
            	    {
            	        // ../gEcon_CURRENT/src//parser/gEcon.g:452:18: ( MUL b= expr_prod )
            	        // ../gEcon_CURRENT/src//parser/gEcon.g:452:19: MUL b= expr_prod
            	        {
            	             this->matchToken(MUL, &FOLLOW_MUL_in_expr_mul2459);
            	            if  (this->hasException())
            	            {
            	                goto ruleexpr_mulEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return val;
            	            }


            	            this->followPush(FOLLOW_expr_prod_in_expr_mul2465);
            	            b=expr_prod();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleexpr_mulEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return val;
            	            }


            	            if ( this->get_backtracking()==0 )
            	            {
            	                 val= 
            	                val
            	                 * b;
            	                 
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    // ../gEcon_CURRENT/src//parser/gEcon.g:453:18: ( DIV b= expr_prod )
            	    {
            	        // ../gEcon_CURRENT/src//parser/gEcon.g:453:18: ( DIV b= expr_prod )
            	        // ../gEcon_CURRENT/src//parser/gEcon.g:453:19: DIV b= expr_prod
            	        {
            	             this->matchToken(DIV, &FOLLOW_DIV_in_expr_mul2488);
            	            if  (this->hasException())
            	            {
            	                goto ruleexpr_mulEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return val;
            	            }


            	            this->followPush(FOLLOW_expr_prod_in_expr_mul2494);
            	            b=expr_prod();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleexpr_mulEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return val;
            	            }


            	            if ( this->get_backtracking()==0 )
            	            {
            	                 val= 
            	                val
            	                 / b;
            	                 
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop59;	/* break out of the loop */
            	    break;
                }
            }
            loop59: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleexpr_mulEx; /* Prevent compiler warnings */
    ruleexpr_mulEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return val;
}
/* $ANTLR end expr_mul */

/**
 * $ANTLR start expr_prod
 * ../gEcon_CURRENT/src//parser/gEcon.g:456:1: expr_prod returns [ex val] : (e= expr_pow | ( MINUS )? PROD ie= indexing_ex e= expr_prod );
 */
ex
gEconParser::expr_prod()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    ex val;


    ex e;
    typedef	ex RETURN_TYPE_e;

    std::pair<idx_ex, int> ie;
    typedef	std::pair<idx_ex, int> RETURN_TYPE_ie;

    /* Initialize rule variables
     */


        bool minus = false;


 
    {
        {
            //  ../gEcon_CURRENT/src//parser/gEcon.g:460:5: (e= expr_pow | ( MINUS )? PROD ie= indexing_ex e= expr_prod )

            ANTLR_UINT32 alt61;

            alt61=2;

            switch ( this->LA(1) )
            {
            case MINUS:
            	{
            		switch ( this->LA(2) )
            		{
            		case ACOS:
            		case ASIN:
            		case ATAN:
            		case BACKWARDCOMP:
            		case BFALSE:
            		case BTRUE:
            		case CLETTER:
            		case COS:
            		case COSH:
            		case DELTA:
            		case DOUBLE:
            		case E:
            		case EXP:
            		case ID:
            		case INT:
            		case LANDSCAPE:
            		case LATEX:
            		case LOG:
            		case LOGF:
            		case LONG:
            		case LPAREN:
            		case OUTPUT:
            		case R:
            		case SHORT:
            		case SIN:
            		case SINH:
            		case SLETTER:
            		case SQRT:
            		case SS:
            		case TAN:
            		case TANH:
            		case VERBOSE:
            		case ZERO:
            			{
            				alt61=1;
            			}
            		    break;
            		case PROD:
            			{
            				alt61=2;
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return val;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 61 );
            		    ex->set_state( 1 );


            		    goto ruleexpr_prodEx;

            		}

            	}
                break;
            case ACOS:
            case ASIN:
            case ATAN:
            case BACKWARDCOMP:
            case BFALSE:
            case BTRUE:
            case CLETTER:
            case COS:
            case COSH:
            case DELTA:
            case DOUBLE:
            case E:
            case EXP:
            case ID:
            case INT:
            case LANDSCAPE:
            case LATEX:
            case LOG:
            case LOGF:
            case LONG:
            case LPAREN:
            case OUTPUT:
            case R:
            case SHORT:
            case SIN:
            case SINH:
            case SLETTER:
            case SQRT:
            case SS:
            case TAN:
            case TANH:
            case VERBOSE:
            case ZERO:
            	{
            		alt61=1;
            	}
                break;
            case PROD:
            	{
            		alt61=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return val;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 61 );
                ex->set_state( 0 );


                goto ruleexpr_prodEx;

            }

            switch (alt61)
            {
        	case 1:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:460:7: e= expr_pow
        	    {
        	        this->followPush(FOLLOW_expr_pow_in_expr_prod2529);
        	        e=expr_pow();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_prodEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             val= e;
        	             
        	        }


        	    }
        	    break;
        	case 2:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:461:7: ( MINUS )? PROD ie= indexing_ex e= expr_prod
        	    {
        	        // ../gEcon_CURRENT/src//parser/gEcon.g:461:7: ( MINUS )?
        	        {
        	            int alt60=2;
        	            switch ( this->LA(1) )
        	            {
        	                case MINUS:
        	                	{
        	                		alt60=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt60)
        	            {
        	        	case 1:
        	        	    // ../gEcon_CURRENT/src//parser/gEcon.g:461:8: MINUS
        	        	    {
        	        	         this->matchToken(MINUS, &FOLLOW_MINUS_in_expr_prod2540);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruleexpr_prodEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return val;
        	        	        }


        	        	        if ( this->get_backtracking()==0 )
        	        	        {
        	        	             minus = true;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	         this->matchToken(PROD, &FOLLOW_PROD_in_expr_prod2547);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_prodEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        this->followPush(FOLLOW_indexing_ex_in_expr_prod2553);
        	        ie=indexing_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_prodEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        this->followPush(FOLLOW_expr_prod_in_expr_prod2559);
        	        e=expr_prod();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_prodEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {

        	                    val= ie.first ? prod(ie.first, e) : e;
        	             val= minus ? -
        	            val
        	             : val
        	            ;

        	                  
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleexpr_prodEx; /* Prevent compiler warnings */
    ruleexpr_prodEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return val;
}
/* $ANTLR end expr_prod */

/**
 * $ANTLR start list_indexing_ex
 * ../gEcon_CURRENT/src//parser/gEcon.g:467:1: list_indexing_ex returns [vec_idx_ex lie] : (ie= indexing_ex )* ;
 */
vec_idx_ex
gEconParser::list_indexing_ex()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    vec_idx_ex lie;


    std::pair<idx_ex, int> ie;
    typedef	std::pair<idx_ex, int> RETURN_TYPE_ie;

    /* Initialize rule variables
     */


        bool toomany = false;


 
    {
        // ../gEcon_CURRENT/src//parser/gEcon.g:471:5: ( (ie= indexing_ex )* )
        // ../gEcon_CURRENT/src//parser/gEcon.g:471:7: (ie= indexing_ex )*
        {
            // ../gEcon_CURRENT/src//parser/gEcon.g:471:7: (ie= indexing_ex )*

            for (;;)
            {
                int alt62=2;
                switch ( this->LA(1) )
                {
                case LANGBR:
                	{
                		alt62=1;
                	}
                    break;

                }

                switch (alt62)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src//parser/gEcon.g:471:8: ie= indexing_ex
            	    {
            	        this->followPush(FOLLOW_indexing_ex_in_list_indexing_ex2593);
            	        ie=indexing_ex();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulelist_indexing_exEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return lie;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {

            	                    lie.push_back(ie.first);
            	                    if (!toomany && (lie.size() > 2)) {
            	                        toomany = true;
            	                        errors.push_back("up to 2 indexing expressions in template declaration are supported; error near line "
            	                                            + num2str(ie.second));
            	                    }
            	                  
            	        }


            	    }
            	    break;

            	default:
            	    goto loop62;	/* break out of the loop */
            	    break;
                }
            }
            loop62: ; /* Jump out to here if this rule does not match */


            if ( this->get_backtracking()==0 )
            {
                 while (lie.size() < 2) lie.push_back(idx_ex()); 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulelist_indexing_exEx; /* Prevent compiler warnings */
    rulelist_indexing_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return lie;
}
/* $ANTLR end list_indexing_ex */

/**
 * $ANTLR start indexing_ex
 * ../gEcon_CURRENT/src//parser/gEcon.g:483:1: indexing_ex returns [std::pair<idx_ex, int> val] : ( LANGBR iv= id_str DBLCOLON is= id_str RANGBR | LANGBR iv= id_str DBLCOLON is= id_str BACKSLASH ei= id_str RANGBR | LANGBR iv= id_str DBLCOLON is= id_str BACKSLASH QUOTE ei= idx_str QUOTE RANGBR );
 */
std::pair<idx_ex, int>
gEconParser::indexing_ex()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    std::pair<idx_ex, int> val;


    const CommonTokenType*    RANGBR29;
    const CommonTokenType*    RANGBR30;
    const CommonTokenType*    RANGBR31;
    std::pair<std::string, int> iv;
    typedef	std::pair<std::string, int> RETURN_TYPE_iv;

    std::pair<std::string, int> is;
    typedef	std::pair<std::string, int> RETURN_TYPE_is;

    std::pair<std::string, int> ei;
    typedef	std::pair<std::string, int> RETURN_TYPE_ei;

    /* Initialize rule variables
     */


        idx_set iset;

    RANGBR29       = NULL;
    RANGBR30       = NULL;
    RANGBR31       = NULL;


 
    {
        {
            //  ../gEcon_CURRENT/src//parser/gEcon.g:487:5: ( LANGBR iv= id_str DBLCOLON is= id_str RANGBR | LANGBR iv= id_str DBLCOLON is= id_str BACKSLASH ei= id_str RANGBR | LANGBR iv= id_str DBLCOLON is= id_str BACKSLASH QUOTE ei= idx_str QUOTE RANGBR )

            ANTLR_UINT32 alt63;

            alt63=3;

            switch ( this->LA(1) )
            {
            case LANGBR:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				switch ( this->LA(3) )
            				{
            				case DBLCOLON:
            					{
            						switch ( this->LA(4) )
            						{
            						case ID:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 18 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 19 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case CLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 20 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case OUTPUT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 21 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case R:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 22 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LATEX:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 23 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LANDSCAPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 24 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LOGF:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 25 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LONG:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 26 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SHORT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 27 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BTRUE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 28 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BFALSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 29 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SS:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 30 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case VERBOSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 31 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BACKWARDCOMP:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 32 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;

            						default:
            						    if (this->get_backtracking()>0)
            						    {
            						        this->set_failedflag( true );
            						        return val;
            						    }

            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 63 );
            						    ex->set_state( 17 );


            						    goto ruleindexing_exEx;

            						}

            					}
            				    break;

            				default:
            				    if (this->get_backtracking()>0)
            				    {
            				        this->set_failedflag( true );
            				        return val;
            				    }

            				    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 63 );
            				    ex->set_state( 2 );


            				    goto ruleindexing_exEx;

            				}

            			}
            		    break;
            		case SLETTER:
            			{
            				switch ( this->LA(3) )
            				{
            				case DBLCOLON:
            					{
            						switch ( this->LA(4) )
            						{
            						case ID:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 18 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 19 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case CLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 20 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case OUTPUT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 21 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case R:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 22 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LATEX:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 23 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LANDSCAPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 24 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LOGF:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 25 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LONG:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 26 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SHORT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 27 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BTRUE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 28 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BFALSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 29 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SS:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 30 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case VERBOSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 31 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BACKWARDCOMP:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 32 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;

            						default:
            						    if (this->get_backtracking()>0)
            						    {
            						        this->set_failedflag( true );
            						        return val;
            						    }

            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 63 );
            						    ex->set_state( 17 );


            						    goto ruleindexing_exEx;

            						}

            					}
            				    break;

            				default:
            				    if (this->get_backtracking()>0)
            				    {
            				        this->set_failedflag( true );
            				        return val;
            				    }

            				    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 63 );
            				    ex->set_state( 3 );


            				    goto ruleindexing_exEx;

            				}

            			}
            		    break;
            		case CLETTER:
            			{
            				switch ( this->LA(3) )
            				{
            				case DBLCOLON:
            					{
            						switch ( this->LA(4) )
            						{
            						case ID:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 18 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 19 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case CLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 20 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case OUTPUT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 21 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case R:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 22 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LATEX:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 23 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LANDSCAPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 24 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LOGF:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 25 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LONG:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 26 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SHORT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 27 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BTRUE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 28 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BFALSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 29 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SS:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 30 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case VERBOSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 31 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BACKWARDCOMP:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 32 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;

            						default:
            						    if (this->get_backtracking()>0)
            						    {
            						        this->set_failedflag( true );
            						        return val;
            						    }

            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 63 );
            						    ex->set_state( 17 );


            						    goto ruleindexing_exEx;

            						}

            					}
            				    break;

            				default:
            				    if (this->get_backtracking()>0)
            				    {
            				        this->set_failedflag( true );
            				        return val;
            				    }

            				    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 63 );
            				    ex->set_state( 4 );


            				    goto ruleindexing_exEx;

            				}

            			}
            		    break;
            		case OUTPUT:
            			{
            				switch ( this->LA(3) )
            				{
            				case DBLCOLON:
            					{
            						switch ( this->LA(4) )
            						{
            						case ID:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 18 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 19 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case CLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 20 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case OUTPUT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 21 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case R:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 22 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LATEX:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 23 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LANDSCAPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 24 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LOGF:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 25 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LONG:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 26 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SHORT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 27 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BTRUE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 28 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BFALSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 29 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SS:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 30 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case VERBOSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 31 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BACKWARDCOMP:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 32 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;

            						default:
            						    if (this->get_backtracking()>0)
            						    {
            						        this->set_failedflag( true );
            						        return val;
            						    }

            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 63 );
            						    ex->set_state( 17 );


            						    goto ruleindexing_exEx;

            						}

            					}
            				    break;

            				default:
            				    if (this->get_backtracking()>0)
            				    {
            				        this->set_failedflag( true );
            				        return val;
            				    }

            				    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 63 );
            				    ex->set_state( 5 );


            				    goto ruleindexing_exEx;

            				}

            			}
            		    break;
            		case R:
            			{
            				switch ( this->LA(3) )
            				{
            				case DBLCOLON:
            					{
            						switch ( this->LA(4) )
            						{
            						case ID:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 18 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 19 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case CLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 20 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case OUTPUT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 21 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case R:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 22 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LATEX:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 23 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LANDSCAPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 24 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LOGF:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 25 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LONG:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 26 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SHORT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 27 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BTRUE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 28 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BFALSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 29 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SS:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 30 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case VERBOSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 31 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BACKWARDCOMP:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 32 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;

            						default:
            						    if (this->get_backtracking()>0)
            						    {
            						        this->set_failedflag( true );
            						        return val;
            						    }

            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 63 );
            						    ex->set_state( 17 );


            						    goto ruleindexing_exEx;

            						}

            					}
            				    break;

            				default:
            				    if (this->get_backtracking()>0)
            				    {
            				        this->set_failedflag( true );
            				        return val;
            				    }

            				    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 63 );
            				    ex->set_state( 6 );


            				    goto ruleindexing_exEx;

            				}

            			}
            		    break;
            		case LATEX:
            			{
            				switch ( this->LA(3) )
            				{
            				case DBLCOLON:
            					{
            						switch ( this->LA(4) )
            						{
            						case ID:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 18 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 19 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case CLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 20 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case OUTPUT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 21 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case R:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 22 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LATEX:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 23 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LANDSCAPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 24 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LOGF:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 25 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LONG:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 26 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SHORT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 27 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BTRUE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 28 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BFALSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 29 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SS:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 30 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case VERBOSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 31 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BACKWARDCOMP:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 32 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;

            						default:
            						    if (this->get_backtracking()>0)
            						    {
            						        this->set_failedflag( true );
            						        return val;
            						    }

            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 63 );
            						    ex->set_state( 17 );


            						    goto ruleindexing_exEx;

            						}

            					}
            				    break;

            				default:
            				    if (this->get_backtracking()>0)
            				    {
            				        this->set_failedflag( true );
            				        return val;
            				    }

            				    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 63 );
            				    ex->set_state( 7 );


            				    goto ruleindexing_exEx;

            				}

            			}
            		    break;
            		case LANDSCAPE:
            			{
            				switch ( this->LA(3) )
            				{
            				case DBLCOLON:
            					{
            						switch ( this->LA(4) )
            						{
            						case ID:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 18 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 19 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case CLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 20 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case OUTPUT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 21 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case R:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 22 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LATEX:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 23 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LANDSCAPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 24 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LOGF:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 25 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LONG:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 26 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SHORT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 27 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BTRUE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 28 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BFALSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 29 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SS:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 30 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case VERBOSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 31 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BACKWARDCOMP:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 32 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;

            						default:
            						    if (this->get_backtracking()>0)
            						    {
            						        this->set_failedflag( true );
            						        return val;
            						    }

            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 63 );
            						    ex->set_state( 17 );


            						    goto ruleindexing_exEx;

            						}

            					}
            				    break;

            				default:
            				    if (this->get_backtracking()>0)
            				    {
            				        this->set_failedflag( true );
            				        return val;
            				    }

            				    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 63 );
            				    ex->set_state( 8 );


            				    goto ruleindexing_exEx;

            				}

            			}
            		    break;
            		case LOGF:
            			{
            				switch ( this->LA(3) )
            				{
            				case DBLCOLON:
            					{
            						switch ( this->LA(4) )
            						{
            						case ID:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 18 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 19 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case CLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 20 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case OUTPUT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 21 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case R:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 22 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LATEX:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 23 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LANDSCAPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 24 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LOGF:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 25 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LONG:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 26 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SHORT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 27 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BTRUE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 28 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BFALSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 29 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SS:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 30 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case VERBOSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 31 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BACKWARDCOMP:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 32 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;

            						default:
            						    if (this->get_backtracking()>0)
            						    {
            						        this->set_failedflag( true );
            						        return val;
            						    }

            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 63 );
            						    ex->set_state( 17 );


            						    goto ruleindexing_exEx;

            						}

            					}
            				    break;

            				default:
            				    if (this->get_backtracking()>0)
            				    {
            				        this->set_failedflag( true );
            				        return val;
            				    }

            				    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 63 );
            				    ex->set_state( 9 );


            				    goto ruleindexing_exEx;

            				}

            			}
            		    break;
            		case LONG:
            			{
            				switch ( this->LA(3) )
            				{
            				case DBLCOLON:
            					{
            						switch ( this->LA(4) )
            						{
            						case ID:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 18 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 19 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case CLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 20 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case OUTPUT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 21 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case R:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 22 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LATEX:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 23 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LANDSCAPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 24 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LOGF:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 25 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LONG:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 26 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SHORT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 27 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BTRUE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 28 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BFALSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 29 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SS:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 30 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case VERBOSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 31 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BACKWARDCOMP:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 32 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;

            						default:
            						    if (this->get_backtracking()>0)
            						    {
            						        this->set_failedflag( true );
            						        return val;
            						    }

            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 63 );
            						    ex->set_state( 17 );


            						    goto ruleindexing_exEx;

            						}

            					}
            				    break;

            				default:
            				    if (this->get_backtracking()>0)
            				    {
            				        this->set_failedflag( true );
            				        return val;
            				    }

            				    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 63 );
            				    ex->set_state( 10 );


            				    goto ruleindexing_exEx;

            				}

            			}
            		    break;
            		case SHORT:
            			{
            				switch ( this->LA(3) )
            				{
            				case DBLCOLON:
            					{
            						switch ( this->LA(4) )
            						{
            						case ID:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 18 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 19 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case CLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 20 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case OUTPUT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 21 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case R:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 22 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LATEX:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 23 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LANDSCAPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 24 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LOGF:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 25 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LONG:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 26 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SHORT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 27 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BTRUE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 28 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BFALSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 29 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SS:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 30 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case VERBOSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 31 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BACKWARDCOMP:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 32 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;

            						default:
            						    if (this->get_backtracking()>0)
            						    {
            						        this->set_failedflag( true );
            						        return val;
            						    }

            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 63 );
            						    ex->set_state( 17 );


            						    goto ruleindexing_exEx;

            						}

            					}
            				    break;

            				default:
            				    if (this->get_backtracking()>0)
            				    {
            				        this->set_failedflag( true );
            				        return val;
            				    }

            				    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 63 );
            				    ex->set_state( 11 );


            				    goto ruleindexing_exEx;

            				}

            			}
            		    break;
            		case BTRUE:
            			{
            				switch ( this->LA(3) )
            				{
            				case DBLCOLON:
            					{
            						switch ( this->LA(4) )
            						{
            						case ID:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 18 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 19 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case CLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 20 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case OUTPUT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 21 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case R:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 22 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LATEX:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 23 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LANDSCAPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 24 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LOGF:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 25 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LONG:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 26 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SHORT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 27 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BTRUE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 28 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BFALSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 29 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SS:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 30 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case VERBOSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 31 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BACKWARDCOMP:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 32 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;

            						default:
            						    if (this->get_backtracking()>0)
            						    {
            						        this->set_failedflag( true );
            						        return val;
            						    }

            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 63 );
            						    ex->set_state( 17 );


            						    goto ruleindexing_exEx;

            						}

            					}
            				    break;

            				default:
            				    if (this->get_backtracking()>0)
            				    {
            				        this->set_failedflag( true );
            				        return val;
            				    }

            				    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 63 );
            				    ex->set_state( 12 );


            				    goto ruleindexing_exEx;

            				}

            			}
            		    break;
            		case BFALSE:
            			{
            				switch ( this->LA(3) )
            				{
            				case DBLCOLON:
            					{
            						switch ( this->LA(4) )
            						{
            						case ID:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 18 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 19 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case CLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 20 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case OUTPUT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 21 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case R:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 22 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LATEX:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 23 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LANDSCAPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 24 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LOGF:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 25 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LONG:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 26 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SHORT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 27 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BTRUE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 28 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BFALSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 29 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SS:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 30 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case VERBOSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 31 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BACKWARDCOMP:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 32 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;

            						default:
            						    if (this->get_backtracking()>0)
            						    {
            						        this->set_failedflag( true );
            						        return val;
            						    }

            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 63 );
            						    ex->set_state( 17 );


            						    goto ruleindexing_exEx;

            						}

            					}
            				    break;

            				default:
            				    if (this->get_backtracking()>0)
            				    {
            				        this->set_failedflag( true );
            				        return val;
            				    }

            				    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 63 );
            				    ex->set_state( 13 );


            				    goto ruleindexing_exEx;

            				}

            			}
            		    break;
            		case SS:
            			{
            				switch ( this->LA(3) )
            				{
            				case DBLCOLON:
            					{
            						switch ( this->LA(4) )
            						{
            						case ID:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 18 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 19 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case CLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 20 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case OUTPUT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 21 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case R:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 22 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LATEX:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 23 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LANDSCAPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 24 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LOGF:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 25 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LONG:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 26 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SHORT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 27 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BTRUE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 28 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BFALSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 29 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SS:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 30 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case VERBOSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 31 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BACKWARDCOMP:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 32 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;

            						default:
            						    if (this->get_backtracking()>0)
            						    {
            						        this->set_failedflag( true );
            						        return val;
            						    }

            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 63 );
            						    ex->set_state( 17 );


            						    goto ruleindexing_exEx;

            						}

            					}
            				    break;

            				default:
            				    if (this->get_backtracking()>0)
            				    {
            				        this->set_failedflag( true );
            				        return val;
            				    }

            				    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 63 );
            				    ex->set_state( 14 );


            				    goto ruleindexing_exEx;

            				}

            			}
            		    break;
            		case VERBOSE:
            			{
            				switch ( this->LA(3) )
            				{
            				case DBLCOLON:
            					{
            						switch ( this->LA(4) )
            						{
            						case ID:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 18 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 19 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case CLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 20 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case OUTPUT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 21 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case R:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 22 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LATEX:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 23 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LANDSCAPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 24 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LOGF:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 25 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LONG:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 26 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SHORT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 27 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BTRUE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 28 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BFALSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 29 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SS:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 30 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case VERBOSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 31 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BACKWARDCOMP:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 32 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;

            						default:
            						    if (this->get_backtracking()>0)
            						    {
            						        this->set_failedflag( true );
            						        return val;
            						    }

            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 63 );
            						    ex->set_state( 17 );


            						    goto ruleindexing_exEx;

            						}

            					}
            				    break;

            				default:
            				    if (this->get_backtracking()>0)
            				    {
            				        this->set_failedflag( true );
            				        return val;
            				    }

            				    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 63 );
            				    ex->set_state( 15 );


            				    goto ruleindexing_exEx;

            				}

            			}
            		    break;
            		case BACKWARDCOMP:
            			{
            				switch ( this->LA(3) )
            				{
            				case DBLCOLON:
            					{
            						switch ( this->LA(4) )
            						{
            						case ID:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 18 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 19 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case CLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 20 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case OUTPUT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 21 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case R:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 22 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LATEX:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 23 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LANDSCAPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 24 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LOGF:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 25 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case LONG:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 26 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SHORT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 27 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BTRUE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 28 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BFALSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 29 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case SS:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 30 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case VERBOSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 31 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;
            						case BACKWARDCOMP:
            							{
            								switch ( this->LA(5) )
            								{
            								case RANGBR:
            									{
            										alt63=1;
            									}
            								    break;
            								case BACKSLASH:
            									{
            										switch ( this->LA(6) )
            										{
            										case QUOTE:
            											{
            												alt63=3;
            											}
            										    break;
            										case BACKWARDCOMP:
            										case BFALSE:
            										case BTRUE:
            										case CLETTER:
            										case ID:
            										case LANDSCAPE:
            										case LATEX:
            										case LOGF:
            										case LONG:
            										case OUTPUT:
            										case R:
            										case SHORT:
            										case SLETTER:
            										case SS:
            										case VERBOSE:
            											{
            												alt63=2;
            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 63 );
            										    ex->set_state( 34 );


            										    goto ruleindexing_exEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 63 );
            								    ex->set_state( 32 );


            								    goto ruleindexing_exEx;

            								}

            							}
            						    break;

            						default:
            						    if (this->get_backtracking()>0)
            						    {
            						        this->set_failedflag( true );
            						        return val;
            						    }

            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 63 );
            						    ex->set_state( 17 );


            						    goto ruleindexing_exEx;

            						}

            					}
            				    break;

            				default:
            				    if (this->get_backtracking()>0)
            				    {
            				        this->set_failedflag( true );
            				        return val;
            				    }

            				    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 63 );
            				    ex->set_state( 16 );


            				    goto ruleindexing_exEx;

            				}

            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return val;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 63 );
            		    ex->set_state( 1 );


            		    goto ruleindexing_exEx;

            		}

            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return val;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 63 );
                ex->set_state( 0 );


                goto ruleindexing_exEx;

            }

            switch (alt63)
            {
        	case 1:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:487:7: LANGBR iv= id_str DBLCOLON is= id_str RANGBR
        	    {
        	         this->matchToken(LANGBR, &FOLLOW_LANGBR_in_indexing_ex2632);
        	        if  (this->hasException())
        	        {
        	            goto ruleindexing_exEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        this->followPush(FOLLOW_id_str_in_indexing_ex2638);
        	        iv=id_str();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleindexing_exEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	         this->matchToken(DBLCOLON, &FOLLOW_DBLCOLON_in_indexing_ex2640);
        	        if  (this->hasException())
        	        {
        	            goto ruleindexing_exEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        this->followPush(FOLLOW_id_str_in_indexing_ex2646);
        	        is=id_str();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleindexing_exEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        RANGBR29 =  this->matchToken(RANGBR, &FOLLOW_RANGBR_in_indexing_ex2648);
        	        if  (this->hasException())
        	        {
        	            goto ruleindexing_exEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {

        	                    if (!model_obj.is_set(is.first))
        	                        model_obj.error("undefined set \"" + is.first + "\" used in expression; error near line "
        	                                        + num2str((RANGBR29->get_line())) + ", pos: " + num2str(RANGBR29->get_charPositionInLine() + 1));
        	                    iset = model_obj.get_set(is.first);
        	                    if (!iset.size())
        	                        model_obj.warning("empty set \"" + is.first + "\" used in expression; warning near line "
        	                                        + num2str((RANGBR29->get_line())) + ", pos: " + num2str(RANGBR29->get_charPositionInLine() + 1));
        	                    
        	            val= std::pair<idx_ex, int>(idx_ex(iv.first, iset), (RANGBR29->get_line()));

        	                  
        	        }


        	    }
        	    break;
        	case 2:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:497:7: LANGBR iv= id_str DBLCOLON is= id_str BACKSLASH ei= id_str RANGBR
        	    {
        	         this->matchToken(LANGBR, &FOLLOW_LANGBR_in_indexing_ex2658);
        	        if  (this->hasException())
        	        {
        	            goto ruleindexing_exEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        this->followPush(FOLLOW_id_str_in_indexing_ex2664);
        	        iv=id_str();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleindexing_exEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	         this->matchToken(DBLCOLON, &FOLLOW_DBLCOLON_in_indexing_ex2666);
        	        if  (this->hasException())
        	        {
        	            goto ruleindexing_exEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        this->followPush(FOLLOW_id_str_in_indexing_ex2672);
        	        is=id_str();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleindexing_exEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	         this->matchToken(BACKSLASH, &FOLLOW_BACKSLASH_in_indexing_ex2674);
        	        if  (this->hasException())
        	        {
        	            goto ruleindexing_exEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        this->followPush(FOLLOW_id_str_in_indexing_ex2680);
        	        ei=id_str();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleindexing_exEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        RANGBR30 =  this->matchToken(RANGBR, &FOLLOW_RANGBR_in_indexing_ex2682);
        	        if  (this->hasException())
        	        {
        	            goto ruleindexing_exEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {

        	                    if (!model_obj.is_set(is.first))
        	                        model_obj.error("undefined set \"" + is.first + "\" used in expression; error near line "
        	                                        + num2str((RANGBR30->get_line())) + ", pos: " + num2str(RANGBR30->get_charPositionInLine() + 1));
        	                    iset = model_obj.get_set(is.first);
        	                    if (!iset.size())
        	                        model_obj.warning("empty set \"" + is.first + "\" used in expression; warning near line "
        	                                        + num2str((RANGBR30->get_line())) + ", pos: " + num2str(RANGBR30->get_charPositionInLine() + 1));
        	                    if (iv.first == ei.first)
        	                        model_obj.error("excluded index (\"" + ei.first + "\") is the same as free index in indexing expression; error near line " + num2str((RANGBR30->get_line())) + ", pos: " + num2str(RANGBR30->get_charPositionInLine() + 1));
        	                    
        	            val= std::pair<idx_ex, int>(idx_ex(iv.first, iset, ei.first, false), (RANGBR30->get_line()));

        	                  
        	        }


        	    }
        	    break;
        	case 3:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:509:7: LANGBR iv= id_str DBLCOLON is= id_str BACKSLASH QUOTE ei= idx_str QUOTE RANGBR
        	    {
        	         this->matchToken(LANGBR, &FOLLOW_LANGBR_in_indexing_ex2692);
        	        if  (this->hasException())
        	        {
        	            goto ruleindexing_exEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        this->followPush(FOLLOW_id_str_in_indexing_ex2698);
        	        iv=id_str();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleindexing_exEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	         this->matchToken(DBLCOLON, &FOLLOW_DBLCOLON_in_indexing_ex2700);
        	        if  (this->hasException())
        	        {
        	            goto ruleindexing_exEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        this->followPush(FOLLOW_id_str_in_indexing_ex2706);
        	        is=id_str();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleindexing_exEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	         this->matchToken(BACKSLASH, &FOLLOW_BACKSLASH_in_indexing_ex2708);
        	        if  (this->hasException())
        	        {
        	            goto ruleindexing_exEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	         this->matchToken(QUOTE, &FOLLOW_QUOTE_in_indexing_ex2710);
        	        if  (this->hasException())
        	        {
        	            goto ruleindexing_exEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        this->followPush(FOLLOW_idx_str_in_indexing_ex2716);
        	        ei=idx_str();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleindexing_exEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	         this->matchToken(QUOTE, &FOLLOW_QUOTE_in_indexing_ex2718);
        	        if  (this->hasException())
        	        {
        	            goto ruleindexing_exEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        RANGBR31 =  this->matchToken(RANGBR, &FOLLOW_RANGBR_in_indexing_ex2720);
        	        if  (this->hasException())
        	        {
        	            goto ruleindexing_exEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {

        	                    if (!model_obj.is_set(is.first))
        	                        model_obj.error("undefined set \"" + is.first + "\" used in expression; error near line "
        	                                        + num2str((RANGBR31->get_line())) + ", pos: " + num2str(RANGBR31->get_charPositionInLine() + 1));
        	                    iset = model_obj.get_set(is.first);
        	                    if (!iset.size())
        	                        model_obj.warning("empty set \"" + is.first + "\" used in expression; warning near line "
        	                                        + num2str((RANGBR31->get_line())) + ", pos: " + num2str(RANGBR31->get_charPositionInLine() + 1));
        	                    
        	            val= std::pair<idx_ex, int>(idx_ex(iv.first, iset, ei.first, true), (RANGBR31->get_line()));

        	                  
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleindexing_exEx; /* Prevent compiler warnings */
    ruleindexing_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return val;
}
/* $ANTLR end indexing_ex */

/**
 * $ANTLR start expr_pow
 * ../gEcon_CURRENT/src//parser/gEcon.g:521:1: expr_pow returns [ex val] : ( MINUS )? a= expr_atom ( POW ( MINUS )? b= expr_atom )* ;
 */
ex
gEconParser::expr_pow()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    ex val;


    ex a;
    typedef	ex RETURN_TYPE_a;

    ex b;
    typedef	ex RETURN_TYPE_b;

    /* Initialize rule variables
     */


        bool min = false;
        vec_ex ve;
        std::vector<bool> vs;


 
    {
        // ../gEcon_CURRENT/src//parser/gEcon.g:527:5: ( ( MINUS )? a= expr_atom ( POW ( MINUS )? b= expr_atom )* )
        // ../gEcon_CURRENT/src//parser/gEcon.g:527:7: ( MINUS )? a= expr_atom ( POW ( MINUS )? b= expr_atom )*
        {
            // ../gEcon_CURRENT/src//parser/gEcon.g:527:7: ( MINUS )?
            {
                int alt64=2;
                switch ( this->LA(1) )
                {
                    case MINUS:
                    	{
                    		alt64=1;
                    	}
                        break;
                }

                switch (alt64)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src//parser/gEcon.g:527:8: MINUS
            	    {
            	         this->matchToken(MINUS, &FOLLOW_MINUS_in_expr_pow2749);
            	        if  (this->hasException())
            	        {
            	            goto ruleexpr_powEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return val;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             min = true; 
            	        }


            	    }
            	    break;

                }
            }

            this->followPush(FOLLOW_expr_atom_in_expr_pow2767);
            a=expr_atom();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleexpr_powEx;
            }
            if (this->hasFailed())
            {
                return val;
            }


            if ( this->get_backtracking()==0 )
            {
                 ve.push_back(a); vs.push_back(min); 
            }


            // ../gEcon_CURRENT/src//parser/gEcon.g:529:9: ( POW ( MINUS )? b= expr_atom )*

            for (;;)
            {
                int alt66=2;
                switch ( this->LA(1) )
                {
                case POW:
                	{
                		alt66=1;
                	}
                    break;

                }

                switch (alt66)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src//parser/gEcon.g:529:10: POW ( MINUS )? b= expr_atom
            	    {
            	         this->matchToken(POW, &FOLLOW_POW_in_expr_pow2780);
            	        if  (this->hasException())
            	        {
            	            goto ruleexpr_powEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return val;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             min = false; 
            	        }


            	        // ../gEcon_CURRENT/src//parser/gEcon.g:529:31: ( MINUS )?
            	        {
            	            int alt65=2;
            	            switch ( this->LA(1) )
            	            {
            	                case MINUS:
            	                	{
            	                		alt65=1;
            	                	}
            	                    break;
            	            }

            	            switch (alt65)
            	            {
            	        	case 1:
            	        	    // ../gEcon_CURRENT/src//parser/gEcon.g:529:32: MINUS
            	        	    {
            	        	         this->matchToken(MINUS, &FOLLOW_MINUS_in_expr_pow2785);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleexpr_powEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return val;
            	        	        }


            	        	        if ( this->get_backtracking()==0 )
            	        	        {
            	        	             min = true; 
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        this->followPush(FOLLOW_expr_atom_in_expr_pow2795);
            	        b=expr_atom();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexpr_powEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return val;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	             ve.push_back(b); vs.push_back(min); 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop66;	/* break out of the loop */
            	    break;
                }
            }
            loop66: ; /* Jump out to here if this rule does not match */


            if ( this->get_backtracking()==0 )
            {

                            int i = ve.size() - 1;
                            val = ve[i];
                            if (vs[i]) val = -val;
                            for (--i; i >= 0; --i) {
                                val = pow(ve[i], val);
                                if (vs[i]) val = -val;
                            }
                        
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleexpr_powEx; /* Prevent compiler warnings */
    ruleexpr_powEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return val;
}
/* $ANTLR end expr_pow */

/**
 * $ANTLR start expr_atom
 * ../gEcon_CURRENT/src//parser/gEcon.g:543:1: expr_atom returns [ex val] : (a= atom_num |a= atom_id |a= atom_delta |a= expr_func |a= expr_e | LPAREN (a= expr ) RPAREN );
 */
ex
gEconParser::expr_atom()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    ex val;


    ex a;
    typedef	ex RETURN_TYPE_a;

    /* Initialize rule variables
     */


 
    {
        {
            //  ../gEcon_CURRENT/src//parser/gEcon.g:544:5: (a= atom_num |a= atom_id |a= atom_delta |a= expr_func |a= expr_e | LPAREN (a= expr ) RPAREN )

            ANTLR_UINT32 alt67;

            alt67=6;

            switch ( this->LA(1) )
            {
            case DOUBLE:
            case INT:
            case ZERO:
            	{
            		alt67=1;
            	}
                break;
            case BACKWARDCOMP:
            case BFALSE:
            case BTRUE:
            case CLETTER:
            case ID:
            case LANDSCAPE:
            case LATEX:
            case LOGF:
            case LONG:
            case OUTPUT:
            case R:
            case SHORT:
            case SLETTER:
            case SS:
            case VERBOSE:
            	{
            		alt67=2;
            	}
                break;
            case DELTA:
            	{
            		alt67=3;
            	}
                break;
            case ACOS:
            case ASIN:
            case ATAN:
            case COS:
            case COSH:
            case EXP:
            case LOG:
            case SIN:
            case SINH:
            case SQRT:
            case TAN:
            case TANH:
            	{
            		alt67=4;
            	}
                break;
            case E:
            	{
            		alt67=5;
            	}
                break;
            case LPAREN:
            	{
            		alt67=6;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return val;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 67 );
                ex->set_state( 0 );


                goto ruleexpr_atomEx;

            }

            switch (alt67)
            {
        	case 1:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:544:7: a= atom_num
        	    {
        	        this->followPush(FOLLOW_atom_num_in_expr_atom2843);
        	        a=atom_num();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_atomEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             val= a;
        	             
        	        }


        	    }
        	    break;
        	case 2:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:545:7: a= atom_id
        	    {
        	        this->followPush(FOLLOW_atom_id_in_expr_atom2857);
        	        a=atom_id();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_atomEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             val= a;
        	             
        	        }


        	    }
        	    break;
        	case 3:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:546:7: a= atom_delta
        	    {
        	        this->followPush(FOLLOW_atom_delta_in_expr_atom2871);
        	        a=atom_delta();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_atomEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             val= a;
        	             
        	        }


        	    }
        	    break;
        	case 4:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:547:7: a= expr_func
        	    {
        	        this->followPush(FOLLOW_expr_func_in_expr_atom2885);
        	        a=expr_func();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_atomEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             val= a;
        	             
        	        }


        	    }
        	    break;
        	case 5:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:548:7: a= expr_e
        	    {
        	        this->followPush(FOLLOW_expr_e_in_expr_atom2899);
        	        a=expr_e();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_atomEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             val= a;
        	             
        	        }


        	    }
        	    break;
        	case 6:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:549:7: LPAREN (a= expr ) RPAREN
        	    {
        	         this->matchToken(LPAREN, &FOLLOW_LPAREN_in_expr_atom2909);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_atomEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        // ../gEcon_CURRENT/src//parser/gEcon.g:549:14: (a= expr )
        	        // ../gEcon_CURRENT/src//parser/gEcon.g:549:15: a= expr
        	        {
        	            this->followPush(FOLLOW_expr_in_expr_atom2916);
        	            a=expr();

        	            this->followPop();
        	            if  (this->hasException())
        	            {
        	                goto ruleexpr_atomEx;
        	            }
        	            if (this->hasFailed())
        	            {
        	                return val;
        	            }


        	            if ( this->get_backtracking()==0 )
        	            {
        	                 val= a;
        	                 
        	            }


        	        }


        	         this->matchToken(RPAREN, &FOLLOW_RPAREN_in_expr_atom2921);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_atomEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleexpr_atomEx; /* Prevent compiler warnings */
    ruleexpr_atomEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return val;
}
/* $ANTLR end expr_atom */

/**
 * $ANTLR start expr_func
 * ../gEcon_CURRENT/src//parser/gEcon.g:552:1: expr_func returns [ex val] : ( SQRT LPAREN a= expr RPAREN | EXP LPAREN a= expr RPAREN | LOG LPAREN a= expr RPAREN | SIN LPAREN a= expr RPAREN | COS LPAREN a= expr RPAREN | TAN LPAREN a= expr RPAREN | ASIN LPAREN a= expr RPAREN | ACOS LPAREN a= expr RPAREN | ATAN LPAREN a= expr RPAREN | SINH LPAREN a= expr RPAREN | COSH LPAREN a= expr RPAREN | TANH LPAREN a= expr RPAREN );
 */
ex
gEconParser::expr_func()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    ex val;


    ex a;
    typedef	ex RETURN_TYPE_a;

    /* Initialize rule variables
     */


 
    {
        {
            //  ../gEcon_CURRENT/src//parser/gEcon.g:553:5: ( SQRT LPAREN a= expr RPAREN | EXP LPAREN a= expr RPAREN | LOG LPAREN a= expr RPAREN | SIN LPAREN a= expr RPAREN | COS LPAREN a= expr RPAREN | TAN LPAREN a= expr RPAREN | ASIN LPAREN a= expr RPAREN | ACOS LPAREN a= expr RPAREN | ATAN LPAREN a= expr RPAREN | SINH LPAREN a= expr RPAREN | COSH LPAREN a= expr RPAREN | TANH LPAREN a= expr RPAREN )

            ANTLR_UINT32 alt68;

            alt68=12;

            switch ( this->LA(1) )
            {
            case SQRT:
            	{
            		alt68=1;
            	}
                break;
            case EXP:
            	{
            		alt68=2;
            	}
                break;
            case LOG:
            	{
            		alt68=3;
            	}
                break;
            case SIN:
            	{
            		alt68=4;
            	}
                break;
            case COS:
            	{
            		alt68=5;
            	}
                break;
            case TAN:
            	{
            		alt68=6;
            	}
                break;
            case ASIN:
            	{
            		alt68=7;
            	}
                break;
            case ACOS:
            	{
            		alt68=8;
            	}
                break;
            case ATAN:
            	{
            		alt68=9;
            	}
                break;
            case SINH:
            	{
            		alt68=10;
            	}
                break;
            case COSH:
            	{
            		alt68=11;
            	}
                break;
            case TANH:
            	{
            		alt68=12;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return val;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 68 );
                ex->set_state( 0 );


                goto ruleexpr_funcEx;

            }

            switch (alt68)
            {
        	case 1:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:553:7: SQRT LPAREN a= expr RPAREN
        	    {
        	         this->matchToken(SQRT, &FOLLOW_SQRT_in_expr_func2942);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	         this->matchToken(LPAREN, &FOLLOW_LPAREN_in_expr_func2944);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        this->followPush(FOLLOW_expr_in_expr_func2950);
        	        a=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	         this->matchToken(RPAREN, &FOLLOW_RPAREN_in_expr_func2952);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             val= sqrt(a);
        	             
        	        }


        	    }
        	    break;
        	case 2:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:554:7: EXP LPAREN a= expr RPAREN
        	    {
        	         this->matchToken(EXP, &FOLLOW_EXP_in_expr_func2962);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	         this->matchToken(LPAREN, &FOLLOW_LPAREN_in_expr_func2964);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        this->followPush(FOLLOW_expr_in_expr_func2970);
        	        a=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	         this->matchToken(RPAREN, &FOLLOW_RPAREN_in_expr_func2972);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             val= exp(a);
        	             
        	        }


        	    }
        	    break;
        	case 3:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:555:7: LOG LPAREN a= expr RPAREN
        	    {
        	         this->matchToken(LOG, &FOLLOW_LOG_in_expr_func2982);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	         this->matchToken(LPAREN, &FOLLOW_LPAREN_in_expr_func2984);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        this->followPush(FOLLOW_expr_in_expr_func2990);
        	        a=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	         this->matchToken(RPAREN, &FOLLOW_RPAREN_in_expr_func2992);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             val= log(a);
        	             
        	        }


        	    }
        	    break;
        	case 4:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:556:7: SIN LPAREN a= expr RPAREN
        	    {
        	         this->matchToken(SIN, &FOLLOW_SIN_in_expr_func3002);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	         this->matchToken(LPAREN, &FOLLOW_LPAREN_in_expr_func3004);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        this->followPush(FOLLOW_expr_in_expr_func3010);
        	        a=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	         this->matchToken(RPAREN, &FOLLOW_RPAREN_in_expr_func3012);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             val= sin(a);
        	             
        	        }


        	    }
        	    break;
        	case 5:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:557:7: COS LPAREN a= expr RPAREN
        	    {
        	         this->matchToken(COS, &FOLLOW_COS_in_expr_func3022);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	         this->matchToken(LPAREN, &FOLLOW_LPAREN_in_expr_func3024);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        this->followPush(FOLLOW_expr_in_expr_func3030);
        	        a=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	         this->matchToken(RPAREN, &FOLLOW_RPAREN_in_expr_func3032);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             val= cos(a);
        	             
        	        }


        	    }
        	    break;
        	case 6:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:558:7: TAN LPAREN a= expr RPAREN
        	    {
        	         this->matchToken(TAN, &FOLLOW_TAN_in_expr_func3042);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	         this->matchToken(LPAREN, &FOLLOW_LPAREN_in_expr_func3044);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        this->followPush(FOLLOW_expr_in_expr_func3050);
        	        a=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	         this->matchToken(RPAREN, &FOLLOW_RPAREN_in_expr_func3052);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             val= tan(a);
        	             
        	        }


        	    }
        	    break;
        	case 7:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:559:7: ASIN LPAREN a= expr RPAREN
        	    {
        	         this->matchToken(ASIN, &FOLLOW_ASIN_in_expr_func3062);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	         this->matchToken(LPAREN, &FOLLOW_LPAREN_in_expr_func3064);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        this->followPush(FOLLOW_expr_in_expr_func3070);
        	        a=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	         this->matchToken(RPAREN, &FOLLOW_RPAREN_in_expr_func3072);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             val= asin(a);
        	             
        	        }


        	    }
        	    break;
        	case 8:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:560:7: ACOS LPAREN a= expr RPAREN
        	    {
        	         this->matchToken(ACOS, &FOLLOW_ACOS_in_expr_func3082);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	         this->matchToken(LPAREN, &FOLLOW_LPAREN_in_expr_func3084);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        this->followPush(FOLLOW_expr_in_expr_func3090);
        	        a=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	         this->matchToken(RPAREN, &FOLLOW_RPAREN_in_expr_func3092);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             val= acos(a);
        	             
        	        }


        	    }
        	    break;
        	case 9:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:561:7: ATAN LPAREN a= expr RPAREN
        	    {
        	         this->matchToken(ATAN, &FOLLOW_ATAN_in_expr_func3102);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	         this->matchToken(LPAREN, &FOLLOW_LPAREN_in_expr_func3104);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        this->followPush(FOLLOW_expr_in_expr_func3110);
        	        a=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	         this->matchToken(RPAREN, &FOLLOW_RPAREN_in_expr_func3112);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             val= atan(a);
        	             
        	        }


        	    }
        	    break;
        	case 10:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:562:7: SINH LPAREN a= expr RPAREN
        	    {
        	         this->matchToken(SINH, &FOLLOW_SINH_in_expr_func3122);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	         this->matchToken(LPAREN, &FOLLOW_LPAREN_in_expr_func3124);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        this->followPush(FOLLOW_expr_in_expr_func3130);
        	        a=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	         this->matchToken(RPAREN, &FOLLOW_RPAREN_in_expr_func3132);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             val= sinh(a);
        	             
        	        }


        	    }
        	    break;
        	case 11:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:563:7: COSH LPAREN a= expr RPAREN
        	    {
        	         this->matchToken(COSH, &FOLLOW_COSH_in_expr_func3142);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	         this->matchToken(LPAREN, &FOLLOW_LPAREN_in_expr_func3144);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        this->followPush(FOLLOW_expr_in_expr_func3150);
        	        a=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	         this->matchToken(RPAREN, &FOLLOW_RPAREN_in_expr_func3152);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             val= cosh(a);
        	             
        	        }


        	    }
        	    break;
        	case 12:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:564:7: TANH LPAREN a= expr RPAREN
        	    {
        	         this->matchToken(TANH, &FOLLOW_TANH_in_expr_func3162);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	         this->matchToken(LPAREN, &FOLLOW_LPAREN_in_expr_func3164);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        this->followPush(FOLLOW_expr_in_expr_func3170);
        	        a=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	         this->matchToken(RPAREN, &FOLLOW_RPAREN_in_expr_func3172);
        	        if  (this->hasException())
        	        {
        	            goto ruleexpr_funcEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             val= tanh(a);
        	             
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleexpr_funcEx; /* Prevent compiler warnings */
    ruleexpr_funcEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return val;
}
/* $ANTLR end expr_func */

/**
 * $ANTLR start expr_e
 * ../gEcon_CURRENT/src//parser/gEcon.g:568:1: expr_e returns [ex val] : E LBRACK l= time_idx RBRACK LBRACK a= expr RBRACK ;
 */
ex
gEconParser::expr_e()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    ex val;


    int l;
    typedef	int RETURN_TYPE_l;

    ex a;
    typedef	ex RETURN_TYPE_a;

    /* Initialize rule variables
     */


 
    {
        // ../gEcon_CURRENT/src//parser/gEcon.g:569:5: ( E LBRACK l= time_idx RBRACK LBRACK a= expr RBRACK )
        // ../gEcon_CURRENT/src//parser/gEcon.g:569:7: E LBRACK l= time_idx RBRACK LBRACK a= expr RBRACK
        {
             this->matchToken(E, &FOLLOW_E_in_expr_e3196);
            if  (this->hasException())
            {
                goto ruleexpr_eEx;
            }
            if (this->hasFailed())
            {
                return val;
            }


             this->matchToken(LBRACK, &FOLLOW_LBRACK_in_expr_e3198);
            if  (this->hasException())
            {
                goto ruleexpr_eEx;
            }
            if (this->hasFailed())
            {
                return val;
            }


            this->followPush(FOLLOW_time_idx_in_expr_e3204);
            l=time_idx();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleexpr_eEx;
            }
            if (this->hasFailed())
            {
                return val;
            }


             this->matchToken(RBRACK, &FOLLOW_RBRACK_in_expr_e3206);
            if  (this->hasException())
            {
                goto ruleexpr_eEx;
            }
            if (this->hasFailed())
            {
                return val;
            }


             this->matchToken(LBRACK, &FOLLOW_LBRACK_in_expr_e3208);
            if  (this->hasException())
            {
                goto ruleexpr_eEx;
            }
            if (this->hasFailed())
            {
                return val;
            }


            this->followPush(FOLLOW_expr_in_expr_e3214);
            a=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleexpr_eEx;
            }
            if (this->hasFailed())
            {
                return val;
            }


             this->matchToken(RBRACK, &FOLLOW_RBRACK_in_expr_e3216);
            if  (this->hasException())
            {
                goto ruleexpr_eEx;
            }
            if (this->hasFailed())
            {
                return val;
            }


            if ( this->get_backtracking()==0 )
            {
                 val= symbolic::E(a, l);

            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleexpr_eEx; /* Prevent compiler warnings */
    ruleexpr_eEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return val;
}
/* $ANTLR end expr_e */

/**
 * $ANTLR start atom_delta
 * ../gEcon_CURRENT/src//parser/gEcon.g:572:1: atom_delta returns [ex val] : ( DELTA LANGBR i1= id_str COMMA i2= id_str RANGBR | DELTA LANGBR QUOTE i1= idx_str QUOTE COMMA i2= idx_str RANGBR | DELTA LANGBR i1= id_str COMMA QUOTE i2= idx_str QUOTE RANGBR | DELTA LANGBR QUOTE i1= idx_str QUOTE COMMA QUOTE i2= idx_str QUOTE RANGBR );
 */
ex
gEconParser::atom_delta()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    ex val;


    std::pair<std::string, int> i1;
    typedef	std::pair<std::string, int> RETURN_TYPE_i1;

    std::pair<std::string, int> i2;
    typedef	std::pair<std::string, int> RETURN_TYPE_i2;

    /* Initialize rule variables
     */


 
    {
        {
            //  ../gEcon_CURRENT/src//parser/gEcon.g:573:5: ( DELTA LANGBR i1= id_str COMMA i2= id_str RANGBR | DELTA LANGBR QUOTE i1= idx_str QUOTE COMMA i2= idx_str RANGBR | DELTA LANGBR i1= id_str COMMA QUOTE i2= idx_str QUOTE RANGBR | DELTA LANGBR QUOTE i1= idx_str QUOTE COMMA QUOTE i2= idx_str QUOTE RANGBR )

            ANTLR_UINT32 alt69;

            alt69=4;

            switch ( this->LA(1) )
            {
            case DELTA:
            	{
            		switch ( this->LA(2) )
            		{
            		case LANGBR:
            			{
            				switch ( this->LA(3) )
            				{
            				case QUOTE:
            					{
            						switch ( this->LA(4) )
            						{
            						case ID:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										switch ( this->LA(6) )
            										{
            										case COMMA:
            											{
            												switch ( this->LA(7) )
            												{
            												case QUOTE:
            													{
            														alt69=4;
            													}
            												    break;
            												case BACKWARDCOMP:
            												case BFALSE:
            												case BTRUE:
            												case CLETTER:
            												case DID:
            												case E:
            												case ID:
            												case INF:
            												case INT:
            												case LANDSCAPE:
            												case LATEX:
            												case LOGF:
            												case LONG:
            												case OUTPUT:
            												case R:
            												case SHORT:
            												case SLETTER:
            												case SS:
            												case VERBOSE:
            												case ZERO:
            													{
            														alt69=2;
            													}
            												    break;

            												default:
            												    if (this->get_backtracking()>0)
            												    {
            												        this->set_failedflag( true );
            												        return val;
            												    }

            												    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 69 );
            												    ex->set_state( 43 );


            												    goto ruleatom_deltaEx;

            												}

            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 69 );
            										    ex->set_state( 40 );


            										    goto ruleatom_deltaEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 69 );
            								    ex->set_state( 19 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;
            						case SLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										switch ( this->LA(6) )
            										{
            										case COMMA:
            											{
            												switch ( this->LA(7) )
            												{
            												case QUOTE:
            													{
            														alt69=4;
            													}
            												    break;
            												case BACKWARDCOMP:
            												case BFALSE:
            												case BTRUE:
            												case CLETTER:
            												case DID:
            												case E:
            												case ID:
            												case INF:
            												case INT:
            												case LANDSCAPE:
            												case LATEX:
            												case LOGF:
            												case LONG:
            												case OUTPUT:
            												case R:
            												case SHORT:
            												case SLETTER:
            												case SS:
            												case VERBOSE:
            												case ZERO:
            													{
            														alt69=2;
            													}
            												    break;

            												default:
            												    if (this->get_backtracking()>0)
            												    {
            												        this->set_failedflag( true );
            												        return val;
            												    }

            												    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 69 );
            												    ex->set_state( 43 );


            												    goto ruleatom_deltaEx;

            												}

            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 69 );
            										    ex->set_state( 40 );


            										    goto ruleatom_deltaEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 69 );
            								    ex->set_state( 20 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;
            						case CLETTER:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										switch ( this->LA(6) )
            										{
            										case COMMA:
            											{
            												switch ( this->LA(7) )
            												{
            												case QUOTE:
            													{
            														alt69=4;
            													}
            												    break;
            												case BACKWARDCOMP:
            												case BFALSE:
            												case BTRUE:
            												case CLETTER:
            												case DID:
            												case E:
            												case ID:
            												case INF:
            												case INT:
            												case LANDSCAPE:
            												case LATEX:
            												case LOGF:
            												case LONG:
            												case OUTPUT:
            												case R:
            												case SHORT:
            												case SLETTER:
            												case SS:
            												case VERBOSE:
            												case ZERO:
            													{
            														alt69=2;
            													}
            												    break;

            												default:
            												    if (this->get_backtracking()>0)
            												    {
            												        this->set_failedflag( true );
            												        return val;
            												    }

            												    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 69 );
            												    ex->set_state( 43 );


            												    goto ruleatom_deltaEx;

            												}

            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 69 );
            										    ex->set_state( 40 );


            										    goto ruleatom_deltaEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 69 );
            								    ex->set_state( 21 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;
            						case OUTPUT:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										switch ( this->LA(6) )
            										{
            										case COMMA:
            											{
            												switch ( this->LA(7) )
            												{
            												case QUOTE:
            													{
            														alt69=4;
            													}
            												    break;
            												case BACKWARDCOMP:
            												case BFALSE:
            												case BTRUE:
            												case CLETTER:
            												case DID:
            												case E:
            												case ID:
            												case INF:
            												case INT:
            												case LANDSCAPE:
            												case LATEX:
            												case LOGF:
            												case LONG:
            												case OUTPUT:
            												case R:
            												case SHORT:
            												case SLETTER:
            												case SS:
            												case VERBOSE:
            												case ZERO:
            													{
            														alt69=2;
            													}
            												    break;

            												default:
            												    if (this->get_backtracking()>0)
            												    {
            												        this->set_failedflag( true );
            												        return val;
            												    }

            												    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 69 );
            												    ex->set_state( 43 );


            												    goto ruleatom_deltaEx;

            												}

            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 69 );
            										    ex->set_state( 40 );


            										    goto ruleatom_deltaEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 69 );
            								    ex->set_state( 22 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;
            						case R:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										switch ( this->LA(6) )
            										{
            										case COMMA:
            											{
            												switch ( this->LA(7) )
            												{
            												case QUOTE:
            													{
            														alt69=4;
            													}
            												    break;
            												case BACKWARDCOMP:
            												case BFALSE:
            												case BTRUE:
            												case CLETTER:
            												case DID:
            												case E:
            												case ID:
            												case INF:
            												case INT:
            												case LANDSCAPE:
            												case LATEX:
            												case LOGF:
            												case LONG:
            												case OUTPUT:
            												case R:
            												case SHORT:
            												case SLETTER:
            												case SS:
            												case VERBOSE:
            												case ZERO:
            													{
            														alt69=2;
            													}
            												    break;

            												default:
            												    if (this->get_backtracking()>0)
            												    {
            												        this->set_failedflag( true );
            												        return val;
            												    }

            												    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 69 );
            												    ex->set_state( 43 );


            												    goto ruleatom_deltaEx;

            												}

            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 69 );
            										    ex->set_state( 40 );


            										    goto ruleatom_deltaEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 69 );
            								    ex->set_state( 23 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;
            						case LATEX:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										switch ( this->LA(6) )
            										{
            										case COMMA:
            											{
            												switch ( this->LA(7) )
            												{
            												case QUOTE:
            													{
            														alt69=4;
            													}
            												    break;
            												case BACKWARDCOMP:
            												case BFALSE:
            												case BTRUE:
            												case CLETTER:
            												case DID:
            												case E:
            												case ID:
            												case INF:
            												case INT:
            												case LANDSCAPE:
            												case LATEX:
            												case LOGF:
            												case LONG:
            												case OUTPUT:
            												case R:
            												case SHORT:
            												case SLETTER:
            												case SS:
            												case VERBOSE:
            												case ZERO:
            													{
            														alt69=2;
            													}
            												    break;

            												default:
            												    if (this->get_backtracking()>0)
            												    {
            												        this->set_failedflag( true );
            												        return val;
            												    }

            												    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 69 );
            												    ex->set_state( 43 );


            												    goto ruleatom_deltaEx;

            												}

            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 69 );
            										    ex->set_state( 40 );


            										    goto ruleatom_deltaEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 69 );
            								    ex->set_state( 24 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;
            						case LANDSCAPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										switch ( this->LA(6) )
            										{
            										case COMMA:
            											{
            												switch ( this->LA(7) )
            												{
            												case QUOTE:
            													{
            														alt69=4;
            													}
            												    break;
            												case BACKWARDCOMP:
            												case BFALSE:
            												case BTRUE:
            												case CLETTER:
            												case DID:
            												case E:
            												case ID:
            												case INF:
            												case INT:
            												case LANDSCAPE:
            												case LATEX:
            												case LOGF:
            												case LONG:
            												case OUTPUT:
            												case R:
            												case SHORT:
            												case SLETTER:
            												case SS:
            												case VERBOSE:
            												case ZERO:
            													{
            														alt69=2;
            													}
            												    break;

            												default:
            												    if (this->get_backtracking()>0)
            												    {
            												        this->set_failedflag( true );
            												        return val;
            												    }

            												    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 69 );
            												    ex->set_state( 43 );


            												    goto ruleatom_deltaEx;

            												}

            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 69 );
            										    ex->set_state( 40 );


            										    goto ruleatom_deltaEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 69 );
            								    ex->set_state( 25 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;
            						case LOGF:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										switch ( this->LA(6) )
            										{
            										case COMMA:
            											{
            												switch ( this->LA(7) )
            												{
            												case QUOTE:
            													{
            														alt69=4;
            													}
            												    break;
            												case BACKWARDCOMP:
            												case BFALSE:
            												case BTRUE:
            												case CLETTER:
            												case DID:
            												case E:
            												case ID:
            												case INF:
            												case INT:
            												case LANDSCAPE:
            												case LATEX:
            												case LOGF:
            												case LONG:
            												case OUTPUT:
            												case R:
            												case SHORT:
            												case SLETTER:
            												case SS:
            												case VERBOSE:
            												case ZERO:
            													{
            														alt69=2;
            													}
            												    break;

            												default:
            												    if (this->get_backtracking()>0)
            												    {
            												        this->set_failedflag( true );
            												        return val;
            												    }

            												    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 69 );
            												    ex->set_state( 43 );


            												    goto ruleatom_deltaEx;

            												}

            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 69 );
            										    ex->set_state( 40 );


            										    goto ruleatom_deltaEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 69 );
            								    ex->set_state( 26 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;
            						case LONG:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										switch ( this->LA(6) )
            										{
            										case COMMA:
            											{
            												switch ( this->LA(7) )
            												{
            												case QUOTE:
            													{
            														alt69=4;
            													}
            												    break;
            												case BACKWARDCOMP:
            												case BFALSE:
            												case BTRUE:
            												case CLETTER:
            												case DID:
            												case E:
            												case ID:
            												case INF:
            												case INT:
            												case LANDSCAPE:
            												case LATEX:
            												case LOGF:
            												case LONG:
            												case OUTPUT:
            												case R:
            												case SHORT:
            												case SLETTER:
            												case SS:
            												case VERBOSE:
            												case ZERO:
            													{
            														alt69=2;
            													}
            												    break;

            												default:
            												    if (this->get_backtracking()>0)
            												    {
            												        this->set_failedflag( true );
            												        return val;
            												    }

            												    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 69 );
            												    ex->set_state( 43 );


            												    goto ruleatom_deltaEx;

            												}

            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 69 );
            										    ex->set_state( 40 );


            										    goto ruleatom_deltaEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 69 );
            								    ex->set_state( 27 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;
            						case SHORT:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										switch ( this->LA(6) )
            										{
            										case COMMA:
            											{
            												switch ( this->LA(7) )
            												{
            												case QUOTE:
            													{
            														alt69=4;
            													}
            												    break;
            												case BACKWARDCOMP:
            												case BFALSE:
            												case BTRUE:
            												case CLETTER:
            												case DID:
            												case E:
            												case ID:
            												case INF:
            												case INT:
            												case LANDSCAPE:
            												case LATEX:
            												case LOGF:
            												case LONG:
            												case OUTPUT:
            												case R:
            												case SHORT:
            												case SLETTER:
            												case SS:
            												case VERBOSE:
            												case ZERO:
            													{
            														alt69=2;
            													}
            												    break;

            												default:
            												    if (this->get_backtracking()>0)
            												    {
            												        this->set_failedflag( true );
            												        return val;
            												    }

            												    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 69 );
            												    ex->set_state( 43 );


            												    goto ruleatom_deltaEx;

            												}

            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 69 );
            										    ex->set_state( 40 );


            										    goto ruleatom_deltaEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 69 );
            								    ex->set_state( 28 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;
            						case BTRUE:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										switch ( this->LA(6) )
            										{
            										case COMMA:
            											{
            												switch ( this->LA(7) )
            												{
            												case QUOTE:
            													{
            														alt69=4;
            													}
            												    break;
            												case BACKWARDCOMP:
            												case BFALSE:
            												case BTRUE:
            												case CLETTER:
            												case DID:
            												case E:
            												case ID:
            												case INF:
            												case INT:
            												case LANDSCAPE:
            												case LATEX:
            												case LOGF:
            												case LONG:
            												case OUTPUT:
            												case R:
            												case SHORT:
            												case SLETTER:
            												case SS:
            												case VERBOSE:
            												case ZERO:
            													{
            														alt69=2;
            													}
            												    break;

            												default:
            												    if (this->get_backtracking()>0)
            												    {
            												        this->set_failedflag( true );
            												        return val;
            												    }

            												    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 69 );
            												    ex->set_state( 43 );


            												    goto ruleatom_deltaEx;

            												}

            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 69 );
            										    ex->set_state( 40 );


            										    goto ruleatom_deltaEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 69 );
            								    ex->set_state( 29 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;
            						case BFALSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										switch ( this->LA(6) )
            										{
            										case COMMA:
            											{
            												switch ( this->LA(7) )
            												{
            												case QUOTE:
            													{
            														alt69=4;
            													}
            												    break;
            												case BACKWARDCOMP:
            												case BFALSE:
            												case BTRUE:
            												case CLETTER:
            												case DID:
            												case E:
            												case ID:
            												case INF:
            												case INT:
            												case LANDSCAPE:
            												case LATEX:
            												case LOGF:
            												case LONG:
            												case OUTPUT:
            												case R:
            												case SHORT:
            												case SLETTER:
            												case SS:
            												case VERBOSE:
            												case ZERO:
            													{
            														alt69=2;
            													}
            												    break;

            												default:
            												    if (this->get_backtracking()>0)
            												    {
            												        this->set_failedflag( true );
            												        return val;
            												    }

            												    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 69 );
            												    ex->set_state( 43 );


            												    goto ruleatom_deltaEx;

            												}

            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 69 );
            										    ex->set_state( 40 );


            										    goto ruleatom_deltaEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 69 );
            								    ex->set_state( 30 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;
            						case SS:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										switch ( this->LA(6) )
            										{
            										case COMMA:
            											{
            												switch ( this->LA(7) )
            												{
            												case QUOTE:
            													{
            														alt69=4;
            													}
            												    break;
            												case BACKWARDCOMP:
            												case BFALSE:
            												case BTRUE:
            												case CLETTER:
            												case DID:
            												case E:
            												case ID:
            												case INF:
            												case INT:
            												case LANDSCAPE:
            												case LATEX:
            												case LOGF:
            												case LONG:
            												case OUTPUT:
            												case R:
            												case SHORT:
            												case SLETTER:
            												case SS:
            												case VERBOSE:
            												case ZERO:
            													{
            														alt69=2;
            													}
            												    break;

            												default:
            												    if (this->get_backtracking()>0)
            												    {
            												        this->set_failedflag( true );
            												        return val;
            												    }

            												    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 69 );
            												    ex->set_state( 43 );


            												    goto ruleatom_deltaEx;

            												}

            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 69 );
            										    ex->set_state( 40 );


            										    goto ruleatom_deltaEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 69 );
            								    ex->set_state( 31 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;
            						case VERBOSE:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										switch ( this->LA(6) )
            										{
            										case COMMA:
            											{
            												switch ( this->LA(7) )
            												{
            												case QUOTE:
            													{
            														alt69=4;
            													}
            												    break;
            												case BACKWARDCOMP:
            												case BFALSE:
            												case BTRUE:
            												case CLETTER:
            												case DID:
            												case E:
            												case ID:
            												case INF:
            												case INT:
            												case LANDSCAPE:
            												case LATEX:
            												case LOGF:
            												case LONG:
            												case OUTPUT:
            												case R:
            												case SHORT:
            												case SLETTER:
            												case SS:
            												case VERBOSE:
            												case ZERO:
            													{
            														alt69=2;
            													}
            												    break;

            												default:
            												    if (this->get_backtracking()>0)
            												    {
            												        this->set_failedflag( true );
            												        return val;
            												    }

            												    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 69 );
            												    ex->set_state( 43 );


            												    goto ruleatom_deltaEx;

            												}

            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 69 );
            										    ex->set_state( 40 );


            										    goto ruleatom_deltaEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 69 );
            								    ex->set_state( 32 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;
            						case BACKWARDCOMP:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										switch ( this->LA(6) )
            										{
            										case COMMA:
            											{
            												switch ( this->LA(7) )
            												{
            												case QUOTE:
            													{
            														alt69=4;
            													}
            												    break;
            												case BACKWARDCOMP:
            												case BFALSE:
            												case BTRUE:
            												case CLETTER:
            												case DID:
            												case E:
            												case ID:
            												case INF:
            												case INT:
            												case LANDSCAPE:
            												case LATEX:
            												case LOGF:
            												case LONG:
            												case OUTPUT:
            												case R:
            												case SHORT:
            												case SLETTER:
            												case SS:
            												case VERBOSE:
            												case ZERO:
            													{
            														alt69=2;
            													}
            												    break;

            												default:
            												    if (this->get_backtracking()>0)
            												    {
            												        this->set_failedflag( true );
            												        return val;
            												    }

            												    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 69 );
            												    ex->set_state( 43 );


            												    goto ruleatom_deltaEx;

            												}

            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 69 );
            										    ex->set_state( 40 );


            										    goto ruleatom_deltaEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 69 );
            								    ex->set_state( 33 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;
            						case E:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										switch ( this->LA(6) )
            										{
            										case COMMA:
            											{
            												switch ( this->LA(7) )
            												{
            												case QUOTE:
            													{
            														alt69=4;
            													}
            												    break;
            												case BACKWARDCOMP:
            												case BFALSE:
            												case BTRUE:
            												case CLETTER:
            												case DID:
            												case E:
            												case ID:
            												case INF:
            												case INT:
            												case LANDSCAPE:
            												case LATEX:
            												case LOGF:
            												case LONG:
            												case OUTPUT:
            												case R:
            												case SHORT:
            												case SLETTER:
            												case SS:
            												case VERBOSE:
            												case ZERO:
            													{
            														alt69=2;
            													}
            												    break;

            												default:
            												    if (this->get_backtracking()>0)
            												    {
            												        this->set_failedflag( true );
            												        return val;
            												    }

            												    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 69 );
            												    ex->set_state( 43 );


            												    goto ruleatom_deltaEx;

            												}

            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 69 );
            										    ex->set_state( 40 );


            										    goto ruleatom_deltaEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 69 );
            								    ex->set_state( 34 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;
            						case INF:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										switch ( this->LA(6) )
            										{
            										case COMMA:
            											{
            												switch ( this->LA(7) )
            												{
            												case QUOTE:
            													{
            														alt69=4;
            													}
            												    break;
            												case BACKWARDCOMP:
            												case BFALSE:
            												case BTRUE:
            												case CLETTER:
            												case DID:
            												case E:
            												case ID:
            												case INF:
            												case INT:
            												case LANDSCAPE:
            												case LATEX:
            												case LOGF:
            												case LONG:
            												case OUTPUT:
            												case R:
            												case SHORT:
            												case SLETTER:
            												case SS:
            												case VERBOSE:
            												case ZERO:
            													{
            														alt69=2;
            													}
            												    break;

            												default:
            												    if (this->get_backtracking()>0)
            												    {
            												        this->set_failedflag( true );
            												        return val;
            												    }

            												    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 69 );
            												    ex->set_state( 43 );


            												    goto ruleatom_deltaEx;

            												}

            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 69 );
            										    ex->set_state( 40 );


            										    goto ruleatom_deltaEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 69 );
            								    ex->set_state( 35 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;
            						case ZERO:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										switch ( this->LA(6) )
            										{
            										case COMMA:
            											{
            												switch ( this->LA(7) )
            												{
            												case QUOTE:
            													{
            														alt69=4;
            													}
            												    break;
            												case BACKWARDCOMP:
            												case BFALSE:
            												case BTRUE:
            												case CLETTER:
            												case DID:
            												case E:
            												case ID:
            												case INF:
            												case INT:
            												case LANDSCAPE:
            												case LATEX:
            												case LOGF:
            												case LONG:
            												case OUTPUT:
            												case R:
            												case SHORT:
            												case SLETTER:
            												case SS:
            												case VERBOSE:
            												case ZERO:
            													{
            														alt69=2;
            													}
            												    break;

            												default:
            												    if (this->get_backtracking()>0)
            												    {
            												        this->set_failedflag( true );
            												        return val;
            												    }

            												    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 69 );
            												    ex->set_state( 43 );


            												    goto ruleatom_deltaEx;

            												}

            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 69 );
            										    ex->set_state( 40 );


            										    goto ruleatom_deltaEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 69 );
            								    ex->set_state( 36 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;
            						case INT:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										switch ( this->LA(6) )
            										{
            										case COMMA:
            											{
            												switch ( this->LA(7) )
            												{
            												case QUOTE:
            													{
            														alt69=4;
            													}
            												    break;
            												case BACKWARDCOMP:
            												case BFALSE:
            												case BTRUE:
            												case CLETTER:
            												case DID:
            												case E:
            												case ID:
            												case INF:
            												case INT:
            												case LANDSCAPE:
            												case LATEX:
            												case LOGF:
            												case LONG:
            												case OUTPUT:
            												case R:
            												case SHORT:
            												case SLETTER:
            												case SS:
            												case VERBOSE:
            												case ZERO:
            													{
            														alt69=2;
            													}
            												    break;

            												default:
            												    if (this->get_backtracking()>0)
            												    {
            												        this->set_failedflag( true );
            												        return val;
            												    }

            												    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 69 );
            												    ex->set_state( 43 );


            												    goto ruleatom_deltaEx;

            												}

            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 69 );
            										    ex->set_state( 40 );


            										    goto ruleatom_deltaEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 69 );
            								    ex->set_state( 37 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;
            						case DID:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										switch ( this->LA(6) )
            										{
            										case COMMA:
            											{
            												switch ( this->LA(7) )
            												{
            												case QUOTE:
            													{
            														alt69=4;
            													}
            												    break;
            												case BACKWARDCOMP:
            												case BFALSE:
            												case BTRUE:
            												case CLETTER:
            												case DID:
            												case E:
            												case ID:
            												case INF:
            												case INT:
            												case LANDSCAPE:
            												case LATEX:
            												case LOGF:
            												case LONG:
            												case OUTPUT:
            												case R:
            												case SHORT:
            												case SLETTER:
            												case SS:
            												case VERBOSE:
            												case ZERO:
            													{
            														alt69=2;
            													}
            												    break;

            												default:
            												    if (this->get_backtracking()>0)
            												    {
            												        this->set_failedflag( true );
            												        return val;
            												    }

            												    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 69 );
            												    ex->set_state( 43 );


            												    goto ruleatom_deltaEx;

            												}

            											}
            										    break;

            										default:
            										    if (this->get_backtracking()>0)
            										    {
            										        this->set_failedflag( true );
            										        return val;
            										    }

            										    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 69 );
            										    ex->set_state( 40 );


            										    goto ruleatom_deltaEx;

            										}

            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 69 );
            								    ex->set_state( 38 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;

            						default:
            						    if (this->get_backtracking()>0)
            						    {
            						        this->set_failedflag( true );
            						        return val;
            						    }

            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 69 );
            						    ex->set_state( 3 );


            						    goto ruleatom_deltaEx;

            						}

            					}
            				    break;
            				case ID:
            					{
            						switch ( this->LA(4) )
            						{
            						case COMMA:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										alt69=3;
            									}
            								    break;
            								case BACKWARDCOMP:
            								case BFALSE:
            								case BTRUE:
            								case CLETTER:
            								case ID:
            								case LANDSCAPE:
            								case LATEX:
            								case LOGF:
            								case LONG:
            								case OUTPUT:
            								case R:
            								case SHORT:
            								case SLETTER:
            								case SS:
            								case VERBOSE:
            									{
            										alt69=1;
            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 69 );
            								    ex->set_state( 39 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;

            						default:
            						    if (this->get_backtracking()>0)
            						    {
            						        this->set_failedflag( true );
            						        return val;
            						    }

            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 69 );
            						    ex->set_state( 4 );


            						    goto ruleatom_deltaEx;

            						}

            					}
            				    break;
            				case SLETTER:
            					{
            						switch ( this->LA(4) )
            						{
            						case COMMA:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										alt69=3;
            									}
            								    break;
            								case BACKWARDCOMP:
            								case BFALSE:
            								case BTRUE:
            								case CLETTER:
            								case ID:
            								case LANDSCAPE:
            								case LATEX:
            								case LOGF:
            								case LONG:
            								case OUTPUT:
            								case R:
            								case SHORT:
            								case SLETTER:
            								case SS:
            								case VERBOSE:
            									{
            										alt69=1;
            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 69 );
            								    ex->set_state( 39 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;

            						default:
            						    if (this->get_backtracking()>0)
            						    {
            						        this->set_failedflag( true );
            						        return val;
            						    }

            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 69 );
            						    ex->set_state( 5 );


            						    goto ruleatom_deltaEx;

            						}

            					}
            				    break;
            				case CLETTER:
            					{
            						switch ( this->LA(4) )
            						{
            						case COMMA:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										alt69=3;
            									}
            								    break;
            								case BACKWARDCOMP:
            								case BFALSE:
            								case BTRUE:
            								case CLETTER:
            								case ID:
            								case LANDSCAPE:
            								case LATEX:
            								case LOGF:
            								case LONG:
            								case OUTPUT:
            								case R:
            								case SHORT:
            								case SLETTER:
            								case SS:
            								case VERBOSE:
            									{
            										alt69=1;
            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 69 );
            								    ex->set_state( 39 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;

            						default:
            						    if (this->get_backtracking()>0)
            						    {
            						        this->set_failedflag( true );
            						        return val;
            						    }

            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 69 );
            						    ex->set_state( 6 );


            						    goto ruleatom_deltaEx;

            						}

            					}
            				    break;
            				case OUTPUT:
            					{
            						switch ( this->LA(4) )
            						{
            						case COMMA:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										alt69=3;
            									}
            								    break;
            								case BACKWARDCOMP:
            								case BFALSE:
            								case BTRUE:
            								case CLETTER:
            								case ID:
            								case LANDSCAPE:
            								case LATEX:
            								case LOGF:
            								case LONG:
            								case OUTPUT:
            								case R:
            								case SHORT:
            								case SLETTER:
            								case SS:
            								case VERBOSE:
            									{
            										alt69=1;
            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 69 );
            								    ex->set_state( 39 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;

            						default:
            						    if (this->get_backtracking()>0)
            						    {
            						        this->set_failedflag( true );
            						        return val;
            						    }

            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 69 );
            						    ex->set_state( 7 );


            						    goto ruleatom_deltaEx;

            						}

            					}
            				    break;
            				case R:
            					{
            						switch ( this->LA(4) )
            						{
            						case COMMA:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										alt69=3;
            									}
            								    break;
            								case BACKWARDCOMP:
            								case BFALSE:
            								case BTRUE:
            								case CLETTER:
            								case ID:
            								case LANDSCAPE:
            								case LATEX:
            								case LOGF:
            								case LONG:
            								case OUTPUT:
            								case R:
            								case SHORT:
            								case SLETTER:
            								case SS:
            								case VERBOSE:
            									{
            										alt69=1;
            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 69 );
            								    ex->set_state( 39 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;

            						default:
            						    if (this->get_backtracking()>0)
            						    {
            						        this->set_failedflag( true );
            						        return val;
            						    }

            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 69 );
            						    ex->set_state( 8 );


            						    goto ruleatom_deltaEx;

            						}

            					}
            				    break;
            				case LATEX:
            					{
            						switch ( this->LA(4) )
            						{
            						case COMMA:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										alt69=3;
            									}
            								    break;
            								case BACKWARDCOMP:
            								case BFALSE:
            								case BTRUE:
            								case CLETTER:
            								case ID:
            								case LANDSCAPE:
            								case LATEX:
            								case LOGF:
            								case LONG:
            								case OUTPUT:
            								case R:
            								case SHORT:
            								case SLETTER:
            								case SS:
            								case VERBOSE:
            									{
            										alt69=1;
            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 69 );
            								    ex->set_state( 39 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;

            						default:
            						    if (this->get_backtracking()>0)
            						    {
            						        this->set_failedflag( true );
            						        return val;
            						    }

            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 69 );
            						    ex->set_state( 9 );


            						    goto ruleatom_deltaEx;

            						}

            					}
            				    break;
            				case LANDSCAPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case COMMA:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										alt69=3;
            									}
            								    break;
            								case BACKWARDCOMP:
            								case BFALSE:
            								case BTRUE:
            								case CLETTER:
            								case ID:
            								case LANDSCAPE:
            								case LATEX:
            								case LOGF:
            								case LONG:
            								case OUTPUT:
            								case R:
            								case SHORT:
            								case SLETTER:
            								case SS:
            								case VERBOSE:
            									{
            										alt69=1;
            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 69 );
            								    ex->set_state( 39 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;

            						default:
            						    if (this->get_backtracking()>0)
            						    {
            						        this->set_failedflag( true );
            						        return val;
            						    }

            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 69 );
            						    ex->set_state( 10 );


            						    goto ruleatom_deltaEx;

            						}

            					}
            				    break;
            				case LOGF:
            					{
            						switch ( this->LA(4) )
            						{
            						case COMMA:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										alt69=3;
            									}
            								    break;
            								case BACKWARDCOMP:
            								case BFALSE:
            								case BTRUE:
            								case CLETTER:
            								case ID:
            								case LANDSCAPE:
            								case LATEX:
            								case LOGF:
            								case LONG:
            								case OUTPUT:
            								case R:
            								case SHORT:
            								case SLETTER:
            								case SS:
            								case VERBOSE:
            									{
            										alt69=1;
            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 69 );
            								    ex->set_state( 39 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;

            						default:
            						    if (this->get_backtracking()>0)
            						    {
            						        this->set_failedflag( true );
            						        return val;
            						    }

            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 69 );
            						    ex->set_state( 11 );


            						    goto ruleatom_deltaEx;

            						}

            					}
            				    break;
            				case LONG:
            					{
            						switch ( this->LA(4) )
            						{
            						case COMMA:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										alt69=3;
            									}
            								    break;
            								case BACKWARDCOMP:
            								case BFALSE:
            								case BTRUE:
            								case CLETTER:
            								case ID:
            								case LANDSCAPE:
            								case LATEX:
            								case LOGF:
            								case LONG:
            								case OUTPUT:
            								case R:
            								case SHORT:
            								case SLETTER:
            								case SS:
            								case VERBOSE:
            									{
            										alt69=1;
            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 69 );
            								    ex->set_state( 39 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;

            						default:
            						    if (this->get_backtracking()>0)
            						    {
            						        this->set_failedflag( true );
            						        return val;
            						    }

            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 69 );
            						    ex->set_state( 12 );


            						    goto ruleatom_deltaEx;

            						}

            					}
            				    break;
            				case SHORT:
            					{
            						switch ( this->LA(4) )
            						{
            						case COMMA:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										alt69=3;
            									}
            								    break;
            								case BACKWARDCOMP:
            								case BFALSE:
            								case BTRUE:
            								case CLETTER:
            								case ID:
            								case LANDSCAPE:
            								case LATEX:
            								case LOGF:
            								case LONG:
            								case OUTPUT:
            								case R:
            								case SHORT:
            								case SLETTER:
            								case SS:
            								case VERBOSE:
            									{
            										alt69=1;
            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 69 );
            								    ex->set_state( 39 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;

            						default:
            						    if (this->get_backtracking()>0)
            						    {
            						        this->set_failedflag( true );
            						        return val;
            						    }

            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 69 );
            						    ex->set_state( 13 );


            						    goto ruleatom_deltaEx;

            						}

            					}
            				    break;
            				case BTRUE:
            					{
            						switch ( this->LA(4) )
            						{
            						case COMMA:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										alt69=3;
            									}
            								    break;
            								case BACKWARDCOMP:
            								case BFALSE:
            								case BTRUE:
            								case CLETTER:
            								case ID:
            								case LANDSCAPE:
            								case LATEX:
            								case LOGF:
            								case LONG:
            								case OUTPUT:
            								case R:
            								case SHORT:
            								case SLETTER:
            								case SS:
            								case VERBOSE:
            									{
            										alt69=1;
            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 69 );
            								    ex->set_state( 39 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;

            						default:
            						    if (this->get_backtracking()>0)
            						    {
            						        this->set_failedflag( true );
            						        return val;
            						    }

            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 69 );
            						    ex->set_state( 14 );


            						    goto ruleatom_deltaEx;

            						}

            					}
            				    break;
            				case BFALSE:
            					{
            						switch ( this->LA(4) )
            						{
            						case COMMA:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										alt69=3;
            									}
            								    break;
            								case BACKWARDCOMP:
            								case BFALSE:
            								case BTRUE:
            								case CLETTER:
            								case ID:
            								case LANDSCAPE:
            								case LATEX:
            								case LOGF:
            								case LONG:
            								case OUTPUT:
            								case R:
            								case SHORT:
            								case SLETTER:
            								case SS:
            								case VERBOSE:
            									{
            										alt69=1;
            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 69 );
            								    ex->set_state( 39 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;

            						default:
            						    if (this->get_backtracking()>0)
            						    {
            						        this->set_failedflag( true );
            						        return val;
            						    }

            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 69 );
            						    ex->set_state( 15 );


            						    goto ruleatom_deltaEx;

            						}

            					}
            				    break;
            				case SS:
            					{
            						switch ( this->LA(4) )
            						{
            						case COMMA:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										alt69=3;
            									}
            								    break;
            								case BACKWARDCOMP:
            								case BFALSE:
            								case BTRUE:
            								case CLETTER:
            								case ID:
            								case LANDSCAPE:
            								case LATEX:
            								case LOGF:
            								case LONG:
            								case OUTPUT:
            								case R:
            								case SHORT:
            								case SLETTER:
            								case SS:
            								case VERBOSE:
            									{
            										alt69=1;
            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 69 );
            								    ex->set_state( 39 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;

            						default:
            						    if (this->get_backtracking()>0)
            						    {
            						        this->set_failedflag( true );
            						        return val;
            						    }

            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 69 );
            						    ex->set_state( 16 );


            						    goto ruleatom_deltaEx;

            						}

            					}
            				    break;
            				case VERBOSE:
            					{
            						switch ( this->LA(4) )
            						{
            						case COMMA:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										alt69=3;
            									}
            								    break;
            								case BACKWARDCOMP:
            								case BFALSE:
            								case BTRUE:
            								case CLETTER:
            								case ID:
            								case LANDSCAPE:
            								case LATEX:
            								case LOGF:
            								case LONG:
            								case OUTPUT:
            								case R:
            								case SHORT:
            								case SLETTER:
            								case SS:
            								case VERBOSE:
            									{
            										alt69=1;
            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 69 );
            								    ex->set_state( 39 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;

            						default:
            						    if (this->get_backtracking()>0)
            						    {
            						        this->set_failedflag( true );
            						        return val;
            						    }

            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 69 );
            						    ex->set_state( 17 );


            						    goto ruleatom_deltaEx;

            						}

            					}
            				    break;
            				case BACKWARDCOMP:
            					{
            						switch ( this->LA(4) )
            						{
            						case COMMA:
            							{
            								switch ( this->LA(5) )
            								{
            								case QUOTE:
            									{
            										alt69=3;
            									}
            								    break;
            								case BACKWARDCOMP:
            								case BFALSE:
            								case BTRUE:
            								case CLETTER:
            								case ID:
            								case LANDSCAPE:
            								case LATEX:
            								case LOGF:
            								case LONG:
            								case OUTPUT:
            								case R:
            								case SHORT:
            								case SLETTER:
            								case SS:
            								case VERBOSE:
            									{
            										alt69=1;
            									}
            								    break;

            								default:
            								    if (this->get_backtracking()>0)
            								    {
            								        this->set_failedflag( true );
            								        return val;
            								    }

            								    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 69 );
            								    ex->set_state( 39 );


            								    goto ruleatom_deltaEx;

            								}

            							}
            						    break;

            						default:
            						    if (this->get_backtracking()>0)
            						    {
            						        this->set_failedflag( true );
            						        return val;
            						    }

            						    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 69 );
            						    ex->set_state( 18 );


            						    goto ruleatom_deltaEx;

            						}

            					}
            				    break;

            				default:
            				    if (this->get_backtracking()>0)
            				    {
            				        this->set_failedflag( true );
            				        return val;
            				    }

            				    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 69 );
            				    ex->set_state( 2 );


            				    goto ruleatom_deltaEx;

            				}

            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return val;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 69 );
            		    ex->set_state( 1 );


            		    goto ruleatom_deltaEx;

            		}

            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return val;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 69 );
                ex->set_state( 0 );


                goto ruleatom_deltaEx;

            }

            switch (alt69)
            {
        	case 1:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:573:7: DELTA LANGBR i1= id_str COMMA i2= id_str RANGBR
        	    {
        	         this->matchToken(DELTA, &FOLLOW_DELTA_in_atom_delta3239);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	         this->matchToken(LANGBR, &FOLLOW_LANGBR_in_atom_delta3241);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        this->followPush(FOLLOW_id_str_in_atom_delta3247);
        	        i1=id_str();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	         this->matchToken(COMMA, &FOLLOW_COMMA_in_atom_delta3249);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        this->followPush(FOLLOW_id_str_in_atom_delta3255);
        	        i2=id_str();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	         this->matchToken(RANGBR, &FOLLOW_RANGBR_in_atom_delta3257);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             val= ex(false, i1.first, false, i2.first);
        	             
        	        }


        	    }
        	    break;
        	case 2:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:574:7: DELTA LANGBR QUOTE i1= idx_str QUOTE COMMA i2= idx_str RANGBR
        	    {
        	         this->matchToken(DELTA, &FOLLOW_DELTA_in_atom_delta3267);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	         this->matchToken(LANGBR, &FOLLOW_LANGBR_in_atom_delta3269);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	         this->matchToken(QUOTE, &FOLLOW_QUOTE_in_atom_delta3271);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        this->followPush(FOLLOW_idx_str_in_atom_delta3277);
        	        i1=idx_str();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	         this->matchToken(QUOTE, &FOLLOW_QUOTE_in_atom_delta3279);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	         this->matchToken(COMMA, &FOLLOW_COMMA_in_atom_delta3281);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        this->followPush(FOLLOW_idx_str_in_atom_delta3287);
        	        i2=idx_str();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	         this->matchToken(RANGBR, &FOLLOW_RANGBR_in_atom_delta3289);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             val= ex(true, i1.first, false, i2.first);
        	             
        	        }


        	    }
        	    break;
        	case 3:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:575:7: DELTA LANGBR i1= id_str COMMA QUOTE i2= idx_str QUOTE RANGBR
        	    {
        	         this->matchToken(DELTA, &FOLLOW_DELTA_in_atom_delta3299);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	         this->matchToken(LANGBR, &FOLLOW_LANGBR_in_atom_delta3301);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        this->followPush(FOLLOW_id_str_in_atom_delta3307);
        	        i1=id_str();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	         this->matchToken(COMMA, &FOLLOW_COMMA_in_atom_delta3309);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	         this->matchToken(QUOTE, &FOLLOW_QUOTE_in_atom_delta3311);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        this->followPush(FOLLOW_idx_str_in_atom_delta3317);
        	        i2=idx_str();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	         this->matchToken(QUOTE, &FOLLOW_QUOTE_in_atom_delta3319);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	         this->matchToken(RANGBR, &FOLLOW_RANGBR_in_atom_delta3321);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             val= ex(false, i1.first, true, i2.first);
        	             
        	        }


        	    }
        	    break;
        	case 4:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:576:7: DELTA LANGBR QUOTE i1= idx_str QUOTE COMMA QUOTE i2= idx_str QUOTE RANGBR
        	    {
        	         this->matchToken(DELTA, &FOLLOW_DELTA_in_atom_delta3331);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	         this->matchToken(LANGBR, &FOLLOW_LANGBR_in_atom_delta3333);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	         this->matchToken(QUOTE, &FOLLOW_QUOTE_in_atom_delta3335);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        this->followPush(FOLLOW_idx_str_in_atom_delta3341);
        	        i1=idx_str();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	         this->matchToken(QUOTE, &FOLLOW_QUOTE_in_atom_delta3343);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	         this->matchToken(COMMA, &FOLLOW_COMMA_in_atom_delta3345);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	         this->matchToken(QUOTE, &FOLLOW_QUOTE_in_atom_delta3347);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        this->followPush(FOLLOW_idx_str_in_atom_delta3353);
        	        i2=idx_str();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	         this->matchToken(QUOTE, &FOLLOW_QUOTE_in_atom_delta3355);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	         this->matchToken(RANGBR, &FOLLOW_RANGBR_in_atom_delta3357);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_deltaEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             val= ex(true, i1.first, true, i2.first);
        	             
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleatom_deltaEx; /* Prevent compiler warnings */
    ruleatom_deltaEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return val;
}
/* $ANTLR end atom_delta */

/**
 * $ANTLR start atom_id
 * ../gEcon_CURRENT/src//parser/gEcon.g:579:1: atom_id returns [ex val] : (v= atom_id_nt |v= atom_id_t );
 */
ex
gEconParser::atom_id()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    ex val;


    ex v;
    typedef	ex RETURN_TYPE_v;

    /* Initialize rule variables
     */


 
    {
        {
            //  ../gEcon_CURRENT/src//parser/gEcon.g:580:5: (v= atom_id_nt |v= atom_id_t )

            ANTLR_UINT32 alt70;

            alt70=2;

            alt70 = cdfa70.predict(this, this->get_rec(), this->get_istream(), cdfa70 );
            if  (this->hasException())
            {
                goto ruleatom_idEx;
            }
            if (this->hasFailed())
            {
                return val;
            }

            switch (alt70)
            {
        	case 1:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:580:7: v= atom_id_nt
        	    {
        	        this->followPush(FOLLOW_atom_id_nt_in_atom_id3384);
        	        v=atom_id_nt();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_idEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             val= v;
        	             
        	        }


        	    }
        	    break;
        	case 2:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:581:7: v= atom_id_t
        	    {
        	        this->followPush(FOLLOW_atom_id_t_in_atom_id3398);
        	        v=atom_id_t();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_idEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             val= v;
        	             
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleatom_idEx; /* Prevent compiler warnings */
    ruleatom_idEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return val;
}
/* $ANTLR end atom_id */

/**
 * $ANTLR start atom_id_t
 * ../gEcon_CURRENT/src//parser/gEcon.g:584:1: atom_id_t returns [ex val] : (ids= id_str LBRACK l= time_idx RBRACK |ids= id_str li= list_idx LBRACK l= time_idx RBRACK );
 */
ex
gEconParser::atom_id_t()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    ex val;


    std::pair<std::string, int> ids;
    typedef	std::pair<std::string, int> RETURN_TYPE_ids;

    int l;
    typedef	int RETURN_TYPE_l;

    std::vector<std::pair<bool, std::string> > li;
    typedef	std::vector<std::pair<bool, std::string> > RETURN_TYPE_li;

    /* Initialize rule variables
     */


 
    {
        {
            //  ../gEcon_CURRENT/src//parser/gEcon.g:585:5: (ids= id_str LBRACK l= time_idx RBRACK |ids= id_str li= list_idx LBRACK l= time_idx RBRACK )

            ANTLR_UINT32 alt71;

            alt71=2;

            switch ( this->LA(1) )
            {
            case ID:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACK:
            			{
            				alt71=1;
            			}
            		    break;
            		case LANGBR:
            			{
            				alt71=2;
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return val;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 71 );
            		    ex->set_state( 1 );


            		    goto ruleatom_id_tEx;

            		}

            	}
                break;
            case SLETTER:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACK:
            			{
            				alt71=1;
            			}
            		    break;
            		case LANGBR:
            			{
            				alt71=2;
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return val;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 71 );
            		    ex->set_state( 2 );


            		    goto ruleatom_id_tEx;

            		}

            	}
                break;
            case CLETTER:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACK:
            			{
            				alt71=1;
            			}
            		    break;
            		case LANGBR:
            			{
            				alt71=2;
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return val;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 71 );
            		    ex->set_state( 3 );


            		    goto ruleatom_id_tEx;

            		}

            	}
                break;
            case OUTPUT:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACK:
            			{
            				alt71=1;
            			}
            		    break;
            		case LANGBR:
            			{
            				alt71=2;
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return val;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 71 );
            		    ex->set_state( 4 );


            		    goto ruleatom_id_tEx;

            		}

            	}
                break;
            case R:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACK:
            			{
            				alt71=1;
            			}
            		    break;
            		case LANGBR:
            			{
            				alt71=2;
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return val;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 71 );
            		    ex->set_state( 5 );


            		    goto ruleatom_id_tEx;

            		}

            	}
                break;
            case LATEX:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACK:
            			{
            				alt71=1;
            			}
            		    break;
            		case LANGBR:
            			{
            				alt71=2;
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return val;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 71 );
            		    ex->set_state( 6 );


            		    goto ruleatom_id_tEx;

            		}

            	}
                break;
            case LANDSCAPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACK:
            			{
            				alt71=1;
            			}
            		    break;
            		case LANGBR:
            			{
            				alt71=2;
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return val;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 71 );
            		    ex->set_state( 7 );


            		    goto ruleatom_id_tEx;

            		}

            	}
                break;
            case LOGF:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACK:
            			{
            				alt71=1;
            			}
            		    break;
            		case LANGBR:
            			{
            				alt71=2;
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return val;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 71 );
            		    ex->set_state( 8 );


            		    goto ruleatom_id_tEx;

            		}

            	}
                break;
            case LONG:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACK:
            			{
            				alt71=1;
            			}
            		    break;
            		case LANGBR:
            			{
            				alt71=2;
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return val;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 71 );
            		    ex->set_state( 9 );


            		    goto ruleatom_id_tEx;

            		}

            	}
                break;
            case SHORT:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACK:
            			{
            				alt71=1;
            			}
            		    break;
            		case LANGBR:
            			{
            				alt71=2;
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return val;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 71 );
            		    ex->set_state( 10 );


            		    goto ruleatom_id_tEx;

            		}

            	}
                break;
            case BTRUE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACK:
            			{
            				alt71=1;
            			}
            		    break;
            		case LANGBR:
            			{
            				alt71=2;
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return val;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 71 );
            		    ex->set_state( 11 );


            		    goto ruleatom_id_tEx;

            		}

            	}
                break;
            case BFALSE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACK:
            			{
            				alt71=1;
            			}
            		    break;
            		case LANGBR:
            			{
            				alt71=2;
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return val;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 71 );
            		    ex->set_state( 12 );


            		    goto ruleatom_id_tEx;

            		}

            	}
                break;
            case SS:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACK:
            			{
            				alt71=1;
            			}
            		    break;
            		case LANGBR:
            			{
            				alt71=2;
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return val;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 71 );
            		    ex->set_state( 13 );


            		    goto ruleatom_id_tEx;

            		}

            	}
                break;
            case VERBOSE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACK:
            			{
            				alt71=1;
            			}
            		    break;
            		case LANGBR:
            			{
            				alt71=2;
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return val;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 71 );
            		    ex->set_state( 14 );


            		    goto ruleatom_id_tEx;

            		}

            	}
                break;
            case BACKWARDCOMP:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACK:
            			{
            				alt71=1;
            			}
            		    break;
            		case LANGBR:
            			{
            				alt71=2;
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return val;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 71 );
            		    ex->set_state( 15 );


            		    goto ruleatom_id_tEx;

            		}

            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return val;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 71 );
                ex->set_state( 0 );


                goto ruleatom_id_tEx;

            }

            switch (alt71)
            {
        	case 1:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:585:7: ids= id_str LBRACK l= time_idx RBRACK
        	    {
        	        this->followPush(FOLLOW_id_str_in_atom_id_t3425);
        	        ids=id_str();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_id_tEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	         this->matchToken(LBRACK, &FOLLOW_LBRACK_in_atom_id_t3427);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_id_tEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        this->followPush(FOLLOW_time_idx_in_atom_id_t3433);
        	        l=time_idx();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_id_tEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	         this->matchToken(RBRACK, &FOLLOW_RBRACK_in_atom_id_t3435);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_id_tEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             val= ex(ids.first, l);
        	             
        	        }


        	    }
        	    break;
        	case 2:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:586:7: ids= id_str li= list_idx LBRACK l= time_idx RBRACK
        	    {
        	        this->followPush(FOLLOW_id_str_in_atom_id_t3449);
        	        ids=id_str();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_id_tEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        this->followPush(FOLLOW_list_idx_in_atom_id_t3455);
        	        li=list_idx();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_id_tEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	         this->matchToken(LBRACK, &FOLLOW_LBRACK_in_atom_id_t3457);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_id_tEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        this->followPush(FOLLOW_time_idx_in_atom_id_t3463);
        	        l=time_idx();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_id_tEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	         this->matchToken(RBRACK, &FOLLOW_RBRACK_in_atom_id_t3465);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_id_tEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {

        	                        switch(li.size()) {
        	                            case 1:
        	                                val= ex(ids.first, l, li[0].first, li[0].second);

        	                                break;
        	                            case 2:
        	                                val= ex(ids.first, l, li[0].first, li[0].second, li[1].first, li[1].second);

        	                                break;
        	                            case 3:
        	                                val= ex(ids.first, l, li[0].first, li[0].second, li[1].first, li[1].second,
        	                                                        li[2].first, li[2].second);

        	                                break;
        	                            case 4:
        	                                val= ex(ids.first, l, li[0].first, li[0].second, li[1].first, li[1].second,
        	                                                        li[2].first, li[2].second, li[3].first, li[3].second);

        	                                break;
        	                        }
        	                    
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleatom_id_tEx; /* Prevent compiler warnings */
    ruleatom_id_tEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return val;
}
/* $ANTLR end atom_id_t */

/**
 * $ANTLR start time_idx
 * ../gEcon_CURRENT/src//parser/gEcon.g:606:1: time_idx returns [int val] : (|l= atom_int | PLUS l= atom_int | MINUS l= atom_int | SS | MINUS INF );
 */
int
gEconParser::time_idx()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    int val;


    int l;
    typedef	int RETURN_TYPE_l;

    /* Initialize rule variables
     */


        val= 0;



 
    {
        {
            //  ../gEcon_CURRENT/src//parser/gEcon.g:610:5: (|l= atom_int | PLUS l= atom_int | MINUS l= atom_int | SS | MINUS INF )

            ANTLR_UINT32 alt72;

            alt72=6;

            switch ( this->LA(1) )
            {
            case RBRACK:
            	{
            		alt72=1;
            	}
                break;
            case INT:
            case ZERO:
            	{
            		alt72=2;
            	}
                break;
            case PLUS:
            	{
            		alt72=3;
            	}
                break;
            case MINUS:
            	{
            		switch ( this->LA(2) )
            		{
            		case INF:
            			{
            				alt72=6;
            			}
            		    break;
            		case INT:
            		case ZERO:
            			{
            				alt72=4;
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return val;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 72 );
            		    ex->set_state( 4 );


            		    goto ruletime_idxEx;

            		}

            	}
                break;
            case SS:
            	{
            		alt72=5;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return val;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 72 );
                ex->set_state( 0 );


                goto ruletime_idxEx;

            }

            switch (alt72)
            {
        	case 1:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:611:5: 
        	    {
        	    }
        	    break;
        	case 2:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:611:7: l= atom_int
        	    {
        	        this->followPush(FOLLOW_atom_int_in_time_idx3503);
        	        l=atom_int();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruletime_idxEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             val= l;
        	             
        	        }


        	    }
        	    break;
        	case 3:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:612:7: PLUS l= atom_int
        	    {
        	         this->matchToken(PLUS, &FOLLOW_PLUS_in_time_idx3513);
        	        if  (this->hasException())
        	        {
        	            goto ruletime_idxEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        this->followPush(FOLLOW_atom_int_in_time_idx3519);
        	        l=atom_int();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruletime_idxEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             val= l;
        	             
        	        }


        	    }
        	    break;
        	case 4:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:613:7: MINUS l= atom_int
        	    {
        	         this->matchToken(MINUS, &FOLLOW_MINUS_in_time_idx3529);
        	        if  (this->hasException())
        	        {
        	            goto ruletime_idxEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        this->followPush(FOLLOW_atom_int_in_time_idx3535);
        	        l=atom_int();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruletime_idxEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             val= -l;
        	             
        	        }


        	    }
        	    break;
        	case 5:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:614:7: SS
        	    {
        	         this->matchToken(SS, &FOLLOW_SS_in_time_idx3545);
        	        if  (this->hasException())
        	        {
        	            goto ruletime_idxEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             val= INT_MIN;
        	             
        	        }


        	    }
        	    break;
        	case 6:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:615:7: MINUS INF
        	    {
        	         this->matchToken(MINUS, &FOLLOW_MINUS_in_time_idx3555);
        	        if  (this->hasException())
        	        {
        	            goto ruletime_idxEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	         this->matchToken(INF, &FOLLOW_INF_in_time_idx3557);
        	        if  (this->hasException())
        	        {
        	            goto ruletime_idxEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             val= INT_MIN;
        	             
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruletime_idxEx; /* Prevent compiler warnings */
    ruletime_idxEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return val;
}
/* $ANTLR end time_idx */

/**
 * $ANTLR start atom_id_nt
 * ../gEcon_CURRENT/src//parser/gEcon.g:618:1: atom_id_nt returns [ex val] : (ids= id_str |ids= id_str li= list_idx );
 */
ex
gEconParser::atom_id_nt()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    ex val;


    std::pair<std::string, int> ids;
    typedef	std::pair<std::string, int> RETURN_TYPE_ids;

    std::vector<std::pair<bool, std::string> > li;
    typedef	std::vector<std::pair<bool, std::string> > RETURN_TYPE_li;

    /* Initialize rule variables
     */


 
    {
        {
            //  ../gEcon_CURRENT/src//parser/gEcon.g:619:5: (ids= id_str |ids= id_str li= list_idx )

            ANTLR_UINT32 alt73;

            alt73=2;

            switch ( this->LA(1) )
            {
            case ID:
            	{
            		switch ( this->LA(2) )
            		{
            		case COLON:
            		case COMMA:
            		case DIV:
            		case EQ:
            		case MINUS:
            		case MUL:
            		case PLUS:
            		case POW:
            		case RARROW:
            		case RBRACK:
            		case RPAREN:
            		case SEMI:
            			{
            				alt73=1;
            			}
            		    break;
            		case LANGBR:
            			{
            				alt73=2;
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return val;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 73 );
            		    ex->set_state( 1 );


            		    goto ruleatom_id_ntEx;

            		}

            	}
                break;
            case SLETTER:
            	{
            		switch ( this->LA(2) )
            		{
            		case COLON:
            		case COMMA:
            		case DIV:
            		case EQ:
            		case MINUS:
            		case MUL:
            		case PLUS:
            		case POW:
            		case RARROW:
            		case RBRACK:
            		case RPAREN:
            		case SEMI:
            			{
            				alt73=1;
            			}
            		    break;
            		case LANGBR:
            			{
            				alt73=2;
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return val;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 73 );
            		    ex->set_state( 2 );


            		    goto ruleatom_id_ntEx;

            		}

            	}
                break;
            case CLETTER:
            	{
            		switch ( this->LA(2) )
            		{
            		case COLON:
            		case COMMA:
            		case DIV:
            		case EQ:
            		case MINUS:
            		case MUL:
            		case PLUS:
            		case POW:
            		case RARROW:
            		case RBRACK:
            		case RPAREN:
            		case SEMI:
            			{
            				alt73=1;
            			}
            		    break;
            		case LANGBR:
            			{
            				alt73=2;
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return val;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 73 );
            		    ex->set_state( 3 );


            		    goto ruleatom_id_ntEx;

            		}

            	}
                break;
            case OUTPUT:
            	{
            		switch ( this->LA(2) )
            		{
            		case COLON:
            		case COMMA:
            		case DIV:
            		case EQ:
            		case MINUS:
            		case MUL:
            		case PLUS:
            		case POW:
            		case RARROW:
            		case RBRACK:
            		case RPAREN:
            		case SEMI:
            			{
            				alt73=1;
            			}
            		    break;
            		case LANGBR:
            			{
            				alt73=2;
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return val;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 73 );
            		    ex->set_state( 4 );


            		    goto ruleatom_id_ntEx;

            		}

            	}
                break;
            case R:
            	{
            		switch ( this->LA(2) )
            		{
            		case COLON:
            		case COMMA:
            		case DIV:
            		case EQ:
            		case MINUS:
            		case MUL:
            		case PLUS:
            		case POW:
            		case RARROW:
            		case RBRACK:
            		case RPAREN:
            		case SEMI:
            			{
            				alt73=1;
            			}
            		    break;
            		case LANGBR:
            			{
            				alt73=2;
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return val;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 73 );
            		    ex->set_state( 5 );


            		    goto ruleatom_id_ntEx;

            		}

            	}
                break;
            case LATEX:
            	{
            		switch ( this->LA(2) )
            		{
            		case COLON:
            		case COMMA:
            		case DIV:
            		case EQ:
            		case MINUS:
            		case MUL:
            		case PLUS:
            		case POW:
            		case RARROW:
            		case RBRACK:
            		case RPAREN:
            		case SEMI:
            			{
            				alt73=1;
            			}
            		    break;
            		case LANGBR:
            			{
            				alt73=2;
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return val;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 73 );
            		    ex->set_state( 6 );


            		    goto ruleatom_id_ntEx;

            		}

            	}
                break;
            case LANDSCAPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case COLON:
            		case COMMA:
            		case DIV:
            		case EQ:
            		case MINUS:
            		case MUL:
            		case PLUS:
            		case POW:
            		case RARROW:
            		case RBRACK:
            		case RPAREN:
            		case SEMI:
            			{
            				alt73=1;
            			}
            		    break;
            		case LANGBR:
            			{
            				alt73=2;
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return val;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 73 );
            		    ex->set_state( 7 );


            		    goto ruleatom_id_ntEx;

            		}

            	}
                break;
            case LOGF:
            	{
            		switch ( this->LA(2) )
            		{
            		case COLON:
            		case COMMA:
            		case DIV:
            		case EQ:
            		case MINUS:
            		case MUL:
            		case PLUS:
            		case POW:
            		case RARROW:
            		case RBRACK:
            		case RPAREN:
            		case SEMI:
            			{
            				alt73=1;
            			}
            		    break;
            		case LANGBR:
            			{
            				alt73=2;
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return val;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 73 );
            		    ex->set_state( 8 );


            		    goto ruleatom_id_ntEx;

            		}

            	}
                break;
            case LONG:
            	{
            		switch ( this->LA(2) )
            		{
            		case COLON:
            		case COMMA:
            		case DIV:
            		case EQ:
            		case MINUS:
            		case MUL:
            		case PLUS:
            		case POW:
            		case RARROW:
            		case RBRACK:
            		case RPAREN:
            		case SEMI:
            			{
            				alt73=1;
            			}
            		    break;
            		case LANGBR:
            			{
            				alt73=2;
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return val;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 73 );
            		    ex->set_state( 9 );


            		    goto ruleatom_id_ntEx;

            		}

            	}
                break;
            case SHORT:
            	{
            		switch ( this->LA(2) )
            		{
            		case COLON:
            		case COMMA:
            		case DIV:
            		case EQ:
            		case MINUS:
            		case MUL:
            		case PLUS:
            		case POW:
            		case RARROW:
            		case RBRACK:
            		case RPAREN:
            		case SEMI:
            			{
            				alt73=1;
            			}
            		    break;
            		case LANGBR:
            			{
            				alt73=2;
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return val;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 73 );
            		    ex->set_state( 10 );


            		    goto ruleatom_id_ntEx;

            		}

            	}
                break;
            case BTRUE:
            	{
            		switch ( this->LA(2) )
            		{
            		case COLON:
            		case COMMA:
            		case DIV:
            		case EQ:
            		case MINUS:
            		case MUL:
            		case PLUS:
            		case POW:
            		case RARROW:
            		case RBRACK:
            		case RPAREN:
            		case SEMI:
            			{
            				alt73=1;
            			}
            		    break;
            		case LANGBR:
            			{
            				alt73=2;
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return val;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 73 );
            		    ex->set_state( 11 );


            		    goto ruleatom_id_ntEx;

            		}

            	}
                break;
            case BFALSE:
            	{
            		switch ( this->LA(2) )
            		{
            		case COLON:
            		case COMMA:
            		case DIV:
            		case EQ:
            		case MINUS:
            		case MUL:
            		case PLUS:
            		case POW:
            		case RARROW:
            		case RBRACK:
            		case RPAREN:
            		case SEMI:
            			{
            				alt73=1;
            			}
            		    break;
            		case LANGBR:
            			{
            				alt73=2;
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return val;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 73 );
            		    ex->set_state( 12 );


            		    goto ruleatom_id_ntEx;

            		}

            	}
                break;
            case SS:
            	{
            		switch ( this->LA(2) )
            		{
            		case COLON:
            		case COMMA:
            		case DIV:
            		case EQ:
            		case MINUS:
            		case MUL:
            		case PLUS:
            		case POW:
            		case RARROW:
            		case RBRACK:
            		case RPAREN:
            		case SEMI:
            			{
            				alt73=1;
            			}
            		    break;
            		case LANGBR:
            			{
            				alt73=2;
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return val;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 73 );
            		    ex->set_state( 13 );


            		    goto ruleatom_id_ntEx;

            		}

            	}
                break;
            case VERBOSE:
            	{
            		switch ( this->LA(2) )
            		{
            		case COLON:
            		case COMMA:
            		case DIV:
            		case EQ:
            		case MINUS:
            		case MUL:
            		case PLUS:
            		case POW:
            		case RARROW:
            		case RBRACK:
            		case RPAREN:
            		case SEMI:
            			{
            				alt73=1;
            			}
            		    break;
            		case LANGBR:
            			{
            				alt73=2;
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return val;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 73 );
            		    ex->set_state( 14 );


            		    goto ruleatom_id_ntEx;

            		}

            	}
                break;
            case BACKWARDCOMP:
            	{
            		switch ( this->LA(2) )
            		{
            		case COLON:
            		case COMMA:
            		case DIV:
            		case EQ:
            		case MINUS:
            		case MUL:
            		case PLUS:
            		case POW:
            		case RARROW:
            		case RBRACK:
            		case RPAREN:
            		case SEMI:
            			{
            				alt73=1;
            			}
            		    break;
            		case LANGBR:
            			{
            				alt73=2;
            			}
            		    break;

            		default:
            		    if (this->get_backtracking()>0)
            		    {
            		        this->set_failedflag( true );
            		        return val;
            		    }

            		    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 73 );
            		    ex->set_state( 15 );


            		    goto ruleatom_id_ntEx;

            		}

            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return val;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 73 );
                ex->set_state( 0 );


                goto ruleatom_id_ntEx;

            }

            switch (alt73)
            {
        	case 1:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:619:7: ids= id_str
        	    {
        	        this->followPush(FOLLOW_id_str_in_atom_id_nt3584);
        	        ids=id_str();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_id_ntEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             val= ex(ids.first);
        	             
        	        }


        	    }
        	    break;
        	case 2:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:620:7: ids= id_str li= list_idx
        	    {
        	        this->followPush(FOLLOW_id_str_in_atom_id_nt3598);
        	        ids=id_str();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_id_ntEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        this->followPush(FOLLOW_list_idx_in_atom_id_nt3604);
        	        li=list_idx();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_id_ntEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {

        	                        switch(li.size()) {
        	                            case 1:
        	                                val= ex(ids.first, li[0].first, li[0].second);

        	                                break;
        	                            case 2:
        	                                val= ex(ids.first, li[0].first, li[0].second, li[1].first, li[1].second);

        	                                break;
        	                            case 3:
        	                                val= ex(ids.first, li[0].first, li[0].second, li[1].first, li[1].second,
        	                                                     li[2].first, li[2].second);

        	                                break;
        	                            default:
        	                                val= ex(ids.first, li[0].first, li[0].second, li[1].first, li[1].second,
        	                                                     li[2].first, li[2].second, li[3].first, li[3].second);

        	                                break;
        	                        }
        	                    
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleatom_id_ntEx; /* Prevent compiler warnings */
    ruleatom_id_ntEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return val;
}
/* $ANTLR end atom_id_nt */

/**
 * $ANTLR start list_idx
 * ../gEcon_CURRENT/src//parser/gEcon.g:640:1: list_idx returns [std::vector<std::pair<bool, std::string> > listbs] : LANGBR ( (val= idx_str ) | ( QUOTE val= idx_str QUOTE ) ) ( COMMA ( (val= idx_str ) | ( QUOTE val= idx_str QUOTE ) ) )* RANGBR ;
 */
std::vector<std::pair<bool, std::string> >
gEconParser::list_idx()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    std::vector<std::pair<bool, std::string> > listbs;


    const CommonTokenType*    COMMA32;
    std::pair<std::string, int> val;
    typedef	std::pair<std::string, int> RETURN_TYPE_val;

    /* Initialize rule variables
     */


        typedef std::pair<bool, std::string> pbs;
        bool toomany = false;

    COMMA32       = NULL;


 
    {
        // ../gEcon_CURRENT/src//parser/gEcon.g:645:5: ( LANGBR ( (val= idx_str ) | ( QUOTE val= idx_str QUOTE ) ) ( COMMA ( (val= idx_str ) | ( QUOTE val= idx_str QUOTE ) ) )* RANGBR )
        // ../gEcon_CURRENT/src//parser/gEcon.g:645:7: LANGBR ( (val= idx_str ) | ( QUOTE val= idx_str QUOTE ) ) ( COMMA ( (val= idx_str ) | ( QUOTE val= idx_str QUOTE ) ) )* RANGBR
        {
             this->matchToken(LANGBR, &FOLLOW_LANGBR_in_list_idx3632);
            if  (this->hasException())
            {
                goto rulelist_idxEx;
            }
            if (this->hasFailed())
            {
                return listbs;
            }


            // ../gEcon_CURRENT/src//parser/gEcon.g:646:9: ( (val= idx_str ) | ( QUOTE val= idx_str QUOTE ) )
            {
                int alt74=2;
                switch ( this->LA(1) )
                {
                case BACKWARDCOMP:
                case BFALSE:
                case BTRUE:
                case CLETTER:
                case DID:
                case E:
                case ID:
                case INF:
                case INT:
                case LANDSCAPE:
                case LATEX:
                case LOGF:
                case LONG:
                case OUTPUT:
                case R:
                case SHORT:
                case SLETTER:
                case SS:
                case VERBOSE:
                case ZERO:
                	{
                		alt74=1;
                	}
                    break;
                case QUOTE:
                	{
                		alt74=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return listbs;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 74 );
                    ex->set_state( 0 );


                    goto rulelist_idxEx;

                }

                switch (alt74)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src//parser/gEcon.g:646:10: (val= idx_str )
            	    {
            	        // ../gEcon_CURRENT/src//parser/gEcon.g:646:10: (val= idx_str )
            	        // ../gEcon_CURRENT/src//parser/gEcon.g:646:11: val= idx_str
            	        {
            	            this->followPush(FOLLOW_idx_str_in_list_idx3648);
            	            val=idx_str();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulelist_idxEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return listbs;
            	            }


            	            if ( this->get_backtracking()==0 )
            	            {
            	                 listbs.push_back(pbs(false, val.first)); 
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    // ../gEcon_CURRENT/src//parser/gEcon.g:646:73: ( QUOTE val= idx_str QUOTE )
            	    {
            	        // ../gEcon_CURRENT/src//parser/gEcon.g:646:73: ( QUOTE val= idx_str QUOTE )
            	        // ../gEcon_CURRENT/src//parser/gEcon.g:646:74: QUOTE val= idx_str QUOTE
            	        {
            	             this->matchToken(QUOTE, &FOLLOW_QUOTE_in_list_idx3656);
            	            if  (this->hasException())
            	            {
            	                goto rulelist_idxEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return listbs;
            	            }


            	            this->followPush(FOLLOW_idx_str_in_list_idx3662);
            	            val=idx_str();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulelist_idxEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return listbs;
            	            }


            	             this->matchToken(QUOTE, &FOLLOW_QUOTE_in_list_idx3664);
            	            if  (this->hasException())
            	            {
            	                goto rulelist_idxEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return listbs;
            	            }


            	            if ( this->get_backtracking()==0 )
            	            {
            	                 listbs.push_back(pbs(true, val.first)); 
            	            }


            	        }


            	    }
            	    break;

                }
            }

            // ../gEcon_CURRENT/src//parser/gEcon.g:647:9: ( COMMA ( (val= idx_str ) | ( QUOTE val= idx_str QUOTE ) ) )*

            for (;;)
            {
                int alt76=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt76=1;
                	}
                    break;

                }

                switch (alt76)
                {
            	case 1:
            	    // ../gEcon_CURRENT/src//parser/gEcon.g:647:10: COMMA ( (val= idx_str ) | ( QUOTE val= idx_str QUOTE ) )
            	    {
            	        COMMA32 =  this->matchToken(COMMA, &FOLLOW_COMMA_in_list_idx3679);
            	        if  (this->hasException())
            	        {
            	            goto rulelist_idxEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return listbs;
            	        }


            	        // ../gEcon_CURRENT/src//parser/gEcon.g:647:16: ( (val= idx_str ) | ( QUOTE val= idx_str QUOTE ) )
            	        {
            	            int alt75=2;
            	            switch ( this->LA(1) )
            	            {
            	            case BACKWARDCOMP:
            	            case BFALSE:
            	            case BTRUE:
            	            case CLETTER:
            	            case DID:
            	            case E:
            	            case ID:
            	            case INF:
            	            case INT:
            	            case LANDSCAPE:
            	            case LATEX:
            	            case LOGF:
            	            case LONG:
            	            case OUTPUT:
            	            case R:
            	            case SHORT:
            	            case SLETTER:
            	            case SS:
            	            case VERBOSE:
            	            case ZERO:
            	            	{
            	            		alt75=1;
            	            	}
            	                break;
            	            case QUOTE:
            	            	{
            	            		alt75=2;
            	            	}
            	                break;

            	            default:
            	                if (this->get_backtracking()>0)
            	                {
            	                    this->set_failedflag( true );
            	                    return listbs;
            	                }

            	                ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                ex->set_decisionNum( 75 );
            	                ex->set_state( 0 );


            	                goto rulelist_idxEx;

            	            }

            	            switch (alt75)
            	            {
            	        	case 1:
            	        	    // ../gEcon_CURRENT/src//parser/gEcon.g:647:17: (val= idx_str )
            	        	    {
            	        	        // ../gEcon_CURRENT/src//parser/gEcon.g:647:17: (val= idx_str )
            	        	        // ../gEcon_CURRENT/src//parser/gEcon.g:647:18: val= idx_str
            	        	        {
            	        	            this->followPush(FOLLOW_idx_str_in_list_idx3687);
            	        	            val=idx_str();

            	        	            this->followPop();
            	        	            if  (this->hasException())
            	        	            {
            	        	                goto rulelist_idxEx;
            	        	            }
            	        	            if (this->hasFailed())
            	        	            {
            	        	                return listbs;
            	        	            }


            	        	            if ( this->get_backtracking()==0 )
            	        	            {
            	        	                 listbs.push_back(pbs(false, val.first)); 
            	        	            }


            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // ../gEcon_CURRENT/src//parser/gEcon.g:647:80: ( QUOTE val= idx_str QUOTE )
            	        	    {
            	        	        // ../gEcon_CURRENT/src//parser/gEcon.g:647:80: ( QUOTE val= idx_str QUOTE )
            	        	        // ../gEcon_CURRENT/src//parser/gEcon.g:647:81: QUOTE val= idx_str QUOTE
            	        	        {
            	        	             this->matchToken(QUOTE, &FOLLOW_QUOTE_in_list_idx3695);
            	        	            if  (this->hasException())
            	        	            {
            	        	                goto rulelist_idxEx;
            	        	            }
            	        	            if (this->hasFailed())
            	        	            {
            	        	                return listbs;
            	        	            }


            	        	            this->followPush(FOLLOW_idx_str_in_list_idx3701);
            	        	            val=idx_str();

            	        	            this->followPop();
            	        	            if  (this->hasException())
            	        	            {
            	        	                goto rulelist_idxEx;
            	        	            }
            	        	            if (this->hasFailed())
            	        	            {
            	        	                return listbs;
            	        	            }


            	        	             this->matchToken(QUOTE, &FOLLOW_QUOTE_in_list_idx3703);
            	        	            if  (this->hasException())
            	        	            {
            	        	                goto rulelist_idxEx;
            	        	            }
            	        	            if (this->hasFailed())
            	        	            {
            	        	                return listbs;
            	        	            }


            	        	            if ( this->get_backtracking()==0 )
            	        	            {
            	        	                 listbs.push_back(pbs(true, val.first)); 
            	        	            }


            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        if ( this->get_backtracking()==0 )
            	        {

            	                        if (!toomany && (listbs.size() > 4)) {
            	                            toomany = true;
            	                            errors.push_back("up to 4 indices are supported; error near line "
            	                                             + num2str((COMMA32->get_line())) + ", pos: " + num2str(COMMA32->get_charPositionInLine() + 1));
            	                        }
            	                      
            	        }


            	    }
            	    break;

            	default:
            	    goto loop76;	/* break out of the loop */
            	    break;
                }
            }
            loop76: ; /* Jump out to here if this rule does not match */


             this->matchToken(RANGBR, &FOLLOW_RANGBR_in_list_idx3714);
            if  (this->hasException())
            {
                goto rulelist_idxEx;
            }
            if (this->hasFailed())
            {
                return listbs;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulelist_idxEx; /* Prevent compiler warnings */
    rulelist_idxEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return listbs;
}
/* $ANTLR end list_idx */

/**
 * $ANTLR start idx_str
 * ../gEcon_CURRENT/src//parser/gEcon.g:656:1: idx_str returns [std::pair<std::string, int> val] : (is= id_str | E | INF | ZERO | INT | DID );
 */
std::pair<std::string, int>
gEconParser::idx_str()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    std::pair<std::string, int> val;


    const CommonTokenType*    E33;
    const CommonTokenType*    INF34;
    const CommonTokenType*    ZERO35;
    const CommonTokenType*    INT36;
    const CommonTokenType*    DID37;
    std::pair<std::string, int> is;
    typedef	std::pair<std::string, int> RETURN_TYPE_is;

    /* Initialize rule variables
     */

    E33       = NULL;
    INF34       = NULL;
    ZERO35       = NULL;
    INT36       = NULL;
    DID37       = NULL;


 
    {
        {
            //  ../gEcon_CURRENT/src//parser/gEcon.g:657:5: (is= id_str | E | INF | ZERO | INT | DID )

            ANTLR_UINT32 alt77;

            alt77=6;

            switch ( this->LA(1) )
            {
            case BACKWARDCOMP:
            case BFALSE:
            case BTRUE:
            case CLETTER:
            case ID:
            case LANDSCAPE:
            case LATEX:
            case LOGF:
            case LONG:
            case OUTPUT:
            case R:
            case SHORT:
            case SLETTER:
            case SS:
            case VERBOSE:
            	{
            		alt77=1;
            	}
                break;
            case E:
            	{
            		alt77=2;
            	}
                break;
            case INF:
            	{
            		alt77=3;
            	}
                break;
            case ZERO:
            	{
            		alt77=4;
            	}
                break;
            case INT:
            	{
            		alt77=5;
            	}
                break;
            case DID:
            	{
            		alt77=6;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return val;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 77 );
                ex->set_state( 0 );


                goto ruleidx_strEx;

            }

            switch (alt77)
            {
        	case 1:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:657:7: is= id_str
        	    {
        	        this->followPush(FOLLOW_id_str_in_idx_str3739);
        	        is=id_str();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleidx_strEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             val= is;
        	             
        	        }


        	    }
        	    break;
        	case 2:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:658:7: E
        	    {
        	        E33 =  this->matchToken(E, &FOLLOW_E_in_idx_str3749);
        	        if  (this->hasException())
        	        {
        	            goto ruleidx_strEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             val= std::pair<std::string, int>((E33->getText()), (E33->get_line()));
        	             
        	        }


        	    }
        	    break;
        	case 3:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:659:7: INF
        	    {
        	        INF34 =  this->matchToken(INF, &FOLLOW_INF_in_idx_str3759);
        	        if  (this->hasException())
        	        {
        	            goto ruleidx_strEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             val= std::pair<std::string, int>((INF34->getText()), (INF34->get_line()));
        	             
        	        }


        	    }
        	    break;
        	case 4:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:660:7: ZERO
        	    {
        	        ZERO35 =  this->matchToken(ZERO, &FOLLOW_ZERO_in_idx_str3769);
        	        if  (this->hasException())
        	        {
        	            goto ruleidx_strEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             val= std::pair<std::string, int>((ZERO35->getText()), (ZERO35->get_line()));
        	             
        	        }


        	    }
        	    break;
        	case 5:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:661:7: INT
        	    {
        	        INT36 =  this->matchToken(INT, &FOLLOW_INT_in_idx_str3779);
        	        if  (this->hasException())
        	        {
        	            goto ruleidx_strEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             val= std::pair<std::string, int>((INT36->getText()), (INT36->get_line()));
        	             
        	        }


        	    }
        	    break;
        	case 6:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:662:7: DID
        	    {
        	        DID37 =  this->matchToken(DID, &FOLLOW_DID_in_idx_str3789);
        	        if  (this->hasException())
        	        {
        	            goto ruleidx_strEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             val= std::pair<std::string, int>((DID37->getText()), (DID37->get_line()));
        	             
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleidx_strEx; /* Prevent compiler warnings */
    ruleidx_strEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return val;
}
/* $ANTLR end idx_str */

/**
 * $ANTLR start id_str
 * ../gEcon_CURRENT/src//parser/gEcon.g:665:1: id_str returns [std::pair<std::string, int> val] : ( ID | SLETTER | CLETTER | OUTPUT | R | LATEX | LANDSCAPE | LOGF | LONG | SHORT | BTRUE | BFALSE | SS | VERBOSE | BACKWARDCOMP );
 */
std::pair<std::string, int>
gEconParser::id_str()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    std::pair<std::string, int> val;


    const CommonTokenType*    ID38;
    const CommonTokenType*    SLETTER39;
    const CommonTokenType*    CLETTER40;
    const CommonTokenType*    OUTPUT41;
    const CommonTokenType*    R42;
    const CommonTokenType*    LATEX43;
    const CommonTokenType*    LANDSCAPE44;
    const CommonTokenType*    LOGF45;
    const CommonTokenType*    LONG46;
    const CommonTokenType*    SHORT47;
    const CommonTokenType*    BTRUE48;
    const CommonTokenType*    BFALSE49;
    const CommonTokenType*    SS50;
    const CommonTokenType*    VERBOSE51;
    const CommonTokenType*    BACKWARDCOMP52;

    /* Initialize rule variables
     */

    ID38       = NULL;
    SLETTER39       = NULL;
    CLETTER40       = NULL;
    OUTPUT41       = NULL;
    R42       = NULL;
    LATEX43       = NULL;
    LANDSCAPE44       = NULL;
    LOGF45       = NULL;
    LONG46       = NULL;
    SHORT47       = NULL;
    BTRUE48       = NULL;
    BFALSE49       = NULL;
    SS50       = NULL;
    VERBOSE51       = NULL;
    BACKWARDCOMP52       = NULL;


 
    {
        {
            //  ../gEcon_CURRENT/src//parser/gEcon.g:666:5: ( ID | SLETTER | CLETTER | OUTPUT | R | LATEX | LANDSCAPE | LOGF | LONG | SHORT | BTRUE | BFALSE | SS | VERBOSE | BACKWARDCOMP )

            ANTLR_UINT32 alt78;

            alt78=15;

            switch ( this->LA(1) )
            {
            case ID:
            	{
            		alt78=1;
            	}
                break;
            case SLETTER:
            	{
            		alt78=2;
            	}
                break;
            case CLETTER:
            	{
            		alt78=3;
            	}
                break;
            case OUTPUT:
            	{
            		alt78=4;
            	}
                break;
            case R:
            	{
            		alt78=5;
            	}
                break;
            case LATEX:
            	{
            		alt78=6;
            	}
                break;
            case LANDSCAPE:
            	{
            		alt78=7;
            	}
                break;
            case LOGF:
            	{
            		alt78=8;
            	}
                break;
            case LONG:
            	{
            		alt78=9;
            	}
                break;
            case SHORT:
            	{
            		alt78=10;
            	}
                break;
            case BTRUE:
            	{
            		alt78=11;
            	}
                break;
            case BFALSE:
            	{
            		alt78=12;
            	}
                break;
            case SS:
            	{
            		alt78=13;
            	}
                break;
            case VERBOSE:
            	{
            		alt78=14;
            	}
                break;
            case BACKWARDCOMP:
            	{
            		alt78=15;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return val;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 78 );
                ex->set_state( 0 );


                goto ruleid_strEx;

            }

            switch (alt78)
            {
        	case 1:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:666:7: ID
        	    {
        	        ID38 =  this->matchToken(ID, &FOLLOW_ID_in_id_str3812);
        	        if  (this->hasException())
        	        {
        	            goto ruleid_strEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             val= std::pair<std::string, int>((ID38->getText()), (ID38->get_line()));
        	             
        	        }


        	    }
        	    break;
        	case 2:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:667:7: SLETTER
        	    {
        	        SLETTER39 =  this->matchToken(SLETTER, &FOLLOW_SLETTER_in_id_str3822);
        	        if  (this->hasException())
        	        {
        	            goto ruleid_strEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             val= std::pair<std::string, int>((SLETTER39->getText()), (SLETTER39->get_line()));
        	             
        	        }


        	    }
        	    break;
        	case 3:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:668:7: CLETTER
        	    {
        	        CLETTER40 =  this->matchToken(CLETTER, &FOLLOW_CLETTER_in_id_str3832);
        	        if  (this->hasException())
        	        {
        	            goto ruleid_strEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             val= std::pair<std::string, int>((CLETTER40->getText()), (CLETTER40->get_line()));
        	             
        	        }


        	    }
        	    break;
        	case 4:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:669:7: OUTPUT
        	    {
        	        OUTPUT41 =  this->matchToken(OUTPUT, &FOLLOW_OUTPUT_in_id_str3842);
        	        if  (this->hasException())
        	        {
        	            goto ruleid_strEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             val= std::pair<std::string, int>((OUTPUT41->getText()), (OUTPUT41->get_line()));
        	             
        	        }


        	    }
        	    break;
        	case 5:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:670:7: R
        	    {
        	        R42 =  this->matchToken(R, &FOLLOW_R_in_id_str3852);
        	        if  (this->hasException())
        	        {
        	            goto ruleid_strEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             val= std::pair<std::string, int>((R42->getText()), (R42->get_line()));
        	             
        	        }


        	    }
        	    break;
        	case 6:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:671:7: LATEX
        	    {
        	        LATEX43 =  this->matchToken(LATEX, &FOLLOW_LATEX_in_id_str3862);
        	        if  (this->hasException())
        	        {
        	            goto ruleid_strEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             val= std::pair<std::string, int>((LATEX43->getText()), (LATEX43->get_line()));
        	             
        	        }


        	    }
        	    break;
        	case 7:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:672:7: LANDSCAPE
        	    {
        	        LANDSCAPE44 =  this->matchToken(LANDSCAPE, &FOLLOW_LANDSCAPE_in_id_str3872);
        	        if  (this->hasException())
        	        {
        	            goto ruleid_strEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             val= std::pair<std::string, int>((LANDSCAPE44->getText()), (LANDSCAPE44->get_line()));
        	             
        	        }


        	    }
        	    break;
        	case 8:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:673:7: LOGF
        	    {
        	        LOGF45 =  this->matchToken(LOGF, &FOLLOW_LOGF_in_id_str3882);
        	        if  (this->hasException())
        	        {
        	            goto ruleid_strEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             val= std::pair<std::string, int>((LOGF45->getText()), (LOGF45->get_line()));
        	             
        	        }


        	    }
        	    break;
        	case 9:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:674:7: LONG
        	    {
        	        LONG46 =  this->matchToken(LONG, &FOLLOW_LONG_in_id_str3892);
        	        if  (this->hasException())
        	        {
        	            goto ruleid_strEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             val= std::pair<std::string, int>((LONG46->getText()), (LONG46->get_line()));
        	             
        	        }


        	    }
        	    break;
        	case 10:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:675:7: SHORT
        	    {
        	        SHORT47 =  this->matchToken(SHORT, &FOLLOW_SHORT_in_id_str3902);
        	        if  (this->hasException())
        	        {
        	            goto ruleid_strEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             val= std::pair<std::string, int>((SHORT47->getText()), (SHORT47->get_line()));
        	             
        	        }


        	    }
        	    break;
        	case 11:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:676:7: BTRUE
        	    {
        	        BTRUE48 =  this->matchToken(BTRUE, &FOLLOW_BTRUE_in_id_str3912);
        	        if  (this->hasException())
        	        {
        	            goto ruleid_strEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             val= std::pair<std::string, int>((BTRUE48->getText()), (BTRUE48->get_line()));
        	             
        	        }


        	    }
        	    break;
        	case 12:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:677:7: BFALSE
        	    {
        	        BFALSE49 =  this->matchToken(BFALSE, &FOLLOW_BFALSE_in_id_str3922);
        	        if  (this->hasException())
        	        {
        	            goto ruleid_strEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             val= std::pair<std::string, int>((BFALSE49->getText()), (BFALSE49->get_line()));
        	             
        	        }


        	    }
        	    break;
        	case 13:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:678:7: SS
        	    {
        	        SS50 =  this->matchToken(SS, &FOLLOW_SS_in_id_str3932);
        	        if  (this->hasException())
        	        {
        	            goto ruleid_strEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             val= std::pair<std::string, int>((SS50->getText()), (SS50->get_line()));
        	             
        	        }


        	    }
        	    break;
        	case 14:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:679:7: VERBOSE
        	    {
        	        VERBOSE51 =  this->matchToken(VERBOSE, &FOLLOW_VERBOSE_in_id_str3942);
        	        if  (this->hasException())
        	        {
        	            goto ruleid_strEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             val= std::pair<std::string, int>((VERBOSE51->getText()), (VERBOSE51->get_line()));
        	             
        	        }


        	    }
        	    break;
        	case 15:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:680:7: BACKWARDCOMP
        	    {
        	        BACKWARDCOMP52 =  this->matchToken(BACKWARDCOMP, &FOLLOW_BACKWARDCOMP_in_id_str3952);
        	        if  (this->hasException())
        	        {
        	            goto ruleid_strEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             val= std::pair<std::string, int>((BACKWARDCOMP52->getText()), (BACKWARDCOMP52->get_line()));
        	             
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleid_strEx; /* Prevent compiler warnings */
    ruleid_strEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return val;
}
/* $ANTLR end id_str */

/**
 * $ANTLR start atom_num
 * ../gEcon_CURRENT/src//parser/gEcon.g:683:1: atom_num returns [ex val] : (a= atom_int |a= atom_double );
 */
ex
gEconParser::atom_num()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    ex val;


    double a;
    typedef	double RETURN_TYPE_a;

    /* Initialize rule variables
     */


 
    {
        {
            //  ../gEcon_CURRENT/src//parser/gEcon.g:684:5: (a= atom_int |a= atom_double )

            ANTLR_UINT32 alt79;

            alt79=2;

            switch ( this->LA(1) )
            {
            case INT:
            case ZERO:
            	{
            		alt79=1;
            	}
                break;
            case DOUBLE:
            	{
            		alt79=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return val;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 79 );
                ex->set_state( 0 );


                goto ruleatom_numEx;

            }

            switch (alt79)
            {
        	case 1:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:684:7: a= atom_int
        	    {
        	        this->followPush(FOLLOW_atom_int_in_atom_num3980);
        	        a=atom_int();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_numEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             val= ex((double) a);
        	             
        	        }


        	    }
        	    break;
        	case 2:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:685:7: a= atom_double
        	    {
        	        this->followPush(FOLLOW_atom_double_in_atom_num3994);
        	        a=atom_double();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_numEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             val= ex(a);
        	             
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleatom_numEx; /* Prevent compiler warnings */
    ruleatom_numEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return val;
}
/* $ANTLR end atom_num */

/**
 * $ANTLR start atom_int
 * ../gEcon_CURRENT/src//parser/gEcon.g:688:1: atom_int returns [int val] : ( ZERO | INT );
 */
int
gEconParser::atom_int()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    int val;


    const CommonTokenType*    INT53;

    /* Initialize rule variables
     */


        val= 0;


    INT53       = NULL;


 
    {
        {
            //  ../gEcon_CURRENT/src//parser/gEcon.g:692:5: ( ZERO | INT )

            ANTLR_UINT32 alt80;

            alt80=2;

            switch ( this->LA(1) )
            {
            case ZERO:
            	{
            		alt80=1;
            	}
                break;
            case INT:
            	{
            		alt80=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return val;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 80 );
                ex->set_state( 0 );


                goto ruleatom_intEx;

            }

            switch (alt80)
            {
        	case 1:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:692:8: ZERO
        	    {
        	         this->matchToken(ZERO, &FOLLOW_ZERO_in_atom_int4023);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_intEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	    }
        	    break;
        	case 2:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:693:8: INT
        	    {
        	        INT53 =  this->matchToken(INT, &FOLLOW_INT_in_atom_int4032);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_intEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             val= atoi((INT53->getText()).c_str());
        	             
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleatom_intEx; /* Prevent compiler warnings */
    ruleatom_intEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return val;
}
/* $ANTLR end atom_int */

/**
 * $ANTLR start atom_double
 * ../gEcon_CURRENT/src//parser/gEcon.g:696:1: atom_double returns [double val] : DOUBLE ;
 */
double
gEconParser::atom_double()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    double val;


    const CommonTokenType*    DOUBLE54;

    /* Initialize rule variables
     */


        val= 0.;


    DOUBLE54       = NULL;


 
    {
        // ../gEcon_CURRENT/src//parser/gEcon.g:700:5: ( DOUBLE )
        // ../gEcon_CURRENT/src//parser/gEcon.g:700:8: DOUBLE
        {
            DOUBLE54 =  this->matchToken(DOUBLE, &FOLLOW_DOUBLE_in_atom_double4062);
            if  (this->hasException())
            {
                goto ruleatom_doubleEx;
            }
            if (this->hasFailed())
            {
                return val;
            }


            if ( this->get_backtracking()==0 )
            {
                 val= atof((DOUBLE54->getText()).c_str());
                 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleatom_doubleEx; /* Prevent compiler warnings */
    ruleatom_doubleEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return val;
}
/* $ANTLR end atom_double */

/**
 * $ANTLR start atom_bool
 * ../gEcon_CURRENT/src//parser/gEcon.g:703:1: atom_bool returns [bool val] : ( BTRUE | BFALSE );
 */
bool
gEconParser::atom_bool()
{
        gEconParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    bool val;


    /* Initialize rule variables
     */


        val= false;



 
    {
        {
            //  ../gEcon_CURRENT/src//parser/gEcon.g:707:5: ( BTRUE | BFALSE )

            ANTLR_UINT32 alt81;

            alt81=2;

            switch ( this->LA(1) )
            {
            case BTRUE:
            	{
            		alt81=1;
            	}
                break;
            case BFALSE:
            	{
            		alt81=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return val;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 81 );
                ex->set_state( 0 );


                goto ruleatom_boolEx;

            }

            switch (alt81)
            {
        	case 1:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:707:7: BTRUE
        	    {
        	         this->matchToken(BTRUE, &FOLLOW_BTRUE_in_atom_bool4091);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_boolEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             val= true;
        	             
        	        }


        	    }
        	    break;
        	case 2:
        	    // ../gEcon_CURRENT/src//parser/gEcon.g:708:7: BFALSE
        	    {
        	         this->matchToken(BFALSE, &FOLLOW_BFALSE_in_atom_bool4101);
        	        if  (this->hasException())
        	        {
        	            goto ruleatom_boolEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return val;
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleatom_boolEx; /* Prevent compiler warnings */
    ruleatom_boolEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return val;
}
/* $ANTLR end atom_bool */

// $ANTLR start synpred1_gEcon
void gEconParser::msynpred1_gEcon_fragment(  )
{
    // ../gEcon_CURRENT/src//parser/gEcon.g:358:7: ({...}?)
    // ../gEcon_CURRENT/src//parser/gEcon.g:358:8: {...}?
    {
        if ( !(( model_obj.get_option(Model::backwardcomp) )) )
        {
            if (this->get_backtracking()>0)
            {
                this->set_failedflag( true );
                return ;
            }

            	ExceptionBaseType* ex = new ANTLR_Exception< gEconParserImplTraits, FAILED_PREDICATE_EXCEPTION, StreamType>( this->get_rec(), " model_obj.get_option(Model::backwardcomp) " );
                ex->set_ruleName( "synpred1_gEcon" );


        }

    }

// This is where rules clean up and exit
//
goto rulesynpred1_gEconEx; /* Prevent compiler warnings */
rulesynpred1_gEconEx: ;

}
// $ANTLR end synpred1_gEcon
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
bool gEconParser::msynpred( antlr3::ClassForwarder< synpred1_gEcon >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred1_gEcon_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

/* End of syntactic predicates
 * ==============================================
 */

	}


/* End of code
 * =============================================================================
 */
